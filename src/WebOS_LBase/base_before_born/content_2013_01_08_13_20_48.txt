分享到一键分享QQ空间新浪微博百度搜藏人人网腾讯微博百度相册开心网腾讯朋友百度贴吧豆瓣网搜狐微博百度新首页QQ和讯微博更多...百度分享
比特首页|新闻中心|企业计算|云计算|信息化|移动互联|整机外设 博客 论坛 技工场 产品库 视频 专题 企业 直复营销 实验室 数据库我们也在这里：   企业计算 存储 软件与服务 数据库/开发 服务器 操作系统 网 络 安 全 您的位置： 比特网 > 软件与服务 > 数据库/开发 > 正文 Java编程“为了性能”要做的几点2013-01-07 00:00中国IT实验室佚名
关键字：Java 
　　最近的机器内存又爆满了，除了新增机器内存外，还应该好好review一下我们的代码，有很多代码编写过于随意化，这些不好的习惯或对程序语言的不了解是应该好好打压打压了。

　　下面是参考网络资源总结的一些在Java编程中尽可能要做到的一些地方。

　　1. 尽量在合适的场合使用单例

　　使用单例可以减轻加载的负担，缩短加载的时间，提高加载的效率，但并不是所有地方都适用于单例，简单来说，单例主要适用于以下三个方面：

　　第一，控制资源的使用，通过线程同步来控制资源的并发访问;

　　第二，控制实例的产生，以达到节约资源的目的;

　　第三，控制数据共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信。

　　2. 尽量避免随意使用静态变量

　　要知道，当某个对象被定义为stataic变量所引用，那么gc通常是不会回收这个对象所占有的内存，如

　　public class A{ static B b = new B(); } 此时静态变量b的生命周期与A类同步，如果A类不会卸载，那么b对象会常驻内存，直到程序终止。

　　3. 尽量避免过多过常的创建Java对象

　　尽量避免在经常调用的方法，循环中new对象，由于系统不仅要花费时间来创建对象，而且还要花时间对这些对象进行垃圾回收和处理，在我们可以控制的范围内，最大限度的重用对象，最好能用基本的数据类型或数组来替代对象。

　　4. 尽量使用final修饰符

　　带有final修饰符的类是不可派生的。在Java核心API中，有许多应用final的例子，例如java.lang.String.为String类指定final防止了使用者覆盖length()方法。另外，如果一个类是final的，则该类所有方法都是final的。Java编译器会寻找机会内联(inline)所有的final方法(这和具体的编译器实现有关)。此举能够使性能平均提高50%.

　　5. 尽量使用局部变量

　　调用方法时传递的参数以及在调用中创建的临时变量都保存在栈(Stack)中，速度较快。其他变量，如静态变量、实例变量等，都在堆(Heap)中创建，速度较慢。

　　6. 尽量处理好包装类型和基本类型两者的使用场所

　　虽然包装类型和基本类型在使用过程中是可以相互转换，但它们两者所产生的内存区域是完全不同的，基本类型数据产生和处理都在栈中处理，包装类型是对象，是在堆中产生实例。

　　在集合类对象，有对象方面需要的处理适用包装类型，其他的处理提倡使用基本类型。

　　7. 慎用synchronized,尽量减小synchronize的方法

　　都知道，实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。synchronize方法被调用时，直接会把当前对象锁 了，在方法执行完之前其他线程无法调用当前对象的其他方法。所以synchronize的方法尽量小，并且应尽量使用方法同步代替代码块同步。

　　8. 尽量使用StringBuilder和StringBuffer进行字符串连接

　　这个就不多讲了。

　　9. 尽量不要使用finalize方法

　　实际上，将资源清理放在finalize方法中完成是非常不好的选择，由于GC的工作量很大，尤其是回收Young代内存时，大都会引起应用程序暂停，所以再选择使用finalize方法进行资源清理，会导致GC负担更大，程序运行效率更差。

　　10. 尽量使用基本数据类型代替对象

　　String str = "hello"; 上面这种方式会创建一个"hello"字符串，而且JVM的字符缓存池还会缓存这个字符串;

　　String str = new String("hello"); 此时程序除创建字符串外，str所引用的String对象底层还包含一个char[]数组，这个char[]数组依次存放了h,e,l,l,o

　　11. 单线程应尽量使用HashMap、ArrayList

　　HashTable、Vector等使用了同步机制，降低了性能。

　　12. 尽量合理的创建HashMap

　　当你要创建一个比较大的hashMap时，充分利用另一个构造函数

　　public HashMap(int initialCapacity, float loadFactor) 避免HashMap多次进行了hash重构，扩容是一件很耗费性能的事，在默认中initialCapacity只有16,而loadFactor是 0.75,需要多大的容量，你最好能准确的估计你所需要的最佳大小，同样的Hashtable,Vectors也是一样的道理。

　　13. 尽量减少对变量的重复计算

　　如

　　for(int i=0;i 

　　for(int i=0,len=list.size();i 

　　14. 尽量避免不必要的创建

　　如

　　A a = new A(); if(i==1){list.add(a);} 应该改为

　　if(i==1){ A a = new A(); list.add(a);} 15. 尽量在finally块中释放资源

　　程序中使用到的资源应当被释放，以避免资源泄漏。这最好在finally块中去做。不管程序执行的结果如何，finally块总是会执行的，以确保资源的正确关闭。

　　16. 尽量使用移位来代替'a/b'的操作

　　"/"是一个代价很高的操作，使用移位的操作将会更快和更有效

　　如

　　int num = a / 4; int num = a / 8; 应该改为

　　int num = a 》 2; int num = a 》 3; 但注意的是使用移位应添加注释，因为移位操作不直观，比较难理解

　　17.尽量使用移位来代替'a*b'的操作

　　同样的，对于'*'操作，使用移位的操作将会更快和更有效

　　如

　　int num = a * 4; int num = a * 8; 应该改为

　　int num = a 《 2; int num = a 《 3; 18. 尽量确定StringBuffer的容量

　　StringBuffer 的构造器会创建一个默认大小(通常是16)的字符数组。在使用中，如果超出这个大小，就会重新分配内存，创建一个更大的数组，并将原先的数组复制过来，再 丢弃旧的数组。在大多数情况下，你可以在创建 StringBuffer的时候指定大小，这样就避免了在容量不够的时候自动增长，以提高性能。

　　如：

　　StringBuffer buffer = new StringBuffer(1000); 19. 尽量早释放无用对象的引用

　　大部分时，方法局部引用变量所引用的对象 会随着方法结束而变成垃圾，因此，大部分时候程序无需将局部，引用变量显式设为null.

　　例如：

　　Public void test(){ Object obj = new Object(); …… Obj=null; } 上面这个就没必要了，随着方法test()的执行完成，程序中obj引用变量的作用域就结束了。但是如果是改成下面：

　　Public void test(){ Object obj = new Object(); …… Obj=null; //执行耗时，耗内存操作;或调用耗时，耗内存的方法 …… } 这时候就有必要将obj赋值为null,可以尽早的释放对Object对象的引用。

　　20. 尽量避免使用二维数组

　　二维数据占用的内存空间比一维数组多得多，大概10倍以上。

　　21. 尽量避免使用split

　　除非是必须的，否则应该避免使用split,split由于支持正则表达式，所以效率比较低，如果是频繁的几十，几百万的调用将会耗费大量资源，如果确实需 要频繁的调用split,可以考虑使用apache的StringUtils.split(string,char)，频繁split的可以缓存结果。

　　22. ArrayList & LinkedList

　　一 个是线性表，一个是链表，一句话，随机查询尽量使用ArrayList,ArrayList优于LinkedList,LinkedList还要移动指 针，添加删除的操作LinkedList优于ArrayList,ArrayList还要移动数据，不过这是理论性分析，事实未必如此，重要的是理解好2 者得数据结构，对症下药。

　　23. 尽量使用System.arraycopy ()代替通过来循环复制数组

　　System.arraycopy() 要比通过循环来复制数组快的多

　　24. 尽量缓存经常使用的对象

　　尽可能将经常使用的对象进行缓存，可以使用数组，或HashMap的容器来进行缓存，但这种方式可能导致系统占用过多的缓存，性能下降，推荐可以使用一些第三方的开源工具，如EhCache,Oscache进行缓存，他们基本都实现了FIFO/FLU等缓存算法。

　　25. 尽量避免非常大的内存分配

　　有时候问题不是由当时的堆状态造成的，而是因为分配失败造成的。分配的内存块都必须是连续的，而随着堆越来越满，找到较大的连续块越来越困难。

　　26. 慎用异常

　　当创建一个异常时，需要收集一个栈跟踪(stack track)，这个栈跟踪用于描述异常是在何处创建的。构建这些栈跟踪时需要为运行时栈做一份快照，正是这一部分开销很大。当需要创建一个 Exception 时，JVM 不得不说：先别动，我想就您现在的样子存一份快照，所以暂时停止入栈和出栈操作。栈跟踪不只包含运行时栈中的一两个元素，而是包含这个栈中的每一个元素。

　　如 果您创建一个 Exception ,就得付出代价。好在捕获异常开销不大，因此可以使用 try-catch 将核心内容包起来。从技术上讲，您甚至可以随意地抛出异常，而不用花费很大的代价。招致性能损失的并不是 throw 操作--尽管在没有预先创建异常的情况下就抛出异常是有点不寻常。真正要花代价的是创建异常。幸运的是，好的编程习惯已教会我们，不应该不管三七二十一就 抛出异常。异常是为异常的情况而设计的，使用时也应该牢记这一原则。

     
[ 责任编辑：之极 ]     [ 我要挑错 ] 更多 
微博推荐
相关文章浏览过本文的还浏览过
MySQL服务器的启动与停止的解析提升MySQL的可扩展性的绝招Oracle截取字符串的函数substrJava环境变量配置方法详解C++ ofstream和ifstream详细用法

从新到旧排序从旧到新排序
0条评论1
社交帐号登录:
微博QQ人人豆瓣开心更多»淘宝网易搜狐百度谷歌 

说点什么吧 ...不想登录？直接点击发布即可作为游客留言。发 布
比特网正在使用多说

最新专题更多
    
打造物联网智能家居时代扫描二维码，下载比特新闻客户端
 
推荐专题更多
 用友企业云助力企业转型升级 微软建立开放共赢的云生态圈智慧协同创造无限 华天动力OA系统有奖调查 2012 IBM信息随需应变和业务分析峰会 融合 智能 创新-第八届南京软博会 蕴韬略 促转变 共发展 2012 SAP中国商业同略会 2012 IBM咨询服务转型10周年 精进创新 SAP推进企业发展转型 直话IT：从理念到实践 云计算应如何落地 第十届中国国际软件与信息服务交易会_ChinaByte 原创视频教程更多 
 iMIS解读PM选型误区：不买贵的，只买对的 项目管理理念需要IT工具“落地” 商业服务行业信息化管理的解决方案 维基百科逃离甲骨文MySQL 挺开源数据库博客精选更多
[lsjrjiji09]浅谈液压万能试验机的操作步骤 [南开戈德]胜龙银行固定资产管理系统 [金力电动平车]如何使电动平车轨道安装工艺达到极致 [ibaogao]2013-2017年中国书架市场调查及投资前景分析报告 [ibaogao]2013-2017年中国证书市场调查及投资前景分析报告 [ibaogao]2013-2017年中国记事本市场调查及投资前景分析报告 [ibaogao]2013-2017年中国生丝（真丝）市场分析与投资前景预测报告 [ibaogao]2013-2017年中国输液市场监测与投资前景分析报告 老　杳 孙永杰 刘兴亮 陈永东 马继华 毛启盈 阿　凡 月　光 陈志刚 更多→ 
论坛
 金山云总裁王育林：最 苹果生产iPhone 金山流氓推广浏览器“ 申通承认暴力分拣 撤张朝阳:借媒体平台拿下第3张移动互联网门票 李国庆:价格战不会更惨 今年大型电商必死一家 圣特尔CEO陈涛：一个程序员的八年前戏 榕树下总裁张恩超：已出售20多部影视改编权 金山云总裁王育林：最快三年盈利 正寻求融资 苹果生产iPhone mini:头脑发热or真心实意？ 金山流氓推广浏览器“七种武器” 申通承认暴力分拣 撤换相关网点负责人 点击排行每日排行 每周排行 每月排行 
中国移动大力发展“无线城市”让智能生活不再遥远 比特焦点CES 云计算 虚拟化 vmware oracle 微软 Windows8 大数据 CMO CIO thinkserver ARM Windows Server 2012 BI hadoop 超级本 移动信息化 
邮件订阅  
企业信息化周刊新闻中心热点推荐 企业信息化周刊比特网信息化周刊为您全力奉献信息化领域每周热点新闻、时事评论、案例点评、产经动态等内容。独家点评各类热点新闻，带给您不一样的视角感受。新闻中心热点推荐在如今这个信息爆炸的时代里，每天都会有数不清的新闻通过各种渠道涌到我们面前，而真正有价值的应该进入我们心里的，却很可能随着日历牌的翻动被我们忽略。作为对一周新闻进行回顾的《比特网新闻中心每周热点推荐》，就是要告诉您过去的七天都发生了哪些新闻，更希望和您一起，站在七天的高度来看待过去一周的新闻。博客新闻周刊数据中心热点播报 比特网博客新闻周刊以最快速度追踪业界热点新闻，以最全面的视角解读业界的新鲜事，以最互动的方式来倾听最广大网民的声音，打造“最快、最丰富、最好看”的一周热点评论。数据中心热点播报业内首个只为报道数据中心资讯内容的专业频道，是为数据中心用户及厂商而建设的专业平台。以数据中心专业技术内容为核心，贯穿新鲜资讯、技巧方法和用户案例等高附加值内容。以为网友提供最具实用价值的信息为原则，以成为用户最信赖的行业专家为目标，打造高时效、高品质、高前瞻的最全威频道。企业数据中心热点播报，为您精心奉上过去一周数据中心最精彩、权威资讯_chinabyte比特网。chinabyte商业智选chinabyte网络周刊 chinabyte商业智选比特网商用电脑携办公自动化频道，倾力打造最权威的企业办公设备采购指导中心和软硬件整合资讯中心。为您提供第一手的专业化资讯及深度分析，帮助商用个人与企业用户实现商务智选。chinabyte网络周刊 向企业网管员以及网络技术和产品使用者提供关于组网、建网、网络管理、网络运维等最新技术和实用技巧，帮助网管答疑解惑，成为网管好帮手。chinabyte服务器周刊chinabyte软件视界 chinabyte服务器周刊就服务器和数据中心领域的产业动态、技术热点、热门产品、实用技巧，向企业CIO/CTO、IT管理层、技术人员提供一周精选套餐，为数据中心决策者、使用者提供一份服务器行业以及数据中心领域最新动态及产品应用的技术套餐。chinabyte软件视界以数据库和管理软件为重点的全面软件产业热点、应用方案推荐、实用技巧分享等等。chinabyte存储周刊chinabyte安全周刊 chinabyte存储周刊就存储和虚拟化领域的产业动态、技术热点、热门产品、实用技巧，向企业CIO/CTO、IT管理层、技术人员提供一周精选套餐。chinabyte安全周刊向企业信息安全专业人士提供安全领域最新的热点技术、热门产品、实用技巧、安全漏洞和木马病毒下载。订阅 关于我们 | About us | 网站律师 | 天极服务 | 电子杂志 | RSS订阅 | 加入我们 | 天极动态 | 媒体大全 | 网站地图 
比特网 版权所有 渝ICP证B2-20030003号

Copyright (C) 1997-2013 Chinabyte.com, All Rights Reserved

客户服务、商务合作电话：010-82657868-583 在线意见
 微信扫描，分享到朋友圈

原文出自【比特网】，转载请保留原文链接：http://soft.chinabyte.com/database/456/12515456.shtml
