返回主页
HarHar
简单，快乐，创新，极致…… 
 【专注于移动与嵌入式领域】
博客园闪存首页新随笔联系管理订阅订阅 随笔- 59  文章- 0  评论- 782 
va_start和va_end使用详解
　　本文主要介绍va_start和va_end的使用及原理。

　　在以前的一篇帖子Format MessageBox 详解中曾使用到va_start和va_end这两个宏，但对它们也只是泛泛的了解。

　　介绍这两个宏之前先看一下C中传递函数的参数时的用法和原理： 

1.在C中，当我们无法列出传递函数的所有实参的类型和数目时,可以用省略号指定参数表

void foo(...);
void foo(parm_list,...);
这种方式和我们以前认识的不大一样，但我们要记住这是C中一种传参的形式，在后面我们就会用到它。


2.函数参数的传递原理

　　函数参数是以数据结构:栈的形式存取,从右至左入栈。

　　首先是参数的内存存放格式：参数存放在内存的堆栈段中，在执行函数的时候，从最后一个开始入栈。因此栈底高地址，栈顶低地址，举个例子如下：
void func(int x, float y, char z);
　　那么，调用函数的时候，实参 char z 先进栈，然后是 float y，最后是 int x，因此在内存中变量的存放次序是 x->y->z，因此，从理论上说，我们只要探测到任意一个变量的地址，并且知道其他变量的类型，通过指针移位运算，则总可以顺藤摸瓜找到其他的输入变量。
　　下面是 <stdarg.h> 里面重要的几个宏定义如下：
typedef char* va_list;
void va_start ( va_list ap, prev_param ); /* ANSI version */
type va_arg ( va_list ap, type ); 
void va_end ( va_list ap ); 
va_list 是一个字符指针，可以理解为指向当前参数的一个指针，取参必须通过这个指针进行。
<Step 1> 在调用参数表之前，定义一个 va_list 类型的变量，(假设va_list 类型变量被定义为ap)；
<Step 2> 然后应该对ap 进行初始化，让它指向可变参数表里面的第一个参数，这是通过 va_start 来实现的，第一个参数是 ap 本身，第二个参数是在变参表前面紧挨着的一个变量,即“...”之前的那个参数；
<Step 3> 然后是获取参数，调用va_arg，它的第一个参数是ap，第二个参数是要获取的参数的指定类型，然后返回这个指定类型的值，并且把 ap 的位置指向变参表的下一个变量位置；
<Step 4> 获取所有的参数之后，我们有必要将这个 ap 指针关掉，以免发生危险，方法是调用 va_end，他是输入的参数 ap 置为 NULL，应该养成获取完参数表之后关闭指针的习惯。说白了，就是让我们的程序具有健壮性。通常va_start和va_end是成对出现。
例如 int max(int n, ...); 其函数内部应该如此实现：
#include <iostream.h> 
void fun(int a, ...) 
{ 
　　int *temp = &a;
　　temp++;
　　for (int i = 0; i < a; ++i) 
　　{ 
　　　　cout << *temp << endl; 
　　　　temp++; 
　　} 
}
int main() 
{ 
　　int a = 1; 
　　int b = 2; 
　　int c = 3; 
　　int d = 4; 
　　fun(4, a, b, c, d); 
　　system("pause"); 
　　return 0; 
} 

Output:: 
1 
2 
3 
4

3:获取省略号指定的参数
　　在函数体中声明一个va_list，然后用va_start函数来获取参数列表中的参数，使用完毕后调用va_end()结束。像这段代码： 
void TestFun(char* pszDest, int DestLen, const char* pszFormat, ...) 
{ 
va_list args; 
va_start(args, pszFormat); //一定要“...”之前的那个参数
_vsnprintf(pszDest, DestLen, pszFormat, args); 
va_end(args); 
}
 
4.演示如何使用参数个数可变的函数，采用ANSI标准形式 
#include 〈stdio.h〉 
#include 〈string.h〉 
#include 〈stdarg.h〉 

/*函数原型声明，至少需要一个确定的参数，注意括号内的省略号*/ 
int demo( char, ... ); 
void main( void ) 
{ 
   demo("DEMO", "This", "is", "a", "demo!", ""); 
} 

/*ANSI标准形式的声明方式，括号内的省略号表示可选参数*/ 
int demo( char msg, ... ) 
{ 
       /*定义保存函数参数的结构*/
   va_list argp; 
   int argno = 0; 
   char para; 
　　   /*argp指向传入的第一个可选参数，msg是最后一个确定的参数*/ 
   va_start( argp, msg ); 
   while (1) 
       { 
        para = va_arg( argp, char); 
           if ( strcmp( para, "") == 0 ) 
               break; 
           printf("Parameter #%d is: %s\n", argno, para); 
           argno++; 
} 
va_end( argp ); 
/*将argp置为NULL*/
return 0; 
}
 以上是对va_start和va_end的介绍。

 

	最后，希望转载的朋友能够尊重作者的劳动成果，加上转载地址：http://www.cnblogs.com/hanyonglu/archive/2011/05/07/2039916.html  谢谢。

	

	完毕。^_^ 

 

分类: 【C & C++】
绿色通道： 好文要顶 关注我 收藏该文与我联系 
HarHar
关注 - 3
粉丝 - 434
+加关注
4 0
(请您对文章做出评价)
« 上一篇：malloc和free函数详解
» 下一篇：Windows下批量下载Android源码
posted @ 2011-05-07 17:59 HarHar 阅读(9539) 评论(6) 编辑 收藏

评论
   #1楼 2012-10-09 19:06 | wuqi1003  
之前看了很多va的函数，知道看到你这篇文章才算有点懂了！
支持(0)反对(0)
   #2楼 2013-08-29 10:12 | 高培亮  
你好：
如果说我不确定变参的类型，那么va_arg该怎么用那？？
支持(0)反对(0)
   #3楼 2013-10-18 19:17 | 白饭  
受教，谢谢！
支持(0)反对(0)
   #4楼 2013-11-25 20:34 | chengpiaopiao  
#include	<stdio.h>
#include	<stdlib.h>
#include <stdarg.h>

int demo(char*, ...);
/**
* @brief The entry of this program
*
* @param argc counts of argument
* @param argv argument variables stored in
*
* @return EXIT_SUCCESS
*/
int main (int argc, char **argv)
{
demo("Demo","This","is","a","demo!","");
return EXIT_SUCCESS;
}	 //end of function main



int demo (char* msg, ...)
{
va_list argp;
int argno = 0;
char* para;

va_start(argp,msg);
while(1)
{
para = va_arg(argp, char*);
if(strcmp(para, "")==0)
break;
printf("parameter #%d is : %s\n", argno, para);
argno++;
}
va_end(argp);
return 0;
}	 //end of function demo
支持(0)反对(0)
   #5楼 2013-11-25 20:35 | chengpiaopiao  
博主例子写错了，应该是我上面这样
支持(0)反对(0)
   #6楼[楼主] 2013-11-26 13:38 | HarHar  
@chengpiaopiao
谢谢。
支持(0)反对(0)
刷新评论刷新页面返回顶部
注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。
博客园首页博问新闻闪存程序员招聘知识库

最新IT新闻:
· 中国希望微软延长Windows XP支持
· 衰老细胞与癌细胞共享特征
· 支付宝进军线下瞄准社交支付：AA付款功能曝光
· 敏捷开发的6个实战经验
· Google专家分享网站优化最新技术
» 更多新闻...
最新知识库文章:
· 数字证书及CA的扫盲介绍
· 领域驱动设计和实践
· 编码风格不是编码规范
· 对于现代开发来说，Javascript就是一种垃圾语言
· 教你一眼认出英语单词的意思
» 更多知识库文章...
公告

总访问量：track web traffic
每日统计：
站长统计
今日IP[1062]
今日PV[3117]
昨日IP[1213]
昨日PV[3470]
当前在线[23]
百度Hi：hspl_2008
微信账号：hanyonglu2010
联系方式：
Email：hanyonglu@126.com
Gmail：hanyonglu@gmail.com
新浪微博：
http://weibo.com/hanyonglu
开源项目：
https://github.com/hanyonglu
昵称：HarHar
园龄：4年8个月
粉丝：434
关注：3
+加关注
<	2011年5月	>
日	一	二	三	四	五	六
24	25	26	27	28	29	30
1	2	3	4	5	6	7
8	9	10	11	12	13	14
15	16	17	18	19	20	21
22	23	24	25	26	27	28
29	30	31	1	2	3	4
搜索
 
 
常用链接
我的随笔
我的评论
我的参与
最新评论
我的标签
更多链接
最新随笔
1. Android实现伸缩弹力分布菜单效果
2. JAVA实现随机无重复数字功能
3. Android实现甘特图(GanttChart)效果
4. Android实现宫格图片连续滑动效果
5. Android in Mono开发初体验之DataBase
6. Android in Mono开发初体验之ListAdapter
7. Android实现下拉导航选择菜单效果
8. Android实现局部图片滑动指引效果
9. OpenGL开发之旅.NET平台配置
10. OpenGL开发之旅基础知识介绍
我的标签
Android实现屏幕旋转异步下载效果(1)
随笔分类(58)
【Algorithm Analysis】(1)
【Android Develop】(35)
【Architecture & Design】
【C & C++】(3)
【Computer Graphics】
【Dotnet Framework】
【Dotnet Technology】(6)
【IOS Develop】(1)
【JAVA Develope】
【Linux Kernel】
【Linux Program】
【MonoDevelop】(2)
【Network Service】(4)
【OpenGL & ES 】(2)
【Win32/64 SDK & OS】(4)
随笔档案(59)
2012年10月 (2)
2012年9月 (2)
2012年8月 (2)
2012年7月 (1)
2012年6月 (2)
2012年5月 (2)
2012年4月 (6)
2012年3月 (13)
2012年2月 (12)
2011年6月 (1)
2011年5月 (1)
2011年4月 (15)
友情链接
Trinea
A User, An Androider, A Runner, A Biker, A Dreamer
极光推送博客
积分与排名
积分 -	136873
排名 -	852
最新评论
1. Re:Android实现局部图片滑动指引效果
谢谢分享。写得很详细。
--learningBird
2. Re:Android开发之InstanceState详解
多谢楼主分享！
--hety
3. Re:va_start和va_end使用详解
@chengpiaopiao
谢谢。
--HarHar
4. Re:va_start和va_end使用详解
博主例子写错了，应该是我上面这样
--chengpiaopiao
5. Re:va_start和va_end使用详解
#include	#include	#include int demo(char*, ...);/** * @brief The entry of this program * * @param argc counts of argument * @param argv argument variables stored in * * @return EXIT_SUCCESS */int mai...
--chengpiaopiao
阅读排行榜
1. Android实现推送方式解决方案(56424)
2. Android实现左右滑动指引效果(45793)
3. Android实现左右滑动效果(38609)
4. Android Push Notification实现信息推送使用(34749)
5. Android实现导航菜单左右滑动效果(32341)
6. Android实现数据存储技术(31608)
7. Android开发之日历控件实现(25398)
8. Android操作HTTP实现与服务器通信(23321)
9. Android实现网络多线程断点续传下载(22603)
10. Android实现程序前后台切换效果(20916)
评论排行榜
1. Android实现下拉导航选择菜单效果(133)
2. Android实现左右滑动指引效果(97)
3. Android Push Notification实现信息推送使用(68)
4. Android实现局部图片滑动指引效果(54)
5. Android实现导航菜单左右滑动效果(49)
6. Android实现程序前后台切换效果(43)
7. JAVA实现随机无重复数字功能(35)
8. Android实现宫格图片连续滑动效果(31)
9. Android开发之APN网络切换(29)
10. Android实现网络多线程断点续传下载(25)
推荐排行榜
1. Android实现左右滑动指引效果(17)
2. Android实现数据存储技术(17)
3. Android实现局部图片滑动指引效果(15)
4. Android实现下拉导航选择菜单效果(13)
5. DotNet实现PictureBox重叠透明效果(12)
6. Android开发之InstanceState详解(11)
7. Android实现推送方式解决方案(11)
8. Android实现导航菜单左右滑动效果(11)
9. Android实现网络多线程断点续传下载(11)
10. Android实现程序前后台切换效果(10)
Copyright ©2013 HarHar
