

    互联网  hackhome
网侠首页网络学院软件下载
网络技术 图形图像 操作系统 上网指南 工具软件 办公软件 媒体动画 网站运营 认证考试 网页制作 技术开发 web编程 电脑入门 游戏 QQ

当前位置：网侠下载学院 → 程序开发 → C++ → C语言函数的作用域规则
C语言函数的作用域规则
日期：2007年6月7日 作者： 相关tags: 语言 函数 作用域 规则
分享到：腾讯微博 百度收藏 新浪微博 QQ空间 百度空间 0




　　“语言的作用域规则”是一组确定一部分代码是否“可见”或可访问另一部分代码和数据的规则。
C语言中的每一个函数都是一个独立的代码块。一个函数的代码块是隐藏于函数内部的，不能被任何其它函数中的任何语句（除调用它的语句之外）所访问（例如，用g o t o语句跳转到另一个函数内部是不可能的）。构成一个函数体的代码对程序的其它部分来说是隐蔽的，它既不能影响程序其它部分，也不受其它部分的影响。换言之，由于两个函数有不同的作用域，定义在一个函数内部的代码数据无法与定义在另一个函数内部的代码和数据相互作用。
C语言中所有的函数都处于同一作用域级别上。这就是说，把一个函数定义于另一个函数内部是不可能的。
4.2.1 局部变量
在函数内部定义的变量成为局部变量。在某些C语言教材中，局部变量称为自动变量，这就与使用可选关键字a u t o定义局部变量这一作法保持一致。局部变量仅由其被定义的模块内部的语句所访问。换言之，局部变量在自己的代码模块之外是不可知的。切记：模块以左花
括号开始，以右花括号结束。
对于局部变量，要了解的最重要的东西是：它们仅存在于被定义的当前执行代码块中，即局部变量在进入模块时生成，在退出模块时消亡。
定义局部变量的最常见的代码块是函数。例如，考虑下面两个函数。
 
整数变量x被定义了两次，一次在func1()中，一次在func2()中。func1()和func2()中的x互不相关。其原因是每个x作为局部变量仅在被定义的块内可知。
语言中包括了关键字auto，它可用于定义局部变量。但自从所有的非全局变量的缺省值假定为auto以来，auto就几乎很少使用了，因此在本书所有的例子中，均见不到这一关键字。
在每一函数模块内的开始处定义所有需要的变量，是最常见的作法。这样做使得任何人读此函数时都很容易，了解用到的变量。但并非必须这样做不可，因为局部变量可以在任何模块中定义。为了解其工作原理，请看下面函数。 
 
这里的局部变量s就是在if块入口处建立，并在其出口处消亡的。因此s仅在if块中可知，而在其它地方均不可访问，甚至在包含它的函数内部的其它部分也不行。
在一个条件块内定义局部变量的主要优点是仅在需要时才为之分配内存。这是因为局部变量仅在控制转到它们被定义的块内时才进入生存期。虽然大多数情况下这并不十分重要，但当代码用于专用控制器（如识别数字安全码的车库门控制器）时，这就变得十分重要了，因为这时随机存储器（RAM）极其短缺。
由于局部变量随着它们被定义的模块的进出口而建立或释放，它们存储的信息在块工作结束后也就丢失了。切记，这点对有关函数的访问特别重要。当访问一函数时，它的局部变量被建立，当函数返回时，局部变量被销毁。这就是说，局部变量的值不能在两次调用之间保持。
4.2.2全局变量
与局部变量不同，全局变量贯穿整个程序，并且可被任何一个模块使用。它们在整个程序执行期间保持有效。全局变量定义在所有函数之外，可由函数内的任何表达式访问。在下面的程序中可以看到，变量count定义在所有函数之外，函数main()之前。但其实它可以放置在任何第一次被使用之前的地方，只要不在函数内就可以。实践表明，定义全局变量的最佳位置是在程序的顶部。 
 
仔细研究此程序后，可见变量count既不是main()也不是func1()定义的，但两者都可以使用它。函数func2()也定义了一个局部变量count。当func2访问count时，它仅访问自己定义的局部变量count，而不是那个全局变量count。切记，全局变量和某一函数的局部变量同名时，该函数对该名的所有访问仅针对局部变量，对全局变量无影响，这是很方便的。然而，如果忘记了这点，即使程序看起来是正确的，也可能导致运行时的奇异行为。
全局变量由C编译程序在动态区之外的固定存储区域中存储。当程序中多个函数都使用同一数据时，全局变量将是很有效的。然而，由于三种原因，应避免使用不必要的全局变量：
①不论是否需要，它们在整个程序执行期间均占有存储空间。②由于全局变量必须依靠外部定义，所以在使用局部变量就可以达到其功能时使用了全局变量，将降低函数的通用性，这是因为它要依赖其本身之外的东西。③大量使用全局变量时，不可知的和不需要的副作用将
可能导致程序错误。如在编制大型程序时有一个重要的问题：变量值都有可能在程序其它地点偶然改变。
结构化语言的原则之一是代码和数据的分离。C语言是通过局部变量和函数的使用来实现这一分离的。下面用两种方法编制计算两个整数乘积的简单函数mul()。
通用的专用的
mul(x,y) intx,y;
intx,y; mul()
{{
return(x*y);return(x*y);
}}
两个函数都是返回变量x和y的积，可通用的或称为参数化版本可用于任意两整数之积，而专用的版本仅能计算全局变量x和y的乘积。
4.2.3动态存储变量
从变量的作用域原则出发，我们可以将变量分为全局变量和局部变量；换一个方式，从变量的生存期来分，可将变量分为动态存储变量及静态存储变量。
动态存储变量可以是函数的形式参数、局部变量、函数调用时的现场保护和返回地址。
这些动态存储变量在函数调用时分配存储空间，函数结束时释放存储空间。动态存储变量的定义形式为在变量定义的前面加上关键字“auto”，例如： 
auto int a,b,c;
“auto”也可以省略不写。事实上，我们已经使用的变量均为省略了关键字“auto”的动态存储变量。有时我们甚至为了提高速度，将局部的动态存储变量定义为寄存器型的变量，定义的形式为在变量的前面加关键字“register”，例如：
register int x,y,z;
这样一来的好处是：将变量的值无需存入内存，而只需保存在CPU内的寄存器中，以使速度大大提高。由于CPU内的寄存器数量是有限的，不可能为某个变量长期占用。因此，一些操作系统对寄存器的使用做了数量的限制。或多或少，或根本不提供，用自动变量来替代。
4.2.4静态存储变量
在编译时分配存储空间的变量称为静态存储变量，其定义形式为在变量定义的前面加上关键字“static”，例如：
static int a=8;
定义的静态存储变量无论是做全程量或是局部变量，其定义和初始化在程序编译时进行。
作为局部变量，调用函数结束时，静态存储变量不消失并且保留原值。 
 
从上述程序看，函数f()被三次调用，由于局部变量x是静态存储变量，它是在编译时分配存储空间，故每次调用函数f()时，变量x不再重新初始化，保留加1后的值，得到上面的输出。 
[1] [2] 下一页 


复制本页网址和标题，发送给你QQ/Msn的好友一起分享
C语言函数的作用域规则 相关文章：
·Oracle中LAG和LEAD 等统计函数的运用
·跟我学小偷程序之几个基本函数(第二天)
·Java绝对值函数：Math.abs简介
·为英文Windows XP安装中文语言包
·c语言中的结构（struct）和联合（union）简介
·C语言程序源代码下载
·PHP采集有关 教学 之一：CURL函数库
·DELPHI字符串、数组操作函数详解
C语言函数的作用域规则 相关软件
·《格兰蒂亚2》原声配音语言补丁
·《C语言游戏编程从入门到精通》 (PDF格式)
·《突击英雄》免安装简繁体多语言版
·HTML语言大全全集(DOC格式)
·iTunes V7.5.0.20多国语言版
·WinMEnc V0.61 beta 多国语言版
·集成学习环境(C语言) V4.2
·未公开的Windows API函数
上一篇:C语言函数说明与返回值
下一篇:C语言函数的调用与参数
特别声明：本站除部分特别声明禁止转载的专稿外的其他文章可以自由转载，但请务必注明出处和原始作
者.文章版权归文章原始作者所有.对于被本站转载文章的个人和网站，我们表示深深的谢意。如果本站转
载的文章有版权问题请联系编辑人员,我们尽快予以更正. 转载请注明来源：http://www.hackhome.com
精品推荐
相关分类
·IT人生 ·VB ·C++ 
·Delphi ·Java ·PowerBuilder 
·其他语言 ·软件工程 ·数据结构 
·Oracle

热点TOP10
·运用VC++ 2010创立Ribbon界面[多图]
·双人黑白棋子游戏
·利用C++实现的贪吃蛇游戏[多图]
·异步串口通信 VC++
·一个简单的玫瑰花程序（二）
·c#.net连接access操作类
·c语言中的结构（struct）和联合（union）简介
·用C++访问SQL Server 2000[图]
·C++ STL编程轻松入门[多图]
·socket编程原理
特别推荐
·经典c#.Net面试标题
·C语言常用的三种排序方法总结与探讨
·C/C++笔试、面试题目大汇总
·C#基础概念二十五问
·利用C#远程存取Access数据库[多图]
·入门教程：实例详解C++友元[多图]
·C语言基础教程（三）输入输出函数及控制流程语句
·VC下调用ACM音频编程接口压缩Wave音频[多图]
·如何在C/C++中调用Java[多图]
·设计的一个计算器类的源代码,很简陋哦,请各位高手不要见笑!
| 帮助(？) | 版权声明 | 友情连接 | 信息发布
Copyright 2003-2007 网侠 All Rights Reserved.

 
