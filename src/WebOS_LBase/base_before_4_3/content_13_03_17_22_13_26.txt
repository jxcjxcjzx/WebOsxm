
Leon→_→CC
博客园首页博问闪存新随笔联系订阅管理 随笔- 45  文章- 0  评论- 15 
USB协议基本知识
USB 基本知识 
USB的重要关键概念: 
1、 端点：位于USB设备或主机上的一个数据缓冲区，用来存放和发送USB的各种数据，每一个端点都有惟一的确定地址，有不同的传输特性（如输入端点、输出端点、配置端点、批量传输端点） 
2、 帧：时间概念，在USB中，一帧就是1MS，它是一个独立的单元，包含了一系列总线动作，USB将1帧分为好几份，每一份中是一个USB的传输动作。 
3、upstream、downstream(上行、下行)：设备到主机为上行，主机到设备为下行



下面以一问一答的形式开始学习吧：

问题一：USB的传输线结构是如何的呢？

答案一：一条USB的传输线分别由地线、电源线、D+、D-四条线构成，D+和D-是差分输入线，它使用的是3.3V的电压（注意哦，与CMOS的 5V电平不同），而电源线和地线可向设备提供5V电压，最大电流为500MA

问题二：数据是如何在USB传输线里面传送的

答案二：数据在USB线里传送是由低位到高位发送的。

问题三：USB的编码方案？

答案三：USB采用不归零取反来传输数据，当传输线上的差分数据输入0时就取反，输入1时就保持原值，为了确保信号发送的准确性，当在USB总线上发送一个包时，传输设备就要进行位插入***作（即在数据流中每连续6个1后就插入一个0），从而强迫NRZI码发生变化。这个了解就行了，这些是由专门硬件处理的。

问题四：USB的数据格式是怎么样的呢？

答案四：和其他的一样，USB数据是由二进制数字串构成的，首先数字串构成域（有七种），域再构成包，包再构成事务（IN、OUT、SETUP），事务最后构成传输（中断传输、并行传输、批量传输和控制传输）。下面简单介绍一下域、包、事务、传输，请注意他们之间的关系。


（一）域：是USB数据最小的单位，由若干位组成（至于是多少位由具体的域决定），域可分为七个类型：

1、同步域（SYNC），八位，值固定为0000 0001，用于本地时钟与输入同步

2、标识域（PID），由四位标识符+四位标识符反码构成，表明包的类型和格式，这是一个很重要的部分，这里可以计算出，USB的标识码有16种，具体分类请看问题五。

3、地址域（ADDR）：七位地址，代表了设备在主机上的地址，地址000 0000被命名为零地址，是任何一个设备第一次连接到主机时，在被主机配置、枚举前的默认地址，由此可以知道为什么一个USB主机只能接127个设备的原因。

4、端点域（ENDP），四位，由此可知一个USB设备有的端点数量最大为16个。

5、帧号域（FRAM），11位，每一个帧都有一个特定的帧号，帧号域最大容量0x800，对于同步传输有重要意义（同步传输为四种传输类型之一，请看下面）。

6、数据域（DATA）：长度为0~1023字节，在不同的传输类型中，数据域的长度各不相同，但必须为整数个字节的长度

7、校验域（CRC）：对令牌包和数据包（对于包的分类请看下面）中非PID域进行校验的一种方法，CRC校验在通讯中应用很泛，是一种很好的校验方法，至于具体的校验方法这里就不多说，请查阅相关资料，只须注意CRC码的除法是模2运算，不同于10进制中的除法。

（二）包：由域构成的包有四种类型，分别是令牌包、数据包、握手包和特殊包，前面三种是重要的包，不同的包的域结构不同，介绍如下

1、令牌包：可分为输入包、输出包、设置包和帧起始包（注意这里的输入包是用于设置输入命令的，输出包是用来设置输出命令的，而不是放据数的）

其中输入包、输出包和设置包的格式都是一样的：

SYNC+PID+ADDR+ENDP+CRC5（五位的校验码）

帧起始包的格式：

SYNC+PID+11位FRAM+CRC5（五位的校验码）

2、数据包：分为DATA0包和DATA1包，当USB发送数据的时候，当一次发送的数据长度大于相应端点的容量时，就需要把数据包分为好几个包，分批发送，DATA0包和DATA1包交替发送，即如果第一个数据包是 DATA0，那第二个数据包就是DATA1。但也有例外情况，在同步传输中（四类传输类型中之一），所有的数据包都是为DATA0，格式如下：

SYNC+PID+0~1023字节+CRC16

3、握手包：结构最为简单的包，格式如下

SYNC+PID

 

USB的四种传输类型：

1.  控制传输：

      控制传输是一种可靠的双向传输，一次控制传输可分为三个阶段。第一阶段为从HOST到Device的SETUP事务传输，这个阶段指定了此次控制传输的请求类型；

      第二阶段为数据阶段，也有些请求没有数据阶段；第三阶段为状态阶段，通过一次IN/OUT 传输表明请求是否成功完成。

      控制传输通过控制管道在应用软件和 Device 的控制端点之间进行，控制传输过程中传输的数据是有格式定义的，USB 设备或主机可根据格式定义解析获得的数据含义。

      其他三种传输类型都没有格式定义。

      控制传输对于最大包长度有固定的要求。对于高速设备该值为 64Byte；对于低速设备该值为 8；全速设备可以是 8或 16或 32或 64。

      最大包长度 表征了一个端点单次接收/发送数据的能力，实际上反应的是该端点对应的Buffer 的大小。Buffer 越大，单次可接收/发送的数据包越大，反之亦反。

      当通过一个端点进行数据传输时，  若数据的大小超过该端点的最大包长度时，需要将数据分成若干个数据包传输，并且要求除最后一个包外，所有的包长度均等于该最大包长度。

      这也就是说如果一个端点收到/发送了一个长度小于最大包长度的包，即意味着数据传输结束。

      控制传输在访问总线时也受到一些限制，如：

        a. 高速端点的控制传输不能占用超过 20%的微帧，全速和低速的则不能超过 10%。 
        b. 在一帧内如果有多余的未用时间，并且没有同步和中断传输，可以用来进行控制传输。

2.  中断传输：

      中断传输是一种轮询的传输方式，是一种单向的传输，HOST通过固定的间隔对中断端点进行查询，若有数据传输或可以接收数据则返回数据或发送数据，否则返回NAK，表示尚未准备好。

      中断传输的延迟有保证，但并非实时传输，它是一种延迟有限的可靠传输，支持错误重传。 
      对于高速/全速/低速端点，最大包长度分别可以达到1024/64/8 Bytes。

      高速中断传输不得占用超过 80%的微帧时间，全速和低速不得超过 90%。

      中断端点的轮询间隔由在端点描述符中定义，全速端点的轮询间隔可以是1~255mS，低速端点为10~255mS，高速端点为(2interval-1)*125uS，其中 interval取 1到 16之间的值。

      除高速高带宽中断端点外，一个微帧内仅允许一次中断事务传输，高速高带宽端点最多可以在一个微帧内进行三次中断事务传输，传输高达 3072 字节的数据。

      所谓单向传输，并不是说该传输只支持一个方向的传输，而是指在某个端点上该传输仅支持一个方向，或输出，或输入。如果需要在两个方向上进行某种单向传输，需要占用两个端点，

      分别配置成不同的方向，可以拥有相同的端点编号。

3.  批量传输：

      批量传输是一种可靠的单向传输，但延迟没有保证，它尽量利用可以利用的带宽来完成传输，适合数据量比较大的传输。

      低速 USB 设备不支持批量传输，高速批量端点的最大包长度为 512，全速批量端点的最大包长度可以为 8、16、32、64。

      批量传输在访问 USB 总线时，相对其他传输类型具有最低的优先级，USB HOST 总是优先安排其他类型的传输，当总线带宽有富余时才安排批量传输。

      高速的批量端点必须支持PING 操作，向主机报告端点的状态，NYET 表示否定应答，没有准备好接收下一个数据包，ACK 表示肯定应答，已经准备好接收下一个数据包。

4.  同步传输：

      同步传输是一种实时的、不可靠的传输，不支持错误重发机制。只有高速和全速端点支持同步传输，高速同步端点的最大包长度为 1024，低速的为 1023。

      除高速高带宽同步端点外，一个微帧内仅允许一次同步事务传输，高速高带宽端点最多可以在一个微帧内进行三次同步事务传输，传输高达 3072 字节的数据。

      全速同步传输不得占用超过 80%的帧时间，高速同步传输不得占用超过 90%的微帧时间。 同步端点的访问也和中断端点一样，有固定的时间间隔限制。

      在主机控制器和 USB  HUB 之间还有另外一种传输——分离传输（Split  Transaction），它仅在主机控制器和 HUB之间执行，通过分离传输，可以允许全速/低速设备连接到高速主机。

      分离传输对于USB 设备来说是透明的、不可见的。

      分离传输：顾名思义就是把一次完整的事务传输分成两个事务传输来完成。其出发点是高速传输和全速/低速传输的速度不相等，如果使用一次完整的事务来传输，势必会造成比较长的等待时间，

      从而降低了高速 USB 总线的利用率。通过将一次传输分成两此，将令牌（和数据）的传输与响应数据（和握手）的传输分开，这样就可以在中间插入其他高速传输，从而提高总线的利用率。




总结：USB的最小单元是“域”，由“域”构成了“包”，在由“包”构成了“事务”，最后由“事务”构成了“传输”，在应用层面，我们看到的只是传输，所以USB协议栈就需要完成传输以下的所有事情。这对标准的USB协议栈提出了最基本的要求。
分类: linux
绿色通道： 好文要顶 关注我 收藏该文与我联系 
Leon&CC
关注 - 0
粉丝 - 26
+加关注
0 0
(请您对文章做出评价)
« 博主上一篇：usb中的endpoint(端点)和传输模式
» 博主下一篇：Android自适应不同分辨率或不同屏幕大小的layout布局(横屏|竖屏)
posted @ 2011-09-23 15:36 Leon&CC 阅读(1101) 评论(0) 编辑 收藏
刷新评论刷新页面返回顶部
注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。
找优秀程序员，就在博客园
博客园首页博问新闻闪存程序员招聘知识库

最新IT新闻:
· 好奇号发回火星山的全景彩照
· 谷歌墓场：那些被关停的服务们
· Chrome关闭原生RSS实现bug报告
· 人人CEO陈一舟：我别无选择只能多做APP
· LG欲振兴智能手机业务 中国市场或成其跳板
» 更多新闻...
最新知识库文章:
· 处理 JavaScript 异常的一个想法
· SQL Server表分区详解
· 漫谈重构
· 云计算里AWS和Azure的探究
· SQL Server 高性能写入的一些总结
» 更多知识库文章...

昵称：Leon&CC
园龄：2年
粉丝：26
关注：0
+加关注
<	2011年9月	>
日	一	二	三	四	五	六
28	29	30	31	1	2	3
4	5	6	7	8	9	10
11	12	13	14	15	16	17
18	19	20	21	22	23	24
25	26	27	28	29	30	1
2	3	4	5	6	7	8
搜索
 
 
常用链接
我的随笔
我的评论
我的参与
最新评论
我的标签
更多链接
我的标签
Android Handler Looper(1)
eclipse 关联 android 源码(1)
launcher(1)
随笔分类(45)
android(24)
linux(12)
Makefile
ruby(7)
uboot(2)
随笔档案(45)
2012年4月 (2)
2012年3月 (1)
2012年2月 (2)
2011年9月 (6)
2011年8月 (6)
2011年5月 (5)
2011年4月 (10)
2011年3月 (11)
2011年2月 (2)
文章分类(2)
Android(2)
assembly
Design Pattern
Java
Linux(Ubuntu)
Ruby Rails
Uboot
数据库
最新评论
1. Re:对Android4.0中Launcher2一些调试记录
请问你是修改哪里，可以加大主界面应用程序图标呢？我试过修改，不行。
--zhongyuanceshi
2. Re:Android图片处理（Matrix,ColorMatrix）
简洁明了，一看就可理解，太谢谢楼主了
--zhuyz89
3. Re:Android图片处理（Matrix,ColorMatrix）
谢谢~
--梅小姐
4. Re:Android图片处理（Matrix,ColorMatrix）
很好,有图有真相
--lxlpp
5. Re:Android图片处理（Matrix,ColorMatrix）
额 谢谢分享！
--jw114
阅读排行榜
1. Android图片处理（Matrix,ColorMatrix）(28530)
2. android中使用startActivityForResult回传数据(转)(7037)
3. Java回调函数(方法)(5034)
4. Android自适应不同分辨率或不同屏幕大小的layout布局(横屏|竖屏)(3911)
5. usb中的endpoint(端点)和传输模式(2745)
评论排行榜
1. Android图片处理（Matrix,ColorMatrix）(13)
2. android中使用startActivityForResult回传数据(转)(1)
3. 对Android4.0中Launcher2一些调试记录(1)
4. Eclipse关联android源码(0)
5. 运行project提示conversion to dalvik format failed with error 原因(0)
推荐排行榜
1. Android图片处理（Matrix,ColorMatrix）(18)
2. Java回调函数(方法)(4)
3. android中使用startActivityForResult回传数据(转)(1)
4. Android数据存储操作⑥ContentProvider、ContentResolver(1)
Copyright ©2013 Leon&CC
