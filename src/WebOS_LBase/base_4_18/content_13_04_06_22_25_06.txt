您还未登录！|登录|注册|帮助首页业界移动云计算研发论坛博客下载
更多
华章IT官方博客《人月神话》作者Brooks从事60年巅峰之作《设计原本》出版！
目录视图摘要视图订阅
2013年7月微软MVP申请开始啦！        CSDN博客移动开发排行榜      写“书评”赢下载分！ 
2013年4月微软MVP会员名单揭晓！      来极客头条，赢下载积分      专访关东升：将人文融入到科技产品中
 专业程序员必知必会的技巧：驯服复杂代码
分类： （1-1）新书快讯 （1-4）佳文推荐 2013-03-07 16:15 20998人阅读 评论(48) 收藏 举报
目录(?)[+]
你从入职第一天起就要应对复杂代码。

若是还未遇到过无法理解的程序，那说明你编程的年头还不够长。在行业里，要不了多久你就会碰到让人发懵的混乱代码：巨兽、面条工厂、来自地狱的遗留系统。我曾接手过一个程序，它的前任在听说要增加一个分量不轻的新特性时，选择了辞职。（我并不怪他。）
软件系统的复杂度是不可避免的。有些问题就是很难，它们的解决方案很复杂。然而，你在软件中找到的大多数复杂度是我们自己造成的。在《The Mythical Man-Month》（人月神话）[Bro95]里，Fred Brooks将复杂度的两个来源分成必然（necessary）复杂度和偶然（accidental）复杂度。
这里有一种区分必然复杂度和偶然复杂度的思考方法：什么复杂度是问题域固有的？假设你面对的是一个日期/时间处理代码散落各处的程序。在处理时间时，存在一些必然复杂度：每月的天数不同，必须考虑闰年，等等。但多数我碰到的程序充斥着大量与处理时间相关的偶然复杂度：用不同格式保存的时间，加减时间的新奇（同时也是充满Bug的）方法，不一致的时间打印格式，说都说不完。
复杂度的死亡螺线
编程时常会遇到这种情况：产品代码库中的偶然复杂度渐渐压倒必然复杂度。情况在某一时刻会自我放大，我称这种现象为复杂度的死亡螺线，如图1所示。

图1　复杂度的死亡螺线
问题1：代码规模
构建产品时，它的代码规模最终将远超任何在学校或消遣项目中所遇到的。行业中的代码库的度量结果从成千到上百万代码行（Line of Code, LOC）不等。

John Lions在《Lions’ Commentary on UNIX 6th Edition》一书中写道：单个程序员能够理解和维护的程序大小的实际限制规模是1万行代码。于1975年发布的UNIX第6版的规模大约是9000行代码（不算机器特定的设备驱动程序）。
相比而言，Windows NT在1993年有4百万~5百万行代码。10年后，Windows Server 2003配备了2000名开发人员和2000名测试人员，他们管理多达5千万行代码。大多数行业项目并不像Windows那样巨大，但它们也都轻易地跨过了Lions设定的1万行代码的警戒线。这样的规模意味着公司内部没有人能理解整个代码库。
问题2：复杂度
随着代码规模的增长，最初想法的概念优雅性消失了。曾经对于车库中两个小伙水晶般清澈的想法变成了大批开发人员艰难跋涉其中的阴暗沼泽。
复杂度并不是代码规模的必然产物。大型代码库完全有可能被拆分成许多模块，其中每个模块都有清晰的用途、优雅的实现和为人熟知的与邻近模块的交互。
然而，即使设计良好的系统也会在它们变大时变得复杂。一旦没有一个人可以理解整个系统，这时多个人必须去理解系统中自己那部分—且没有人的理解跟其他人是完全一样的。
问题3：Bug
产品复杂度飙升，Bug也就不可避免地出现了。这是注定的—就算是伟大的程序员也不是完人。但每个Bug并非生而平等：高度复杂系统里的那些Bug尤其难觅踪迹。总是听到程序员说：“真搞不懂，伙计，系统刚刚崩溃了。”欢迎来到这糟糕的调试世界！
问题4：快速修补
问题并不在于产品是否有Bug—它肯定有，关键在于工程团队在出现Bug之后如何响应。在推出产品的压力之下，大多数程序员经常求助于快速修补。
快速修补是给问题打补丁，而非解决其根本原因。甚至常常不寻找根本原因。

程序员：在试图往网络队列中放入一个任务（job）且队列在10秒内无响应时，程序崩溃了。
经理：重试队列操作100次。

根本原因是什么？天知道，只要重试次数够多，你就可以掩盖任何问题。但如车身修补一样，某一位置的霸道胶水（Bondo）比实际残留的车本身部件还要多。

更难找的问题发生在补丁并没有解决问题根本原因的时候，问题通常根本没有消失—它只是转移到别处。在前面的对话中，重试100次可能很好地掩盖了问题，但万一需要101次重试怎么办？经理只是随便捏了个数字，这种膏药式修补只会让问题更难查。

沿着“快速修补”上行，我们现在得到了一个增加代码规模的完整闭环。

走向清晰
提起复杂的反面，人们通常会想到简单。但由于领域的必然复杂度，我们并不是总能写出简单的代码。应对复杂更好的方法是清晰。你是不是明白自己的代码要做什么？
明确两点会有助于我们减少软件偶然复杂度：清晰思考和清晰表达。

清晰思考
在分析问题的原因时，我们试图做出像“保存时间的方式应该只有一种”这样的清晰陈述。那为何UNIX C代码里还混杂着像time_t、struct timeval和struct timespec这样的结构呢？那并不是太清晰。

如何调和你的清晰陈述和UNIX计时功能的复杂度？你需要隔离复杂度，或将其抽象到单个模块中。在C里，这可能是结构体和操作它的函数；在C++里，它会是一个类。模块化设计让程序的其余部分可以用一种清晰的方式推导时间，而不用了解系统计时功能的内部机制。
一旦能将时间作为程序的一个单独模块进行对待，你也就能证明你的计时机制的正确性。完成这一工作的最佳方式就是单独测试，但是同行评审或书写规格说明也行。当一组逻辑是隔离的而不是内嵌在一大段代码体内时，它的测试和严格证明要容易得多。
清晰表达
随着你清晰地思考模块并将它与其余程序隔离，最终程序也就能更清晰地表达它的用途。处理问题域的代码应该真正专注于问题域。
将辅助代码抽出放入自己的模块之后，剩余逻辑读起来应该越来越像问题域的规格说明（虽然有更多分号）。
让我们看看前后对比。我已经无数次看到过如下这种C++代码：

[cpp] view plaincopy
Time.cpp  
void do_stuff_with_progress1()  
{  
    struct timeval start;  
    struct timeval now;  
    gettimeofday(&start, 0);  
    // 干活，每半秒钟打印一条进度消息  
    while (true) {  
        struct timeval elapsed;  
        gettimeofday(&now, 0);  
        timersub(&now, &start, &elapsed);  
        struct timeval interval;  
        interval.tv_sec = 0;  
        interval.tv_usec = 500 * 1000; // 500ms  
        if (timercmp(&elapsed, &interval, >)) {  
            printf("still working on it...\n");  
            start = now;  
        }  
        // 干活……  
    }  
}  
循环的关键是“干活”部分，但在实际干活之前有20行的POSIX计时代码块。这并没有什么不对，但……就没有一种方法让循环保持对其问题域而不是对计时的关注吗？
让我们把所有时间代码放入它自己的类：

[cpp] view plaincopy
Time.cpp  
class Timer  
{  
public:  
    Timer(const time_t sec, const suseconds_t usec) {  
        _interval.tv_sec = sec;  
        _interval.tv_usec = usec;  
        gettimeofday(&_start, 0);  
    }  
      
    bool triggered() {  
        struct timeval now;  
        struct timeval elapsed;  
        gettimeofday(&now, 0);  
        timersub(&now, &_start, &elapsed);  
        return timercmp(&elapsed, &_interval, >);  
    }  
      
    void reset() {  
        gettimeofday(&_start, 0);  
    }  
  
private:  
    struct timeval _interval;  
    struct timeval _start;  
};  
我们现在可以简化循环了：
[cpp] view plaincopy
Time.cpp  
void do_stuff_with_progress2()  
{  
    Timer progress_timer(0, 500 * 1000); // 500ms  
    // 干活，每半秒钟打印一条进度消息  
    while (true) {  
        if (progress_timer.triggered()) {  
            printf("still working on it...\n");  
            progress_timer.reset();  
        }  
        // 干活……  
    }  
}  
计算机在上述两种情况下做的事情是相同的，但考虑第二个例子对程序可维护性带来的影响：
Timer类的测试和证明可独立于它在程序中的使用方式。
“干活”循环内的计时有了有意义的语义—triggered()和reset()，而不是一堆获取、增加和比较函数。
现在对于计时的终止位置和（捏造的）循环实际起始位置都清晰了。
当工作在巨大丑陋的代码上时，依次考虑：这段代码想表达什么含义？它有没有办法说得更清楚一点？如果它是清晰表达的问题，你需要把那些碍事的代码段抽象出来，同前面展示的Timer类一样。若代码还是有点混乱，那可能是没有清晰思考的产品，需要在设计层面返工。
行动指南
聚焦于可被隔离和严格推导的一个编程方面，如计时。挖掘你正在从事的项目，识别出这样的代码段：若那部分逻辑被抽象到自己的模块，它能否表达得更清晰。

动手尝试更模块化的方法：选一组混乱的代码，分离必然复杂度和偶然复杂度。在这一刻不要操心细节，只看如何可以清晰地表达必要的业务逻辑，假设你有独立模块来处理支撑逻辑。

------------------------------------

本文节选自《程序员修炼之道：专业程序员必知的33个技巧》“技巧4：驯服复杂度”。

书名：《程序员修炼之道：专业程序员必知的33个技巧》

原书名：New Programmer's Survival Manual: Navigate Your Workplace, Cube Farm, or Startup

作者：Josh Carter

译者：胡键

页数：212

定价：49.00元

ISBN：9787111411642

豆瓣收藏：http://book.douban.com/subject/21323647/

PDF下载：http://vdisk.weibo.com/s/paFl8

当当购买：http://product.dangdang.com/main/product.aspx?product_id=23185207
内容简介：

这是每一位致力于成为专业程序员的软件开发新手都应该阅读的一本书。它是资深软件开发专家Josh Carter 20余年编程生涯的心得体会，从程序员成长的视角，系统总结和阐述了专业程序员在专业技能、编程工具、自我管理、团队协作、工作态度以及需要采取的行动等方面应该掌握的33个非常重要且实用的技巧。作者以自己以及身边的同事积累下来的经验、犯过的错误为素材，旨在为新人们引路，让他们在能力修炼的过程中少走弯路！

全书分为四个部分：第一部分（技巧1~14），从编程技能和工具使用两个方面总结了14个技巧，包含如何正确地书写代码、测试驱动设计、管理代码复杂度、改善遗留代码、代码评审、开发环境优化、自动化等；第二部分（技巧15~24），从自我管理和团队协作两个方面总结了10个技巧，包括如何树立自我形象、压力管理、建立良好人脉和高效会议等；第三部分（技巧25~30），介绍了典型高科技公司的组织结构以及你在整个公司中的位置，并且阐述了薪酬分配的问题；第四部分（技巧31~33），介绍了在日常工作中如何持续改善自己的工作和学习状态。

作者简介：

Josh Carter，资深软件设计师，具有超过20年编程行业从业经验。热衷于编程和追逐前沿技术，但同时谨记史蒂夫•乔布斯的箴言“真正的艺术家能让产品面市”。他还涉足工程管理领域，曾经主管大型企业软件开发团队。目前已出版多本关于计算机软件的技术书籍，同时他还在主流计算机杂志的技术专栏发表文章。

分享到： 
上一篇：加微信/转微博，赢华章经典计算机图书
下一篇：程序员度量：改善软件团队的分析学
顶
58
踩
6

查看评论
45楼 dzq_1874 2013-03-25 10:50发表 [回复]

挺好的~
44楼 doon 2013-03-21 17:46发表 [回复]

这种方法只是让问题好一点。所谓的清晰，就是将代码分成不同的层次。把不同详细级别的问题放在不同层次。
这看起来似乎很好，但是，不要忘记，现实世界是复杂的，人的认识却是有限的。 
当新的特性增加时，这个新的特性，轻而易举的打破了你之前精心划分的层次。你不得不重新调整，让这个代码看起来仍旧是层次良好的。

但是，当不同的人加入时，或者修改bug时，别人不能很好的理解你的层次。很快，他们会跨越层次、模块添加代码。

你的代码，渐渐的从一个良好的树形结构，变成了一张杂乱的蜘蛛网，而这个时候，很难再有人愿意再维护它了。
Re: VegetableBird 2013-03-26 13:50发表 [回复]

回复doon：有理，我工作一段时间也明白了，也不会强迫自己做一些没有必要的重构了
Re: lee576 2013-03-23 09:44发表 [回复]

回复doon：说的太现实了,这本书基本就是理想状态
43楼 lovenanforever 2013-03-20 15:50发表 [回复]

我表示我没看完,不过书我可能会去看看
42楼 JHJ1985 2013-03-20 13:17发表 [回复]

说的挺好的 电子书也是免费的
41楼 zaochenhai 2013-03-20 11:08发表 [回复]

如下楼。。。
40楼 绿领巾童鞋 2013-03-18 17:00发表 [回复]

去，广告贴...
39楼 bingbing8219 2013-03-18 13:57发表 [回复]

看看来应该不错啊
38楼 jyqc688 2013-03-18 11:31发表 [回复]

虽然有点广告嫌疑，不过看后，感觉着书不错。去当当买了本。其实这样的文章也不错，就当是推荐读物。
37楼 nowhereman 2013-03-17 21:54发表 [回复]

程序员难当
36楼 三刀流 2013-03-17 21:52发表 [回复]

just learn
35楼 bs897945043 2013-03-17 18:53发表 [回复]

加油吧
34楼 LKC1624781081 2013-03-17 14:54发表 [回复]

程序员。。。。有压力
33楼 skysky01 2013-03-17 13:56发表 [回复]

原来是做广告啊~
32楼 a812872970 2013-03-17 12:59发表 [回复]

就算是广告也是很有水平的广告
31楼 jiangchang17 2013-03-17 10:55发表 [回复]

又是广告
30楼 little299 2013-03-17 10:28发表 [回复]

这个广告做的好
29楼 wupitt 2013-03-16 23:51发表 [回复]

这广告。。。
28楼 asdjy123 2013-03-16 20:42发表 [回复]

好！ding
27楼 lpchouyang 2013-03-16 15:37发表 [回复]

支持下。
26楼 学海有涯 2013-03-15 22:22发表 [回复]

深有体会。
25楼 HUAHUA_1118 2013-03-15 16:47发表 [回复]

不错，贴近
24楼 xuemingwei 2013-03-15 16:33发表 [回复]

很好 ，但这些都是大家所犯 的
23楼 skyly84 2013-03-15 15:46发表 [回复]

广告 ，不过 写的还是蛮好的
22楼 放荡不羁 2013-03-15 14:56发表 [回复]

广告前言
21楼 oyangyufu 2013-03-15 13:47发表 [回复]

这个广告前言说的不错呀。。。
20楼 l13781222845 2013-03-15 13:40发表 [回复]

不错
19楼 wayaoqiang 2013-03-15 08:41发表 [回复]

广告时间
18楼 xiaoxiaotaikongren 2013-03-14 22:26发表 [回复]

挺好
17楼 Tiam509 2013-03-14 17:18发表 [回复]

给力，受教了
16楼 Tiam509 2013-03-14 17:18发表 [回复]

给力，受教了
15楼 ben79802007 2013-03-14 16:35发表 [回复]

c++,java也许弄个类来做也算不错，c呢， 也来整个类么？
14楼 kdchxue 2013-03-14 15:30发表 [回复]

说的很是高深 我才接触 看不明白 也是体会不到的
13楼 分割线忧伤 2013-03-14 13:40发表 [回复]

你们谁看出来打了广告= =
12楼 a532927518 2013-03-14 10:01发表 [回复]

这个真心不错
11楼 lixinnan18 2013-03-14 09:49发表 [回复]

原来是广告贴。。。无语
10楼 publicmailbox2013 2013-03-14 09:27发表 [回复]

我也插条广告，哈哈
http://www.guaji138.com/2013314/392270.htm
9楼 dpcrman 2013-03-13 17:22发表 [回复]

这个广告做的真好，有点银魂的感觉
8楼 a1030227004 2013-03-13 16:15发表 [回复]

我去
7楼 wildwild1 2013-03-13 15:09发表 [回复]

- - 快速翻页就翻到推荐买书的了……
6楼 IT呼叫转移 2013-03-13 13:25发表 [回复]

广告
5楼 helloworldhellobbboy 2013-03-13 12:12发表 [回复]

我还以为教大家怎么看复杂程序呢，原来是不写复杂程序啊，有毛用啊
Re: xuezc007 2013-03-13 16:00发表 [回复]

我还以为教大家怎么看复杂程序呢，原来是不写复杂程序啊，
4楼 a13091895615 2013-03-13 12:06发表 [回复]

嗯
3楼 poet_lj 2013-03-13 10:02发表 [回复]

....
2楼 dai627046659 2013-03-13 09:40发表 [回复]

挺好！
1楼 junaszxaz1 2013-03-13 09:21发表 [回复]

广告无缝接入 好！
您还没有登录,请[登录]或[注册]
* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场

个人资料
  
hzbooks
 

访问：655646次
积分：12335分
排名：第169名
原创：516篇转载：24篇译文：0篇评论：981条
google讨论组

华章计算机书友俱乐部
访问此论坛
文章搜索

文章存档
2013年03月(6)
2013年02月(5)
2012年12月(8)
2012年11月(2)
2012年09月(3)
展开
阅读排行
专业程序员必知必会的技巧：驯服复杂代码(20998)
世界编程语言排行榜08年03月(16731)
世界编程语言排行榜08年02月(16167)
孟岩谈《C++程序设计原理与实践》(14226)
世界编程语言排行榜2008年06月（ActionScript 挺进20强）(13654)
世界编程语言排行榜08年01月(13042)
操作系统之哲学原理连载一(11985)
哥写的不是代码，是寂寞(11700)
C/C++程序员必读的十本书（上）(10388)
产品经理的核心四问(10362)
推荐文章

最新评论
专业程序员必知必会的技巧：驯服复杂代码
VegetableBird: @doon:有理，我工作一段时间也明白了，也不会强迫自己做一些没有必要的重构了
专业程序员必知必会的技巧：驯服复杂代码
dzq_1874: 挺好的~
专业程序员必知必会的技巧：驯服复杂代码
lee576: @doon:说的太现实了,这本书基本就是理想状态
程序员在求职之前需要做些什么？
野生大鱼坊: 好的。
程序员求职：选择大公司还是小公司
占占: 说得有道理，我也是这么感觉的。
专业程序员必知必会的技巧：驯服复杂代码
doon: 这种方法只是让问题好一点。所谓的清晰，就是将代码分成不同的层次。把不同详细级别的问题放在不同层次。这...
程序员度量：改善软件团队的分析学
yellowshine: @yellowshine:算了，自己说吧，有点像西游记里面的三个徒弟。沙僧干累活、琐碎的麻烦事孙猴子...
专业程序员必知必会的技巧：驯服复杂代码
lovenanforever: 我表示我没看完,不过书我可能会去看看
专业程序员必知必会的技巧：驯服复杂代码
JHJ1985: 说的挺好的 电子书也是免费的
专业程序员必知必会的技巧：驯服复杂代码
zaochenhai: 如下楼。。。
评论排行
哥写的不是代码，是寂寞(137)
征集HTML Dog 中文书名 免费获取图书(59)
专业程序员必知必会的技巧：驯服复杂代码(48)
孟岩谈《C++程序设计原理与实践》(42)
世界编程语言排行榜08年02月(25)
偷菜的革命——献给所有忙于偷菜、乐于偷菜和疲于偷菜的您！(25)
即将找工作的同学请看过来！(24)
2007年技术图书出版，我们有多少“第一本”？(23)
社交网站要故意设计得不够完善，你知道这点吗？(20)
世界编程语言排行榜08年01月(18)
华章公司优秀合作伙伴
China-pub互动网
当当网
卓越网
第二书店
蔚蓝网
华储网
活动吧
传媒人网
技术专家博客友情链接
刘未鹏（C++专家）
张逸
陈绍英（测试专家）
哲思自由软件
美女作家邱郁惠（软件工程）
UI专家白鸦
华章陈冀康
陈昊鹏
吴怡老师
公司简介|招贤纳士|广告服务|银行汇款帐号|联系方式|版权声明|法律顾问|问题报告
QQ客服 微博客服 论坛反馈 联系邮箱：webmaster@csdn.net 服务热线：400-600-2320
京 ICP 证 070598 号
北京创新乐知信息技术有限公司 版权所有
世纪乐知(北京)网络技术有限公司 提供技术支持
江苏乐知网络技术有限公司 提供商务支持
Copyright © 1999-2012, CSDN.NET, All Rights Reserved 

