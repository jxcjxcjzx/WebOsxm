点击这里，来体验我们CSDN的新首页吧X

 

您还未登录！|登录|注册|帮助
 首页
 业界
 移动
 云计算
 研发
 论坛
 博客
 下载
 
更多
 









业界
移动开发
云计算
软件研发
专题
程序员杂志
极客头条
.























编程语言
开放平台
HTML5
前端开发
智能算法
架构
开源
数据库
.







.
订阅软件研发RSSCSDN首页>软件研发 




国际C语言混乱代码大赛优胜作品详解之“A clock in one line”


发表于2013-04-11 17:22| 4623次阅读| 来源StackOverflow| 27 条评论| 作者nneonneo
.
IOCCCC.

摘要：IOCCC，即国际混乱C语言代码大赛是一项著名的国际编程赛事迄今已举办22届，比赛的目的在于写出最富创意、最让人难以理解的C语言代码。本文解读了19届IOCCC优胜作品“A clock in one line”的工作原理，望对您有益。 


下面这段代码即为第19届 IOCCC（国际混乱C语言代码大赛）优胜作品：“A clock in one line”。
 






1 



main(_){_^448&&main(-~_);putchar(--_%64?32|-~7[__TIME__-_/8%8][">'txiZ^(~z?"-48]>>";;;====~$::199"[_*2&8|_/64]/(_&2?1:8)%8&1:10);} 



输出结果如下：（当前时间）
 






1

2

3

4

5

6

7 



!!  !!!!!!              !!  !!!!!!              !!  !!!!!! 

!!  !!  !!              !!      !!              !!  !!  !! 

!!  !!  !!              !!      !!              !!  !!  !! 

!!  !!!!!!    !!        !!      !!    !!        !!  !!!!!! 

!!      !!              !!      !!              !!  !!  !! 

!!      !!              !!      !!              !!  !!  !! 

!!  !!!!!!              !!      !!              !!  !!!!!! 



它究竟是如何做到的呢？下面为你解读：
 
首先，将这段代码格式化：






1

2

3

4

5

6 



main(_) {

    _^448 && main(-~_);

    putchar(--_%64

        ? 32 | -~7[__TIME__-_/8%8][">'txiZ^(~z?"-48] >> ";;;====~$::199"[_*2&8|_/64]/(_&2?1:8)%8&1

        : 10);

} 



引入变量：
 






1

2

3

4

5

6

7

8

9

10

11 



main(int i) {

    if(i^448)

        main(-~i);

    if(--i % 64) {

        char a = -~7[__TIME__-i/8%8][">'txiZ^(~z?"-48];

        char b = a >> ";;;====~$::199"[i*2&8|i/64]/(i&2?1:8)%8;

        putchar(32 | (b & 1));

    } else {

        putchar(10); // newline.

    }

} 



根据补码的规则，可得-~i == i+1，所以：






1

2

3

4

5

6

7

8

9

10

11

12 



main(int i) {

    if(i != 448)

        main(i+1);

    i--;

    if(i % 64 == 0) {

        putchar('\n');

    } else {

        char a = -~7[__TIME__-i/8%8][">'txiZ^(~z?"-48];

        char b = a >> ";;;====~$::199"[i*2&8|i/64]/(i&2?1:8)%8;

        putchar(32 | (b & 1));

    }

} 



另外，因为C语言中a[b]等同于b[a]，同时在运用 -~=1+ 规则，可得：






1

2

3

4

5

6

7

8

9

10

11

12 



main(int i) {

    if(i != 448)

        main(i+1);

    i--;

    if(i % 64 == 0) {

        putchar('\n');

    } else {

        char a = (">'txiZ^(~z?"-48)[(__TIME__-i/8%8)[7]] + 1;

        char b = a >> ";;;====~$::199"[(i*2&8)|i/64]/(i&2?1:8)%8;

        putchar(32 | (b & 1));

    }

} 



将递归转换成循环，同时再做简化：






1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18 



// please don't pass any command-line arguments.

main() {

    int i;

    for(i=447; i>=0; i--) {

        if(i % 64 == 0) {

            putchar('\n');

        } else {

            char t = __TIME__[7 - i/8%8];

            char a = ">'txiZ^(~z?"[t - 48] + 1;

            int shift = ";;;====~$::199"[(i*2&8) | (i/64)];

            if((i & 2) == 0)

                shift /= 8;

            shift = shift % 8;

            char b = a >> shift;

            putchar(32 | (b & 1));

        }

    }

} 



这样每次迭代会输出一个字符，每第64个字符会输出新的一行。
 
另外，它还使用数据表来设定输出形式，决定输出的是字符32（即字符空格）还是字符33（即字符 ! ）。第一个表“>'txiZ^(~z?”是一组10位图，描述每个字符的外观；第二个表 “;;;====~$::199”的作用是，从位图中选择合适的位元来展示。
 
第二个表
 
我们先检查一下第二个表，“int shift = ";;;====~$::199"[(i*2&8) | (i/64)];”其中 i/64 是行数（从6到0）；而 i*2&8 当且仅当i为4、5、6、7mod8时为8。
 
“if((i & 2) == 0) shift /= 8; shift = shift % 8”选择表的高8位（i%8=0、1、4、5）或者低8位（i=2、3、6、7）值。因此转换表最终看起来是这个样子：
 






1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29 



row col val

6   6-7  0

6   4-5  0

6   2-3  5

6   0-1  7

5   6-7  1

5   4-5  7

5   2-3  5

5   0-1  7

4   6-7  1

4   4-5  7

4   2-3  5

4   0-1  7

3   6-7  1

3   4-5  6

3   2-3  5

3   0-1  7

2   6-7  2

2   4-5  7

2   2-3  3

2   0-1  7

1   6-7  2

1   4-5  7

1   2-3  3

1   0-1  7

0   6-7  4

0   4-5  4

0   2-3  3

0   0-1  7 



或者显示为表格的形式：
 






1

2

3

4

5

6

7 



00005577

11775577

11775577

11665577

22773377

22773377

44443377 



注意：作者在表格的前两位使用了null terminator。（真狡猾！）
 
第一个表 

__TIME__是预处理器定义的特殊的宏，它能扩展为一个字符串，内容为预处理器运行的时间，格式为“HH:MM:SS”，刚好占8个字符。注意：数字0-9的ASCII值为48-57，“:”的ASCII值为58。而每行输出64个字符，因此 __TIME__ 的每个字符有8个字符的空间。
 
“7 - i/8%8”是当前正在输出的 __TIME__ 的索引（其中“7-”是必须的，因为我们从 i 开始向下遍历）。因此 t 即 __TIME__ 要输出的字符。
 
a的值取决于t，对应关系如下：
 






1

2

3

4

5

6

7

8

9

10

11 



0 00111111

1 00101000

2 01110101

3 01111001

4 01101010

5 01011011

6 01011111

7 00101001

8 01111111

9 01111011

: 01000000 



每个数字都是一个位图，描述7段显示的字符。又因为是7位ASCII，所以高位会被清除，所以7位永远是空格，所以第二个表是这个样子：
 






1

2

3

4

5

6

7 



000055  

11  55  

11  55  

116655  

22  33  

22  33  

444433 



举个例子，4即01101010（1、3、5、6位显示），输出如下：
 







1

2

3

4

5

6

7 



----!!--

!!--!!--

!!--!!--

!!!!!!--

----!!--

----!!--

----!!-- 


--------------------------------------------------------------------------------

理解了吗？现在我们再对输出做一些调整：
 





1

2

3

4

5

6

7 



  00  

11  55

11  55

  66  

22  33

22  33

  44 


可以编码为“?;;?==? '::799\x07”。
 
出于美观考虑，我们把对64位做一些修改（因为输出仅使用低6位，所以不会受到影响），于是就变成了“?{{?}}?gg::799G”（注意：第8位并没有被使用，因此我们还可以做更多的衍生创作）。
 
现在代码就变成了：
 






1 



main(_){_^448&&main(-~_);putchar(--_%64?32|-~7[__TIME__-_/8%8][">'txiZ^(~z?"-48]>>"?{{?}}?gg::799G"[_*2&8|_/64]/(_&2?1:8)%8&1:10);} 



输出结果如下：
 






1

2

3

4

5

6

7 



      !!              !!                              !!   

!!  !!              !!  !!  !!  !!              !!  !!  !! 

!!  !!              !!  !!  !!  !!              !!  !!  !! 

      !!      !!              !!      !!                   

!!  !!  !!          !!  !!      !!              !!  !!  !! 

!!  !!  !!          !!  !!      !!              !!  !!  !! 

      !!              !!                              !! 



如预期的一样，看来我们的想法并没有错。（CSDN 王然/编译）
 
原文出自： StackOverflow 

   .


顶24踩0.



推荐阅读相关主题： 语言newline扩展nullclass


相关文章
最新报道
.

•代码之美——Doom3源代码赏析
•对话Linus Torvalds：大多黑客甚至连指针都未理解
•为什么应该用模块取代C/C++中的头文件？
•第二十一届国际C语言混乱代码大赛结果公布
•C，DennisRitchie的不朽遗产
•2012年8月“我最喜爱的编程语言”排行榜
.






.


已有27条评论


还可以再输入500个字



您还没有登录! 请 登录 或 注册 ..

最新评论
最热评论
.


mysee19898分钟前
佩服。
+1 回复 .





..

新时代38分钟前
复杂
+1 回复 .





..

a8128729704小时前
牛人
+1 回复 .





..

ngy01114小时前
不知道说啥好，作者的思维不能以常理看待
1票，来自ngy0111+1 回复 .





..

零骑士5小时前
刚学完C++，瞬间凌乱了。。。
+1 回复 .





..

liyongjian1596小时前
唉，真是看不懂啊，连结果都看不懂
+1 回复 .





..

aaannnn7小时前
蓦然，回首，面壁
+1 回复 .





..

alhope7小时前
留名一下，前半部分稍微看懂了点
+1 回复 .





..

softworm7小时前
我觉得就是好玩而已,没必要直接扯到商业层面.
从这个文章可以看到国外的技术交流的细致程度和丰富性.
很多个这样或大或小的活动形成一个氛围,相当于一个土壤,很有生机.
+1 回复 .





..

pl23k7小时前
我氪金狗眼直接看瞎了呀
1票，来自kangear+1 回复 .





..

zalemwoo7小时前
good
+1 回复 .





..

szbaud8小时前
人不可读，只能编译器读得懂
+1 回复 .





..

roadtotheexpert9小时前
原来混乱代码是这样解的！
+1 回复 .





..

c_o_o_l_u_l_u9小时前
奴隶的手艺不错，一定是优秀的奴隶
+1 回复 .





..

bisking11小时前
19:17:18想改成LOVE U没改好
+1 回复 .





..

eten11小时前
完全是出于兴趣！
+1 回复 .





..

kc8765432111小时前
看了我马上辞职不干了
+1 回复 .





..

linustd11小时前
这样的"牛人", 只能在别人的企业里打工, 因为这样的本事不能直接转化为金钱.

哥当年也觉得C/C++牛, 可是哥现在明白了, 别羡慕那些搞C/C++/嵌入式/驱动之类的人, 他们的选择很狭窄, 只能去别人的企业打工.

相反, 做那些看起来技术水平不高的技术, 却有可能自己创业
4票，来自kangearafterseptemberhijerryliu+1更多 回复 .






..

sangerendeav11小时前
这家伙~~汇编技术也是很牛掰的~~
+1 回复 .





..

java_sunbao22小时前
不懂。。。。
+1 回复 .





..

SiLeNtLaN23小时前 来自 新浪微博
所以这个东西的意义在哪里？
+1 回复 .





.


quanben14小时前
学术上讲，也许意义在于发掘编程语言不被常人阅读理解的等效写法可能性。通俗地讲，说白了其实就是炫耀参赛获胜者的脑筋和水平。
1票，来自u010242569+1 回复 .





..

diguo20463小时前
技术
+1 回复 .





...

baby7beibei2013-04-11 19:51
路漫漫其修远。。。。。
+1 回复 .





..

blackfish2013-04-11 19:43
http：//m3w.cn
+1 回复 .





..

一骞2013-04-11 18:26 来自 新浪微博
太高级了，完全看不懂
+1 回复 .





..

xinxipan2013-04-11 17:36
真是难以置信
+1 回复 .





..
共1页 首页  上一页 1 下一页  末页





.






..
请您注意 ·自觉遵守：爱国、守法、自律、真实、文明的原则
·尊重网上道德，遵守《全国人大常委会关于维护互联网安全的决定》及中华人民共和国其他各项有关法律法规
·严禁发表危害国家安全，破坏民族团结、国家宗教政策和社会稳定，含侮辱、诽谤、教唆、淫秽等内容的作品
·承担一切因您的行为而直接或间接导致的民事或刑事法律责任
·您在CSDN新闻评论发表的作品，CSDN有权在网站内保留、转载、引用或者删除
·参与本评论即表明您已经阅读并接受上述条款





CSDN官方微信
扫描二维码,向CSDN吐槽
微信号：CSDNnews

程序员杂志for iPad 免费下载 

每日资讯快速浏览 



微博关注




相关热门文章


TIOBE 2013年4月编程语言排行榜：Objective-C四年来排名首次下滑
四人团队、百万用户背后的诀窍与艰辛
软件开发实践的24条军规
外媒：开发者每周编码时间仅19.1小时
Android版百度云推送正式发布
国际C语言混乱代码大赛优胜作品详解之“A clock in one line”
三款热门入门级在线编程教程对比
Python 2.7.4发布，更快的IO模块
揭秘程序员大脑编程的七大“误区”
设计优秀API的五大规则



活动







06-05

2013年CSDN年度技术大会套票（CCCC、SDCC、HBTC、MDCC） 




05-19

2013 共享软件全新海外营销策略与MyCommerce实战工作坊_南京站 




05-17

2013 共享软件全新海外营销策略与MyCommerce实战工作坊_上海站 




05-12

2013 共享软件全新海外营销策略与MyCommerce实战工作坊 _西安站 




05-10

2013 共享软件全新海外营销策略与MyCommerce实战工作坊_北京站 




04-23

开源力量公开课第十五期-Python入门指引 


.

热门专区
win8开发马拉松
2012微软技术大会
数据库构架师专区
IBM AIX学院
异构编程专区
. 
公司简介|招贤纳士|广告服务|银行汇款帐号|联系方式|版权声明|法律顾问|问题报告QQ客服 微博客服 论坛反馈 联系邮箱：webmaster@csdn.net 服务热线：400-600-2320京 ICP 证 070598 号北京创新乐知信息技术有限公司 版权所有世纪乐知(北京)网络技术有限公司 提供技术支持江苏乐知网络技术有限公司 提供商务支持Copyright © 1999-2012, CSDN.NET, All Rights Reserved  
