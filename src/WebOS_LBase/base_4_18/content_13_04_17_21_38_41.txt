

首页
开源软件
讨论区






代码分享
博客
翻译
资讯
移动开发




招聘

你好2,您好 我的空间







 |  添加软件 | 投递新闻 | 退出
 

开源中国 
代码分享
 当前位置：代码分享 » C/C++ » Qt 图形界面开发 
搜 索 









linux下的图形化串口调试工具

飞扬青云 发布于 2013年03月16日 15时, 6评/384阅


 


分享到 

新浪微博腾讯微博


收藏+8

踩顶0
 

在linux的图形化串口调试工具少之又少，特意开发了这个，可以与开发板连接调试。

标签：<无> 




代码片段(5)


[代码] [C/C++]代码










001

#include "frmmain.h"





002

#include "ui_frmmain.h"





003

#include "myStaticClass.h"





004

 





005

frmMain::frmMain(QWidget *parent) :





006

        QWidget(parent),





007

        ui(new Ui::frmMain)





008

{





009

    ui->setupUi(this);





010

 





011

    FormHelper::FormInCenter(this);





012

    FormHelper::FormNotResize(this);    





013

 





014

    this->setWindowIcon(QIcon(":/2.ico"));





015

    this->setWindowTitle(tr("串口调试工具Windows版V1.2(QQ:517216493)"));





016

 





017

    this->InitForm();





018

    //安装监听器





019

    ui->txtSend->installEventFilter(this);





020

}





021

 





022

frmMain::~frmMain()





023

{





024

    delete ui;





025

}





026

 





027

//监听鼠标双击则清空接收数据





028

void frmMain::mouseDoubleClickEvent(QMouseEvent *e)





029

{





030

    if (e->button()==Qt::LeftButton)





031

    {





032

        ui->txtDataHex->clear();





033

    }





034

}





035

 





036

 





037

//监听回车键





038

bool frmMain::eventFilter(QObject *obj, QEvent *event)





039

{





040

    if (obj==ui->txtSend)





041

    {





042

        if (event->type()==QEvent::KeyPress)





043

        {





044

            QKeyEvent *keyEvent=static_cast<QKeyEvent *>(event);





045

            if (keyEvent->key()==Qt::Key_Return || keyEvent->key()==Qt::Key_Enter)





046

            {





047

                this->WriteMyCom();





048

                return true;





049

            }





050

        }





051

    }





052

 





053

    return QObject::eventFilter(obj,event);





054

}





055

 





056

void frmMain::InitForm()





057

{





058

    ReceiveCount=0;





059

    SendCount=0;





060

    this->IsShow=true;





061

    this->IsAutoClear=false;





062

    this->IsAutoSave=false;





063

    this->IsAutoSend=false;





064

    this->IsInit=false;





065

 





066

    QStringList comList;//串口号





067

    QStringList baudList;//波特率





068

    QStringList parityList;//校验位





069

    QStringList dataBitsList;//数据位





070

    QStringList stopBitsList;//停止位





071

 





072

    comList.clear();





073

    comList<<"COM1"<<"COM2"<<"COM3"<<"COM4"<<"COM5"<<"COM6"





074

            <<"COM7"<<"COM8"<<"COM9"<<"COM10"<<"COM11"<<"COM12"





075

            <<"COM13"<<"COM14"<<"COM15"<<"COM16"<<"COM17"<<"COM18"





076

            <<"COM19"<<"COM20"<<"COM21"<<"COM22"<<"COM23"<<"COM24"





077

            <<"COM25"<<"COM26"<<"COM27"<<"COM28"<<"COM28"<<"COM29"<<"COM30";





078

    ui->cboxPortName->clear();





079

    ui->cboxPortName->addItems(comList);





080

    ui->cboxPortName->setCurrentIndex(0);





081

 





082

    baudList.clear();





083

    baudList<<"50"<<"75"<<"100"<<"134"<<"150"<<"200"<<"300"





084

            <<"600"<<"1200"<<"1800"<<"2400"<<"4800"<<"9600"





085

            <<"14400"<<"19200"<<"38400"<<"56000"<<"57600"





086

            <<"76800"<<"115200"<<"128000"<<"256000";





087

    ui->cboxBaudRate->clear();





088

    ui->cboxBaudRate->addItems(baudList);





089

    ui->cboxBaudRate->setCurrentIndex(12);





090

 





091

    parityList.clear();





092

    parityList<<"无"<<"奇"<<"偶"<<"标志"<<"空格";





093

    ui->cboxParity->clear();





094

    ui->cboxParity->addItems(parityList);





095

    ui->cboxParity->setCurrentIndex(0);





096

 





097

    dataBitsList.clear();





098

    dataBitsList<<"5"<<"6"<<"7"<<"8";





099

    ui->cboxDataBit->clear();





100

    ui->cboxDataBit->addItems(dataBitsList);





101

    ui->cboxDataBit->setCurrentIndex(3);





102

 





103

    stopBitsList.clear();





104

    stopBitsList<<"1"<<"1.5"<<"2";





105

    ui->cboxStopBit->clear();





106

    ui->cboxStopBit->addItems(stopBitsList);





107

    ui->cboxStopBit->setCurrentIndex(0);





108

 





109

    ui->cboxSend->clear();





110

    ui->cboxSave->clear();





111

    for (int i=1;i<61;i++)





112

    {





113

        ui->cboxSend->addItem(QString::number(i)+"秒");





114

        ui->cboxSave->addItem(QString::number(i)+"秒");





115

    }





116

 





117

    ui->cboxSave->setCurrentIndex(4);





118

    ui->cboxSend->setCurrentIndex(4);





119

 





120

    ui->cboxSend->setEnabled(false);





121

    ui->cboxSave->setEnabled(false);    





122

 





123

    //读取数据





124

    myReadTimer=new QTimer(this);





125

    myReadTimer->setInterval(200);





126

    connect(myReadTimer,SIGNAL(timeout()),this,SLOT(ReadMyCom()));





127

 





128

    //发送数据





129

    mySendTimer=new QTimer(this);





130

    mySendTimer->setInterval(5000);





131

    connect(mySendTimer,SIGNAL(timeout()),this,SLOT(SendData()));    





132

 





133

    //保存数据





134

    mySaveTimer=new QTimer(this);





135

    mySaveTimer->setInterval(5000);





136

    connect(mySaveTimer,SIGNAL(timeout()),this,SLOT(SaveData()));





137

 





138

    //显示日期时间





139

    myTimer=new QTimer(this);





140

    myTimer->start(1000);





141

    connect(myTimer,SIGNAL(timeout()),this,SLOT(GetDateTime()));





142

 





143

    this->ChangeEnable(false);





144

    this->ReadTxtData();





145

 





146

}





147

 





148

void frmMain::ChangeEnable(bool b)





149

{





150

    ui->cboxBaudRate->setEnabled(!b);





151

    ui->cboxDataBit->setEnabled(!b);





152

    ui->cboxParity->setEnabled(!b);





153

    ui->cboxPortName->setEnabled(!b);





154

    ui->cboxStopBit->setEnabled(!b);





155

 





156

    ui->gbox2->setEnabled(b);





157

    ui->gbox3->setEnabled(b);    





158

    ui->gbox5->setEnabled(b);





159

    ui->gbox6->setEnabled(b);





160

    ui->btnOpen->setEnabled(true);





161

 





162

    if (b)





163

    {





164

        this->myReadTimer->start();





165

        this->mySaveTimer->start();





166

        this->mySendTimer->start();





167

    }





168

    else





169

    {





170

        this->myReadTimer->stop();





171

        this->mySaveTimer->stop();





172

        this->mySendTimer->stop();





173

    }





174

}





175

 





176

void frmMain::GetDateTime()





177

{





178

    QTime timeNow=QTime::currentTime();





179

    ui->labTime->setText(tr("时间:%1").arg(timeNow.toString()));





180

    ui->labDate->setText(tr("日期:%1").arg(QDate::currentDate().toString(tr("yyyy年MM月dd日 dddd"))));





181

}





182

 





183

QByteArray frmMain::GetHexValue(QString str)





184

{





185

    QByteArray senddata;





186

    int hexdata,lowhexdata;





187

    int hexdatalen = 0;





188

    int len = str.length();





189

    senddata.resize(len/2);





190

    char lstr,hstr;





191

    for(int i=0; i<len; )





192

    {





193

        hstr=str[i].toAscii();





194

        if(hstr == ' ')





195

        {





196

            i++;





197

            continue;





198

        }





199

        i++;





200

        if(i >= len)





201

            break;





202

        lstr = str[i].toAscii();





203

        hexdata = ConvertHexChar(hstr);





204

        lowhexdata = ConvertHexChar(lstr);





205

        if((hexdata == 16) || (lowhexdata == 16))





206

            break;





207

        else





208

            hexdata = hexdata*16+lowhexdata;





209

        i++;





210

        senddata[hexdatalen] = (char)hexdata;





211

        hexdatalen++;





212

    }





213

    senddata.resize(hexdatalen);





214

    return senddata;





215

}





216

 





217

char frmMain::ConvertHexChar(char ch)





218

{





219

    if((ch >= '0') && (ch <= '9'))





220

        return ch-0x30;





221

    else if((ch >= 'A') && (ch <= 'F'))





222

        return ch-'A'+10;





223

    else if((ch >= 'a') && (ch <= 'f'))





224

        return ch-'a'+10;





225

    else return (-1);





226

}





227

 





228

void frmMain::ReadMyCom()





229

{





230

    MyHelper::DelayTime(100);//延时100毫秒





231

 





232

    QString strHex;//16进制数据    





233

    QString strNomal;//正常数据





234

    QByteArray temp=myCom->readAll();





235

 





236

    if (!temp.isEmpty() && IsShow)





237

    {





238

        QDataStream out(&temp,QIODevice::ReadWrite);





239

        while (!out.atEnd())





240

        {





241

            qint8 outChar=0;





242

            out>>outChar;





243

            QString str=QString("%1").arg(outChar&0xFF,2,16,QLatin1Char('0'));





244

 





245

            if (str.length()>1)





246

            {





247

                strHex+=str+" ";





248

            }





249

            else





250

            {





251

                strHex+="0"+str+" ";





252

            }            





253

        }





254

 





255

        strNomal=temp;





256

 





257

        if (ui->ckHexReceive->isChecked())





258

        {





259

            ui->txtDataHex->append(strHex.toUpper());





260

        }





261

        else





262

        {





263

            ui->txtDataHex->append(strNomal);





264

        }





265

 





266

        ReceiveCount=ReceiveCount+temp.size();





267

        ui->labReceive->setText(tr("接收:%1 字节").arg(ReceiveCount));





268

    }





269

}





270

 





271

void frmMain::WriteMyCom()





272

{





273

    QString str=ui->txtSend->currentText();





274

    QByteArray outData=str.toAscii();





275

 





276

    int size=outData.size();





277

 





278

    //如果串口没有打开





279

    if (!myCom->isOpen())





280

    {





281

        return;





282

    }





283

    //如果发送数据为空





284

    if (outData.isEmpty())





285

    {





286

        ui->txtSend->setFocus();





287

        return;





288

    }





289

 





290

    //QT中的回车只有一个字符\n,而windows下需要解释为\r\n





291

 





292

    if (outData[size-1]!='\n')





293

    {





294

        outData.resize(size+1);





295

        outData[size]='\r';





296

        outData[size+1]='\n';





297

    }





298

 





299

    //默认16进制发送的数据没有加入回车符





300

    if (ui->ckHexSend->isChecked())//转化为16进制发送





301

    {





302

        outData=this->GetHexValue(str);





303

        size=outData.size();





304

        myCom->write(outData);





305

    }





306

    else





307

    {





308

        size=outData.size();





309

        myCom->write(outData);





310

    }





311

 





312

    SendCount=SendCount+size;





313

    ui->labSend->setText(tr("发送:%1 字节").arg(SendCount));





314

 





315

    if (this->IsAutoClear)





316

    {





317

        ui->txtSend->setCurrentIndex(-1);





318

        ui->txtSend->setFocus();





319

    }





320

}





321

 





322

void frmMain::SendData()





323

{





324

    if (this->IsAutoSend)





325

    {





326

        this->WriteMyCom();





327

    }





328

}





329

 





330

void frmMain::SaveMyCom()





331

{





332

    QDateTime now=QDateTime::currentDateTime();





333

    QString name=now.toString("yyyyMMddHHmmss");





334

    QString fileName=QCoreApplication::applicationDirPath()+"/"+name+".txt";





335

    //如果没有内容则不保存





336

    if (ui->txtDataHex->document()->toPlainText().length()==0)





337

    {





338

        return;





339

    }





340

    QFile file(fileName);





341

    file.open(QFile::WriteOnly | QIODevice::Text);





342

    QTextStream out(&file);





343

    out<<ui->txtDataHex->document()->toPlainText();





344

    file.close();





345

}





346

 





347

void frmMain::SaveData()





348

{





349

    if (this->IsAutoSave)





350

    {





351

        this->SaveMyCom();





352

    }





353

}





354

 





355

void frmMain::on_btnOpen_clicked()





356

{





357

    if (ui->btnOpen->text()=="打开串口")





358

    {





359

        QString portName=ui->cboxPortName->currentText();





360

        QString myPortName;





361

 





362

        if (ui->cboxPortName->currentIndex()>8)//COM9以上的串口要重新处理





363

        {





364

            myPortName.append("\\\\.\\");





365

            myPortName.append(portName);





366

        }





367

        else





368

        {





369

            myPortName=portName;





370

        }





371

 





372

        myCom = new Win_QextSerialPort(myPortName, QextSerialBase::Polling);





373

 





374

        if (myCom->open(QIODevice::ReadWrite))





375

        {





376

            myCom->flush();





377

            myCom->setBaudRate((BaudRateType)ui->cboxBaudRate->currentIndex());





378

            myCom->setDataBits((DataBitsType)ui->cboxDataBit->currentIndex());





379

            myCom->setParity((ParityType)ui->cboxParity->currentIndex());





380

            myCom->setStopBits((StopBitsType)ui->cboxStopBit->currentIndex());





381

            myCom->setFlowControl(FLOW_OFF);





382

            myCom->setTimeout(10);





383

 





384

            this->ChangeEnable(true);





385

            ui->btnOpen->setText("关闭串口");





386

            ui->labIsOpen->setText(tr("串口状态：打开"));





387

            MyMessageBox::ChMessageOnlyOk_Information(tr("串口打开成功！(*^__^*) "));





388

        }





389

        else





390

        {





391

            MyMessageBox::ChMessageOnlyOk_Error(tr("串口打开失败！( ⊙ o ⊙ )"));





392

            return;





393

        }





394

    }





395

    else





396

    {





397

        this->ChangeEnable(false);





398

        ui->btnOpen->setText("打开串口");





399

        ui->labIsOpen->setText(tr("串口状态：关闭"));





400

        myCom->close();





401

    }





402

}





403

 





404

void frmMain::on_ckIsAutoSend_stateChanged(int )





405

{





406

    this->IsAutoSend=ui->ckIsAutoSend->isChecked();





407

    ui->cboxSend->setEnabled(this->IsAutoSend);





408

}





409

 





410

void frmMain::on_ckIsAutoSave_stateChanged(int )





411

{





412

    this->IsAutoSave=ui->ckIsAutoSave->isChecked();





413

    ui->cboxSave->setEnabled(this->IsAutoSave);





414

}





415

 





416

void frmMain::on_ckIsAutoClear_stateChanged(int )





417

{





418

    this->IsAutoClear=ui->ckIsAutoClear->isChecked();





419

}





420

 





421

void frmMain::on_btnClearSend_clicked()





422

{





423

    SendCount=0;





424

    ui->labSend->setText(tr("发送:0 字节"));





425

}





426

 





427

void frmMain::on_btnClearReceive_clicked()





428

{





429

    ReceiveCount=0;





430

    ui->labReceive->setText(tr("接收:0 字节"));





431

}





432

 





433

void frmMain::on_btnStopShow_clicked()





434

{





435

    if (ui->btnStopShow->text()=="停止显示")





436

    {





437

        IsShow=false;





438

        ui->btnStopShow->setText("开始显示");





439

    }





440

    else





441

    {





442

        IsShow=true;





443

        ui->btnStopShow->setText("停止显示");





444

    }





445

}





446

 





447

void frmMain::on_btnClearAll_clicked()





448

{    





449

    ui->txtDataHex->document()->clear();





450

}





451

 





452

void frmMain::on_btnSave_clicked()





453

{





454

    this->SaveMyCom();





455

}





456

 





457

void frmMain::on_btnSend_clicked()





458

{





459

    this->WriteMyCom();





460

}





461

 





462

void frmMain::ReadTxtData()





463

{





464

    ui->txtSend->clear();





465

    QString fileName=QCoreApplication::applicationDirPath()+"/data.txt";





466

 





467

    QFile file(fileName);





468

    file.open(QFile::ReadOnly | QIODevice::Text);





469

    QTextStream in(&file);





470

    QString line;





471

 





472

    do





473

    {





474

        line=in.readLine();





475

 





476

        if (line!="")





477

        {





478

            ui->txtSend->addItem(line);





479

        }





480

    }





481

    while(!line.isNull());





482

 





483

    file.close();





484

}





485

 





486

void frmMain::on_btnData_clicked()





487

{





488

    QString fileName=QCoreApplication::applicationDirPath()+"/data.txt";





489

 





490

    QFile file(fileName);





491

 





492

    if (!file.exists())





493

    {





494

        MyMessageBox::ChMessageOnlyOk_Error(tr("数据文件不存在！"));





495

        return;





496

    }





497

 





498

    if (ui->btnData->text()==tr("管理数据"))





499

    {





500

        ui->txtDataHex->setReadOnly(false);





501

        ui->gbox2->setTitle(tr("管理数据"));





502

        ui->txtDataHex->clear();





503

 





504

        file.open(QFile::ReadOnly | QIODevice::Text);





505

        QTextStream in(&file);





506

        ui->txtDataHex->setText(in.readAll());





507

        file.close();





508

 





509

        ui->btnData->setText(tr("保存数据"));





510

    }





511

    else





512

    {





513

        ui->txtDataHex->setReadOnly(true);





514

        ui->gbox2->setTitle(tr("接收数据"));





515

 





516

        file.open(QFile::WriteOnly | QIODevice::Text);





517

        QTextStream out(&file);





518

        out<<ui->txtDataHex->document()->toPlainText();





519

        file.close();





520

 





521

        ui->txtDataHex->clear();





522

        ui->btnData->setText(tr("管理数据"));





523

 





524

        this->ReadTxtData();





525

    }





526

}





527

 





528

void frmMain::on_cboxSend_currentIndexChanged(int index)





529

{





530

    if (this->IsInit)





531

    {





532

        mySendTimer->setInterval((index+1)*1000);





533

    }





534

}





535

 





536

void frmMain::on_cboxSave_currentIndexChanged(int index)





537

{





538

    if (this->IsInit)





539

    {





540

        mySaveTimer->setInterval((index+1)*1000);





541

    }





542

}



[文件] myLinuxSerialportTools.zip ~ 28KB    下载(52)


[文件] myWindowsSerialportTools.zip ~ 87KB    下载(35)


[图片] linux.png




[图片] windows.png




举报



开源中国-程序员在线工具：API文档大全(120+) JS在线编辑演示 二维码更多»

 


相关的代码(83)
1回/353阅[C/C++]GUI电子表格3天前 By Bephax*
0回/206阅[C/C++]硬盘文件备份工具2.03天前 By pingdan32
0回/112阅[C/C++]将一个源目录下的所有文件备份到目的目录下，只备份目标目录中不存在的文件。6天前 By pingdan32
0回/82阅[C/C++]正则表达式简易测试8天前 By 稀饭桶子
1回/674阅[C/C++]Qt显示网络图片23天前 By 无脸程序员
1回/740阅[C/C++]贪吃蛇游戏1个月前 By cool609
0回/674阅[C/C++]QT获取网页内容1个月前 By solookin
10回/2011阅[C/C++]蛇年中小企业用抽奖程序2个月前 By 龍禳
3回/749阅[C/C++]做了一个qt版的计算器，并能在ARM6410上运行！3个月前 By 蒯翔
显示所有 »

发表评论回到顶部网友评论(6)







 1楼：txgcwm 发表于 2013-03-16 17:16 回复此评论

支持一下。

 







2楼：xstruggle 发表于 2013-03-16 21:44 回复此评论

怎么组建工程

 







3楼：飞扬青云 发表于 2013-03-18 10:33 回复此评论



引用来自“xstruggle”的评论

怎么组建工程
默认用QT4.7开发的，找到里面的pro文件打开即可
 







4楼：xstruggle 发表于 2013-03-21 14:20 回复此评论

明白，谢啦

 







5楼：bright_qin 发表于 2013-04-01 12:26 回复此评论

好东西 正需要 啊                              

 







6楼：libing64 发表于 2013-04-05 08:58 回复此评论

做得非常出色，建议能够查询device或者允许由用户指定device～

 























回到顶部   回到评论列表

开源从代码分享开始 分享代码



飞扬青云的其他代码linux下的图形化串口调试工具(6评/384阅,1个月前)
幼儿园晨检系统(8评/728阅,1个月前)
短信猫调试工具(2评/575阅,1个月前)
Wince串口调试工具(0评/310阅,1个月前)
全部(4)...
 





















© 开源中国(OsChina.NET) | 关于我们 | 广告联系 | @新浪微博 | 开源中国手机版 | 粤ICP备12009483号-3
 
开源中国手机客户端：AndroidiPhoneWP7 




















2条新留言，查看留言»




