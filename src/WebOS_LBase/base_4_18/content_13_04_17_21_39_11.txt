

首页
开源软件
讨论区






代码分享
博客
翻译
资讯
移动开发




招聘

你好2,您好 我的空间







 |  添加软件 | 投递新闻 | 退出
 

开源中国 
代码分享
 当前位置：代码分享 » C/C++ » 常规C/C++编程 » 桌面应用界面/GUI 
搜 索 









Qt中 QDockWidget的自定义标题栏 以及 tab页的位置

simananzhui 发布于 2013年04月11日 15时, 0评/74阅


 


分享到 

新浪微博腾讯微博


收藏+2

踩顶0
 

Qt菜鸟，想用Qt实现一些自己写的小功能，当用到QDockWidget时候，想实现一个自定义的标题栏，上网上狂搜啊，结果都是“大神”说的一些类似"自己画一个就好了"的方式，对于我这样的小白来说，真是要多难有多难，结果根据Qt自带的例子中的一个样例，琢磨着弄出来一个大致的功能，提供思路供跟我一样的小白们参考，目前仅仅是实现了样式上的功能，在各种考虑上都还欠缺（例如标题栏的双击功能就没有实现）。

标签：<无> 




代码片段(8)


[代码] myDockTitleBar.h










01

#ifndef MYDOCKTITLEBAR_H





02

#define MYDOCKTITLEBAR_H





03

 





04

#include <QSize>





05

#include <QDockWidget>





06

#include <QMouseEvent>





07

#include <QWidget>





08

#include <QPainter>





09

#include <QPaintEvent>





10

#include "qdebug.h"





11

#include <QStyle>





12

 





13

class MyDockTitleBar : public QWidget





14

{





15

    Q_OBJECT





16

public:





17

    MyDockTitleBar(QWidget *parent = 0);





18

 





19

    QSize sizeHint() const { return minimumSizeHint(); }





20

    QSize minimumSizeHint() const;





21

 





22

protected:





23

    void paintEvent(QPaintEvent *event);





24

    void mousePressEvent(QMouseEvent *event);





25

 





26

public slots:





27

    void updateMask();





28

 





29

private:





30

    QPixmap minPix, closePix, floatPix;





31

 





32

};





33

 





34

 





35

#endif // MYDOCKTITLEBAR_H



[代码] myDockTitleBar.cpp










001

#include "myDockTitleBar.h"





002

 





003

MyDockTitleBar::MyDockTitleBar(QWidget *parent)





004

    : QWidget(parent)





005

{





006

    minPix = style()->standardPixmap(QStyle::SP_TitleBarMinButton);





007

    closePix  = style()->standardPixmap(QStyle::SP_TitleBarCloseButton);





008

    floatPix = style()->standardPixmap(QStyle::SP_TitleBarNormalButton);





009

}





010

 





011

QSize MyDockTitleBar::minimumSizeHint() const





012

{





013

    QDockWidget *dw = qobject_cast<QDockWidget*>(parentWidget());





014

    Q_ASSERT(dw != 0);





015

    QSize result(200, 35);





016

    if (dw->features() & QDockWidget::DockWidgetVerticalTitleBar)





017

        result.transpose();





018

    return result;





019

}





020

 





021

void MyDockTitleBar::paintEvent(QPaintEvent*)





022

{





023

    QPainter painter(this);





024

    QRect rect = this->rect();





025

 





026

    QDockWidget *dw = qobject_cast<QDockWidget*>(parentWidget());





027

    Q_ASSERT(dw != 0);





028

 





029

    if (dw->features() & QDockWidget::DockWidgetVerticalTitleBar) {





030

        QSize s = rect.size();





031

        s.transpose();





032

        rect.setSize(s);





033

 





034

        painter.translate(rect.left(), rect.top() + rect.width());





035

        painter.rotate(-90);





036

        painter.translate(-rect.left(), -rect.top());





037

    }





038

 





039

    painter.fillRect(rect.left(), rect.top(), rect.width(), rect.height(), QColor(tr("white")));





040

    painter.drawPixmap(rect.topRight() - QPoint(closePix.width() + 10, -10), closePix);





041

    painter.drawPixmap(rect.topRight() - QPoint(minPix.width() + 10 + closePix.width() + 10, -7), minPix);





042

    painter.drawPixmap(rect.topRight() - QPoint(floatPix.width() + 10 + minPix.width() + 10





043

                                                + closePix.width() + 10, -10), floatPix);





044

}





045

 





046

void MyDockTitleBar::mousePressEvent(QMouseEvent *event)





047

{





048

    QPoint pos = event->pos();





049

 





050

    QRect rect = this->rect();





051

 





052

    QDockWidget *dw = qobject_cast<QDockWidget*>(parentWidget());





053

    Q_ASSERT(dw != 0);





054

 





055

    if (dw->features() & QDockWidget::DockWidgetVerticalTitleBar) {





056

        QPoint p = pos;





057

        pos.setX(rect.left() + rect.bottom() - p.y());





058

        pos.setY(rect.top() + p.x() - rect.left());





059

 





060

        QSize s = rect.size();





061

        s.transpose();





062

        rect.setSize(s);





063

    }





064

 





065

    const int buttonRight = 10;





066

    const int buttonWidth = 20;





067

    int right = rect.right() - pos.x();





068

    int button = (right - buttonRight)/buttonWidth;





069

 





070

    qDebug() << rect.right() << " --- " << pos.x() << " --- " << right << " --- " << button;





071

 





072

    switch (button) {





073

    case 0:





074

        event->accept();





075

        dw->close();





076

        break;





077

    case 1:





078

        event->accept();





079

        dw->setFloating(!dw->isFloating());





080

        break;





081

    case 2: {





082

        event->accept();





083

        QDockWidget::DockWidgetFeatures features = dw->features();





084

        if (features & QDockWidget::DockWidgetVerticalTitleBar)





085

            features &= ~QDockWidget::DockWidgetVerticalTitleBar;





086

        else





087

            features |= QDockWidget::DockWidgetVerticalTitleBar;





088

        dw->setFeatures(features);





089

        break;





090

    }





091

    default:





092

        event->ignore();





093

        break;





094

    }





095

}





096

 





097

void MyDockTitleBar::updateMask()





098

{





099

    //    QDockWidget *dw = qobject_cast<QDockWidget*>(parent());





100

    //    Q_ASSERT(dw != 0);





101

 





102

    //    QRect rect = dw->rect();





103

    //    QPixmap bitmap(dw->size());





104

 





105

    //    {





106

    //        QPainter painter(&bitmap);





107

 





108

    //        ///initialize to transparent





109

    //        painter.fillRect(rect, Qt::color0);





110

 





111

    //        QRect contents = rect;





112

    //        contents.setTopLeft(geometry().bottomLeft());





113

    //        contents.setRight(geometry().right());





114

    //        contents.setBottom(contents.bottom()-y());





115

    //        painter.fillRect(contents, Qt::color1);





116

 





117

 





118

 





119

    //        //let's pait the titlebar





120

 





121

    //        QRect titleRect = this->geometry();





122

 





123

    //        if (dw->features() & QDockWidget::DockWidgetVerticalTitleBar) {





124

    //            QSize s = rect.size();





125

    //            s.transpose();





126

    //            rect.setSize(s);





127

 





128

    //            QSize s2 = size();





129

    //            s2.transpose();





130

    //            titleRect.setSize(s2);





131

 





132

    //            painter.translate(rect.left(), rect.top() + rect.width());





133

    //            painter.rotate(-90);





134

    //            painter.translate(-rect.left(), -rect.top());





135

    //        }





136

 





137

    //        contents.setTopLeft(titleRect.bottomLeft());





138

    //        contents.setRight(titleRect.right());





139

    //        contents.setBottom(rect.bottom()-y());





140

 





141

    //        QRect rect = titleRect;





142

 





143

 





144

    //        painter.drawPixmap(rect.topLeft(), leftPm.mask());





145

    //        painter.fillRect(rect.left() + leftPm.width(), rect.top(),





146

    //                         rect.width() - leftPm.width() - rightPm.width(),





147

    //                         centerPm.height(), Qt::color1);





148

    //        painter.drawPixmap(rect.topRight() - QPoint(rightPm.width() - 1, 0), rightPm.mask());





149

 





150

    //        painter.fillRect(contents, Qt::color1);





151

    //    }





152

 





153

    //    dw->setMask(bitmap);





154

}



[代码] mainwindow.h










01

#ifndef MAINWINDOW_H





02

#define MAINWINDOW_H





03

 





04

#include <QMainWindow>





05

#include <QWidget>





06

 





07

namespace Ui {





08

class MainWindow;





09

}





10

 





11

class MainWindow : public QMainWindow





12

{





13

    Q_OBJECT





14

     





15

public:





16

    explicit MainWindow(QWidget *parent = 0);





17

    ~MainWindow();





18

     





19

private:





20

    Ui::MainWindow *ui;





21

};





22

 





23

#endif // MAINWINDOW_H



[代码] mainwindow.cpp










01

#include "mainwindow.h"





02

#include "ui_mainwindow.h"





03

#include "myDockTitleBar.h"





04

 





05

#include <QDockWidget>





06

#include <QToolButton>





07

#include <QPushButton>





08

#include <QVBoxLayout>





09

#include <QMdiSubWindow>





10

#include <QFrame>





11

#include <QDebug>





12

 





13

#include <QPainter>





14

#include <QMouseEvent>





15

#include <QBitmap>





16

 





17

MainWindow::MainWindow(QWidget *parent) :





18

    QMainWindow(parent),





19

    ui(new Ui::MainWindow)





20

{





21

    ui->setupUi(this);





22

 





23

    QDockWidget *testDock = new QDockWidget(tr("Test Dock"));





24

    testDock->setFeatures(QDockWidget::DockWidgetClosable | QDockWidget::DockWidgetFloatable





25

                          | QDockWidget::DockWidgetMovable);





26

    testDock->setMinimumWidth(200);





27

    testDock->setStyleSheet(tr("background-color:green;"));





28

 





29

    MyDockTitleBar *titlebar1 = new MyDockTitleBar(testDock);





30

    testDock->setTitleBarWidget(titlebar1);





31

 





32

    QWidget *testWidget = new QWidget;





33

    QVBoxLayout *box = new QVBoxLayout;





34

 





35

    QPushButton *okButton = new QPushButton(tr("Ok"));





36

    okButton->setStyleSheet(tr("background-color:white;"));





37

    box->addWidget(okButton);





38

    testWidget->setLayout(box);





39

 





40

    testDock->setWidget(testWidget);





41

 





42

    //////////////////////////////////////////////////////////





43

 





44

    QDockWidget *testDock2 = new QDockWidget(tr("Test Dock2"));





45

    testDock2->setFeatures(QDockWidget::DockWidgetClosable | QDockWidget::DockWidgetFloatable





46

                           | QDockWidget::DockWidgetMovable);





47

    testDock2->setMinimumWidth(200);





48

    testDock2->setStyleSheet(tr("background-color:orange;"));





49

 





50

    MyDockTitleBar *titlebar2 = new MyDockTitleBar(testDock2);





51

    testDock2->setTitleBarWidget(titlebar2);





52

 





53

    QWidget *testWidget2 = new QWidget;





54

    QVBoxLayout *box2 = new QVBoxLayout;





55

 





56

    QPushButton *okButton2 = new QPushButton(tr("Ok"));





57

    okButton2->setStyleSheet(tr("background-color:white;"));





58

    box2->addWidget(okButton2);





59

    testWidget2->setLayout(box2);





60

 





61

    testDock2->setWidget(testWidget2);





62

 





63

    //////////////////////////////////////////////////////////





64

 





65

    this->addDockWidget(Qt::LeftDockWidgetArea, testDock);





66

 





67

    this->setTabPosition(Qt::LeftDockWidgetArea, QTabWidget::West);





68

    this->tabifyDockWidget(testDock, testDock2);





69

}





70

 





71

MainWindow::~MainWindow()





72

{





73

    delete ui;





74

}



[代码] main.cpp










01

#include "mainwindow.h"





02

#include <QApplication>





03

 





04

 





05

int main(int argc, char *argv[])





06

{





07

    QApplication a(argc, argv);





08

    MainWindow w;





09

    w.show();





10

     





11

    return a.exec();





12

}



[代码] testDock.pro










01

#-------------------------------------------------





02

#





03

# Project created by QtCreator 2013-04-08T12:59:04





04

#





05

#-------------------------------------------------





06

 





07

QT       += core gui





08

 





09

greaterThan(QT_MAJOR_VERSION, 4): QT += widgets





10

 





11

TARGET = testDock





12

TEMPLATE = app





13

 





14

 





15

SOURCES += main.cpp\





16

        mainwindow.cpp \





17

    myDockTitleBar.cpp





18

 





19

HEADERS  += mainwindow.h \





20

    myDockTitleBar.h





21

 





22

FORMS    += \





23

    mainwindow.ui



[代码] mainwindow.ui










01

<?xml version="1.0" encoding="UTF-8"?>





02

<ui version="4.0">





03

 <class>MainWindow</class>





04

 <widget class="QMainWindow" name="MainWindow">





05

  <property name="geometry">





06

   <rect>





07

    <x>0</x>





08

    <y>0</y>





09

    <width>640</width>





10

    <height>480</height>





11

   </rect>





12

  </property>





13

  <property name="windowTitle">





14

   <string>MainWindow</string>





15

  </property>





16

  <widget class="QWidget" name="centralwidget"/>





17

  <widget class="QMenuBar" name="menubar">





18

   <property name="geometry">





19

    <rect>





20

     <x>0</x>





21

     <y>0</y>





22

     <width>640</width>





23

     <height>19</height>





24

    </rect>





25

   </property>





26

  </widget>





27

  <widget class="QStatusBar" name="statusbar"/>





28

 </widget>





29

 <resources/>





30

 <connections/>





31

</ui>



[图片] testDock.png




举报



开源中国-程序员在线工具：API文档大全(120+) JS在线编辑演示 二维码更多»

 


相关的代码(85)
3回/152阅[C/C++]wxWidgets不规则窗体5天前 By AiboW
2回/160阅[C/C++]wxWidgets 入门程序7天前 By AiboW
0回/159阅[C/C++]一个简单的股票走势分析小程序8天前 By 戚继光
11回/475阅[C/C++]计算器 2.219天前 By 李惟其
2回/305阅[C/C++]调用duilib使用lua编写界面程序24天前 By 无名码农
16回/501阅[C/C++]c++ 计算器 2.1 平台工具 vs201228天前 By 李惟其
4回/406阅[C/C++]CSS3很强大1个月前 By 梅雨夕
22回/2236阅[C/C++]这是使用vs2012制作的一个计算器3个月前 By 李惟其
13回/731阅[C/C++]计算器5个月前 By 李惟其
显示所有 »

发表评论回到顶部网友评论(0)


暂无网友评论














 







回到顶部   回到评论列表

开源从代码分享开始 分享代码



simananzhui的其他代码Qt中 QDockWidget的自定义标题栏 以及 tab页的位置(0评/74阅,6天前)
全部(1)...
 





















© 开源中国(OsChina.NET) | 关于我们 | 广告联系 | @新浪微博 | 开源中国手机版 | 粤ICP备12009483号-3
 
开源中国手机客户端：AndroidiPhoneWP7 




















2条新留言，查看留言»




