
推荐：自制好吃的麻辣香锅自制美味英式蛋挞× 登录注册
伊恩-金的博客
http://blog.sina.com.cn/u/2713556883 [订阅][手机订阅]
首页博文目录图片关于我
个人资料

伊恩-金
Qing  微博
加好友发纸条
写留言加关注
博客等级：
博客积分：42
博客访问：467
关注人气：0
精彩图文
5分钟简易版韩风妆容

绍兴醉人夕阳
新浪Qing

柔情似水伊甸园
新浪Qing

沙滩比基尼盛宴
新浪Qing

日本八音盒殿堂
新浪Qing

香港美食攻略
新浪Qing

最美樱花校园
新浪Qing
查看更多>>

相关博文
八年2.5亿！欧洲转会第一黑店
也许是最好吃的羊排做法之一
女性自慰最尽兴的动作（图）
中医保健师罗大夫
男人挑老婆最关心的3大部位
夏浩然
女人最不该对男人说的六句话
茜茜
女人不能和男人开的四个玩笑！
子夜飞雪
工作越来越有压力？9个方法帮
蓮姐_香港金融高級理財師
大胆开放令人脸红的日本性文化
健康保健专家一梓
风情妓女露天交易震撼全程（图
风尚周刊
女人最刺激的性爱方式（图）
乐尚生活
女人阴毛多性欲特旺盛？（图）
养生专家杰夫
日本第一性爱女全裸撩人（图）
精品博客杂志
更多>>
推荐博文
对不起，生为女人
蒋方舟
小升初“神题”是对学生思维的摧
韩浩月
【原创】惊涛骇浪致栈桥塌陷
师梧
中國遊客十宗罪(FB文章)
香港作家高慧然
恶犬咬死人的刑事责任
丁金坤
（时事快评）与农民工比工资是一
春城时评
“70后”一代开始主导怀旧消费
张颐武
市长不能用权力消灭意见
曹旭刚
王学进：基层干部真的“被误读”
王学进
重新认识“旧社会”
荆棘路独立路

美国教堂接受洗礼全程

花儿和莲雾

台北凯蒂猫主题餐厅

端午节故宫游人如织

世界首家番茄新概念餐厅

麦田里的小清新
查看更多>>
谁看过这篇博文
加载中…
正文字体大小：大 中 小
初始化函数列表和构造函数内赋值之区别  	 (2012-07-10 13:00:15)转载▼
标签： 杂谈	分类： VC学习
初始化函数列表和构造函数内赋值之区别


既然构造函数初始化列表和构造函数体内赋值都可以对成员变量赋值，那么二者有何区别，是不是二者等效呢？ 

一、若类的数据成员是静态的(const)和引用类型，必需用初始化列表 

静态(const)的数据成员只能初始化而不能赋值，同样引用类型也是只可以被初始化，那么只有用初始化列表。 

如： 
C++代码  
#include <iostream>  
#include <string>  
using namespace std;  
  
template<class t>  
class namedptr {  
public:  
    namedptr(const string& initname, t *initptr);  
private:  
    const string name; //静态数据成员的初始化必需用初始化列表  
    t * const ptr;  
};  
  
  
  
template<class t>  
namedptr<t>::namedptr(const string& initname, t *initptr  )  
: name(initname), ptr(initptr)  
{}  
  
//第二种方法是在构造函数体内赋值：  
  
//template<class t>  
//namedptr<t>::namedptr(const string& initname, t *initptr)  
//{  
//  name = initname;  
//  ptr = initptr;  
//}  
  
  
int main()  
{  
    int a  = 10;  
    namedptr<int> Test("SHENZHEN",&a);  
}  

由于 const string name; //静态数据成员的初始化必需用初始化列表 
t * const ptr; 
是静态的，如果用构造函数体内赋值，编译会出错。 

二、构造函数体内赋值会带来额外的开销，效率会低于构造函数初始化列表 

上面的例子改一改： 

C++代码  
template<class t>  
class namedptr {  
public:  
    namedptr(const string& initname, t *initptr);  
private:  
    string name; //静态数据成员的初始化必需用初始化列表  
    t * ptr;  
};  


并且用这两中初始化方法做对比： 
C++代码  
//第一种方法：初始化列表  
template<class t>  
namedptr<t>::namedptr(const string& initname, t *initptr  )  
: name(initname), ptr(initptr)  
{}  
  
//第二种方法是在构造函数体内赋值：  
  
template<class t>  
namedptr<t>::namedptr(const string& initname, t *initptr)  
{  
    name = initname;  
    ptr = initptr;  
}  


当用第二种方法初始化数据成员时会两次对string的成员函数的调用：一次是缺省构造函数，另一次是赋值。 

而用第一种方法（初始化列表）只是一次调用缺省的构造函数，并不会调用赋值函数。会减少不必要的开支，当类相当复杂时，就会看出使用初始化列表的好处。 
分享：  分享到新浪Qing   
1
喜欢
阅读(78)┊ 评论 (0)┊	 收藏(0) ┊转载(0)	 ┊ 喜欢▼ ┊打印┊举报
已投稿到：	 排行榜 圈子
前一篇：接口的作用
后一篇：一道非常坑爹的笔试题(java)
评论 重要提示：警惕虚假中奖信息|[商讯]我有明星气势签名 [发评论]
评论加载中，请稍候...
发评论 [商讯]爱心签名换梦想，天天派奖|[商讯]提高博客人气新方法

更多>>

登录名： 密码： 找回密码 注册	记住登录状态

 分享到微博    评论并转载此博文

验证码： 请点击后输入验证码 收听验证码	 	 

匿名评论
发评论
以上网友发言只代表其个人观点，不代表新浪网的观点或立场。
< 前一篇
接口的作用
后一篇 >
一道非常坑爹的笔试题(java)

新浪BLOG意见反馈留言板　不良信息反馈　电话：4006900000 提示音后按1键（按当地市话标准计费）　欢迎批评指正
新浪简介 | About Sina | 广告服务 | 联系我们 | 招聘信息 | 网站律师 | SINA English | 会员注册 | 产品答疑
Copyright © 1996 - 2013 SINA Corporation, All Rights Reserved
新浪公司 版权所有
 


幻灯播放
关闭

  

