您还未登录！|登录|注册|帮助首页业界移动云计算研发论坛博客下载
更多
zzk197的专栏
目录视图摘要视图订阅
有奖征集活动系列——【HTML5游戏编程之旅】        专访贺炘：软件测试应讲究策略和方法      低价抢购开源中国论坛门票      有奖投票：由您决定“中国十大优秀开源项目”归属      英特尔的智慧眼
 SizeOf函数详解
分类： C/C++ 2012-03-16 10:04 66人阅读 评论(0) 收藏 举报
编译器structc存储pascalstructure
 
简介　　Pascal的一种内存容量度量函数：
用法
　　Var
　　a : array[1..10000] of longint;
　　Begin
　　Writeln(SizeOf(a));
　　End.
　　输出：40000
　　如果定义Integer，则输出:20000

 
　　c语言中判断数据类型长度符
　　用法
　　sizeof(类型说明符，数组名或表达式);
　　或
　　sizeof 变量名
　　1. 定义：
　　sizeof是C/C++中的一个操作符（operator）是也，简单的说其作用就是返回一个对象或者类型所占的内存字节数。
　　MSDN上的解释为：
　　The sizeof keyword gives the amount of storage, in bytes, associated with a variable or a type (including aggregate types). This keyword returns a value of type size_t.
　　其返回值类型为size_t，在头文件stddef.h中定义。这是一个依赖于编译系统的值，一般定义为
　　typedef unsigned int size_t;
　　世上编译器林林总总，但作为一个规范，它们都会保证char、signed char和unsigned
　　char的sizeof值为1，毕竟char是我们编程能用的最小数据类型。
　　2. 语法：
　　sizeof有三种语法形式，如下：
　　1) sizeof( object ); // sizeof( 对象 );
　　2) sizeof( type_name ); // sizeof( 类型 );
　　3) sizeof object; // sizeof 对象;
　　所以，
　　int i;
　　sizeof( i ); // ok
　　sizeof i; // ok
　　sizeof( int ); // ok
　　sizeof int; // error
　　既然写法3可以用写法1代替，为求形式统一以及减少我们大脑的负担，第3种写法，忘掉它吧！实际上，sizeof计算对象的大小也是转换成对对象类型的计算，也就是说，同种类型的不同对象其sizeof值都是一致的。这里，对象可以进一步延伸至表达式，即sizeof可以对一个表达式求值，编译器根据表达式的最终结果类型来确定大小，一般不会对表达式进行计算。如：
　　sizeof( 2 ); // 2的类型为int，所以等价于 sizeof( int );
　　sizeof( 2 + 3.14 ); // 3.14的类型为double，2也会被提升成double类型，所以等价于 sizeof( double );
　　sizeof也可以对一个函数调用求值，其结果是函数返回类型的大小，函数并不会被调用，我们来看一个完整的例子：
　　char foo()
　　{
　　printf("foo() has been called.\n");
　　return 'a';
　　}
　　int main()
　　{
　　size_t sz = sizeof( foo() ); // foo() 的返回值类型为char，所以sz = sizeof(char )，foo()并不会被调用
　　printf("sizeof( foo() ) = %d\n", sz);
　　}
　　C99标准规定，函数、不能确定类型的表达式以及位域（bit-field）成员不能被计算sizeof值，即下面这些写法都是错误的：
　　sizeof( foo );// error
　　void foo2() { }
　　sizeof( foo2() );// error
　　struct S
　　{
　　unsigned int f1 : 1;
　　unsigned int f2 : 5;
　　unsigned int f3 : 12;
　　};
　　sizeof( S.f1 );// error
　　3. sizeof的常量性
　　sizeof的计算发生在编译时刻，所以它可以被当作常量表达式使用，如：
　　char ary[ sizeof( int ) * 10 ]; // ok
　　最新的C99标准规定sizeof也可以在运行时刻进行计算，如下面的程序在Dev-C++中可以正确执行：
　　int n;
　　n = 10; // n动态赋值
　　char ary[n]; // C99也支持数组的动态定义
　　printf("%d\n", sizeof(ary)); // ok. 输出10
　　但在没有完全实现C99标准的编译器中就行不通了，上面的代码在VC6中就通不过编译。所以我们最好还是认为sizeof是在编译期执行的，这样不会带来错误，让程序的可移植性强些。
　　4. 基本数据类型的sizeof
　　这里的基本数据类型指short、int、long、float、double这样的简单内置数据类型，由于它们都是和系统相关的，所以在不同的系统下取值可能不同，这务必引起我们的注意，尽量不要在这方面给自己程序的移植造成麻烦。
　　一般的，在32位编译环境中，sizeof(int)的取值为4。
　　5.指针变量的sizeof
　　学过数据结构的你应该知道指针是一个很重要的概念，它记录了另一个对象的地址。既然是来存放地址的，那么它当然等于计算机内部地址总线的宽度。所以在32位计算机中，一个指针变量的返回值必定是4（注意结果是以字节为单位），可以预计，在将来的64位系统中指针变量的sizeof结果为8。
　　char* pc = "abc";
　　int* pi;
　　string* ps;
　　char** ppc = &pc;
　　void (*pf)();// 函数指针
　　sizeof( pc ); // 结果为4
　　sizeof( pi ); // 结果为4
　　sizeof( ps ); // 结果为4
　　sizeof( ppc ); // 结果为4
　　sizeof( pf );// 结果为4
　　指针变量的sizeof值与指针所指的对象没有任何关系，正是由于所有的指针变量所占内存大小相等，所以MFC消息处理函数使用两个参数WPARAM、LPARAM就能传递各种复杂的消息结构（使用指向结构体的指针）。
　　6. 数组的sizeof
　　数组的sizeof值等于数组所占用的内存字节数，如：
　　char a1[] = "abc";
　　int a2[3];
　　sizeof( a1 ); // 结果为4，字符 末尾还存在一个NULL终止符
　　sizeof( a2 ); // 结果为3*4=12（依赖于int）
　　一些朋友刚开始时把sizeof当作了求数组元素的个数，现在，你应该知道这是不对的，那么应该怎么求数组元素的个数呢Easy，通常有下面两种写法：
　　int c1 = sizeof( a1 ) / sizeof( int ); // 总长度/单个元素的长度
　　int c2 = sizeof( a1 ) / sizeof( a1[0] ); // 总长度/第一个元素的长度
　　写到这里，提一问，下面的c3，c4值应该是多少呢
　　void foo3(char a3[3])
　　{
　　int c3 = sizeof( a3 ); // c3 ==
　　}
　　void foo4(char a4[])
　　{
　　int c4 = sizeof( a4 ); // c4 ==
　　}
　　也许当你试图回答c4的值时已经意识到c3答错了，是的，c3!=3。这里函数参数a3已不再是数组类型，而是蜕变成指针，相当于char* a3，为什么仔细想想就不难明白，我们调用函数foo1时，程序会在栈上分配一个大小为3的数组吗不会！数组是“传址”的，调用者只需将实参的地址传递过去，所以a3自然为指针类型（char*），c3的值也就为4。
　　7. 结构体的sizeof
　　这是初学者问得最多的一个问题，所以这里有必要多费点笔墨。让我们先看一个结构体：
　　struct S1
　　{
　　char c;
　　int i;
　　};
　　问sizeof(s1)等于多少聪明的你开始思考了，char占1个字节，int占4个字节，那么加起来就应该是5。是这样吗你在你机器上试过了吗也许你是对的，但很可能你是错的！VC6中按默认设置得到的结果为8。
　　Why为什么受伤的总是我
　　请不要沮丧，我们来好好琢磨一下sizeof的定义——sizeof的结果等于对象或者类型所占的内存字节数，好吧，那就让我们来看看S1的内存分配情况：
　　S1 s1 = { 'a', 0xFFFFFFFF };
　　定义上面的变量后，加上断点，运行程序，观察s1所在的内存，你发现了什么
　　以我的VC6.0为例，s1的地址为0x0012FF78，其数据内容如下：
　　0012FF78: 61 CC CC CC FF FF FF FF
　　发现了什么怎么中间夹杂了3个字节的CC看看MSDN上的说明：
　　When applied to a structure type or variable, sizeof returns the actual size, which may include padding bytes inserted for alignment.
 
　　原来如此，这就是传说中的字节对齐啊！一个重要的话题出现了。
　　为什么需要字节对齐计算机组成原理教导我们这样有助于加快计算机的取数速度，否则就得多花指令周期了。为此，编译器默认会对结构体进行处理（实际上其它地方的数据变量也是如此），让宽度为2的基本数据类型（short等）都位于能被2整除的地址上，让宽度为4的基本数据类型（int等）都位于能被4整除的地址上，以此类推。这样，两个数中间就可能需要加入填充字节，所以整个结构体的sizeof值就增长了。
　　让我们交换一下S1中char与int的位置：
　　struct S2
　　{
　　int i;
　　char c;
　　};
　　看看sizeof(S2)的结果为多少，怎么还是8再看看内存，原来成员c后面仍然有3个填充字节，这又是为什么啊别着急，下面总结规律。
　　字节对齐的细节和编译器实现相关，但一般而言，满足三个准则：
　　1) 结构体变量的首地址能够被其最宽基本类型成员的大小所整除；
　　2) 结构体每个成员相对于结构体首地址的偏移量（offset）都是成员大小的整数倍，如有需要编译器会在成员之间加上填充字节（internal adding）；
　　3) 结构体的总大小为结构体最宽基本类型成员大小的整数倍，如有需要编译器会在最末一个成员之后加上填充字节（trailing padding）。
　　对于上面的准则，有几点需要说明：
　　1) 前面不是说结构体成员的地址是其大小的整数倍，怎么又说到偏移量了呢因为有了第1点存在，所以我们就可以只考虑成员的偏移量，这样思考起来简单。想想为什么。
　　结构体某个成员相对于结构体首地址的偏移量可以通过宏offsetof()来获得，这个宏也在stddef.h中定义，如下：
　　#define offsetof(s,m) (size_t)&(((s *)0)->m)
　　例如，想要获得S2中c的偏移量，方法为
　　size_t pos = offsetof(S2, c);// pos等于4
　　2) 基本类型是指前面提到的像char、short、int、float、double这样的内置数据类型，这里所说的“数据宽度”就是指其sizeof的大小。由于结构体的成员可以是复合类型，比如另外一个结构体，所以在寻找最宽基本类型成员时，应当包括复合类型成员的子成员，而不是把复合成员看成是一个整体。但在确定复合类型成员的偏移位置时则是将复合类型作为整体看待。
　　这里叙述起来有点拗口，思考起来也有点挠头，还是让我们看看例子吧（具体数值仍以VC6为例，以后不再说明）：
　　struct S3
　　{
　　char c1;
　　S1 s;
　　char c2;
　　};
　　S1的最宽简单成员的类型为int，S3在考虑最宽简单类型成员时是将S1“打散”看的，所以S3的最宽简单类型为int，这样，通过S3定义的变量，其存储空间首地址需要被4整除，整个sizeof(S3)的值也应该被4整除。
　　c1的偏移量为0，s的偏移量呢这时s是一个整体，它作为结构体变量也满足前面三个准则，所以其大小为8，偏移量为4，c1与s之间便需要3个填充字节，而c2与s之间就不需要了，所以c2的偏移量为12，算上c2的大小为13，13是不能被4整除的，这样末尾还得补上3个填充字节。最后得到sizeof(S3)的值为16。
　　通过上面的叙述，我们可以得到一个公式：
　　结构体的大小等于最后一个成员的偏移量加上其大小再加上末尾的填充字节数目，即：
　　sizeof( struct ) = offsetof( last item ) + sizeof( last item ) + sizeof( trailing padding )
　　到这里，朋友们应该对结构体的sizeof有了一个全新的认识，但不要高兴得太早，有一个影响sizeof的重要参量还未被提及，那便是编译器的pack指令。它是用来调整结构体对齐方式的，不同编译器名称和用法略有不同，VC6中通过#pragma pack实现，也可以直接修改/Zp编译开关。#pragma pack的基本用法为：#pragma pack( n )，n为字节对齐数，其取值为1、2、4、8、16，默认是8，如果这个值比结构体成员的sizeof值小，那么
　　该成员的偏移量应该以此值为准，即是说，结构体成员的偏移量应该取二者的最小值，
　　公式如下：
　　offsetof( item ) = min( n, sizeof( item ) )
　　再看示例：
　　#pragma pack(push) // 将当前pack设置压栈保存
　　#pragma pack(2) // 必须在结构体定义之前使用
　　struct S1
　　{
　　char c;
　　int i;
　　};
　　struct S3
　　{
　　char c1;
　　S1 s;
　　char c2;
　　};
　　#pragma pack(pop) // 恢复先前的pack设置
　　计算sizeof(S1)时，min(2, sizeof(i))的值为2，所以i的偏移量为2，加上sizeof(i)等于6，能够被2整除，所以整个S1的大小为6。
　　同样，对于sizeof(S3)，s的偏移量为2，c2的偏移量为8，加上sizeof(c2)等于9，不能被2整除，添加一个填充字节，所以sizeof(S3)等于10。
　　现在，朋友们可以轻松的出一口气了，:)
　　还有一点要注意，“空结构体”（不含数据成员）的大小不为0，而是1。试想一个“不占空间”的变量如何被取地址、两个不同的“空结构体”变量又如何得以区分呢于是，“空结构体”变量也得被存储，这样编译器也就只能为其分配一个字节的空间用于占位了。如下：
　　struct S5 { };
　　sizeof( S5 ); // 结果为1
　　8. 含位域结构体的sizeof
　　前面已经说过，位域成员不能单独被取sizeof值，我们这里要讨论的是含有位域的结构体的sizeof，只是考虑到其特殊性而将其专门列了出来。
　　C99规定int、unsigned int和bool可以作为位域类型，但编译器几乎都对此作了扩展，允许其它类型类型的存在。使用位域的主要目的是压缩存储，其大致规则为：
　　1) 如果相邻位域字段的类型相同，且其位宽之和小于类型的sizeof大小，则后面的字段将紧邻前一个字段存储，直到不能容纳为止；
　　2) 如果相邻位域字段的类型相同，但其位宽之和大于类型的sizeof大小，则后面的字段将从新的存储单元开始，其偏移量为其类型大小的整数倍；
　　3) 如果相邻的位域字段的类型不同，则各编译器的具体实现有差异，VC6采取不压缩方式，Dev-C++采取压缩方式；
　　4) 如果位域字段之间穿插着非位域字段，则不进行压缩；
　　5) 整个结构体的总大小为最宽基本类型成员大小的整数倍。
　　还是让我们来看看例子。
　　示例1：
　　struct BF1
　　{
　　char f1 : 3;
　　char f2 : 4;
　　char f3 : 5;
　　};
　　其内存布局为：
　　|_f1__|__f2__|_|____f3___|____|
　　|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|
　　0 3 7 8 1316
　　位域类型为char，第1个字节仅能容纳下f1和f2，所以f2被压缩到第1个字节中，而f3只
　　能从下一个字节开始。因此sizeof(BF1)的结果为2。
　　示例2：
　　struct BF2
　　{
　　char f1 : 3;
　　short f2 : 4;
　　char f3 : 5;
　　};
　　由于相邻位域类型不同，在VC6中其sizeof为6，在Dev-C++中为2。
　　示例3：
　　struct BF3
　　{
　　char f1 : 3;
　　char f2;
　　char f3 : 5;
　　};
　　非位域字段穿插在其中，不会产生压缩，在VC6和Dev-C++中得到的大小均为3。
　　9. 联合体的sizeof
　　结构体在内存组织上是顺序式的，联合体则是重叠式，各成员共享一段内存，所以整个联合体的sizeof也就是每个成员sizeof的最大值。结构体的成员也可以是复合类型，这里，复合类型成员是被作为整体考虑的。
　　所以，下面例子中，U的sizeof值等于sizeof(s)。
　　union U
　　{
　　int i;
　　char c;
　　S1 s;
　　};
分享到： 
上一篇：一个通用Makefile详解
下一篇：关于“段错误”个人小结

查看评论

  暂无评论

您还没有登录,请[登录]或[注册]
* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场

 
个人资料
  
alex_zheng
 
访问：16534次
积分：214分
排名：千里之外
原创：1篇转载：23篇译文：1篇评论：2条
文章搜索

文章分类
linux(11)
C/C++(7)
ARM(1)
QT(5)
M3(1)
硬件(1)
其他(2)
文章存档
2013年01月(1)
2012年11月(1)
2012年10月(1)
2012年08月(5)
2012年07月(2)
展开
阅读排行
QT获取系统时间，以及设置日期格式(3827)
Git用户手册(2608)
make: 警告：检测到时钟错误。您的创建可能是不完整的(2354)
Qt中的键盘事件(1870)
linux下如何获取cpu的利用率(730)
关于火线、零线、地线(576)
C语言中auto，register，static，const，volatile的区别(398)
QString 与中文问题/Qt界面中文字体及大小设置(296)
Linux的帧缓冲设备(Framebuffer)简介(264)
GPS 0183协议GGA、GLL、GSA、GSV、RMC、VTG解释(257)
评论排行
QT获取系统时间，以及设置日期格式(1)
linux的system () 函数详解(1)
关于火线、零线、地线(0)
Git用户手册(0)
GPS 0183协议GGA、GLL、GSA、GSV、RMC、VTG解释(0)
TERMIOS详解(0)
make: 警告：检测到时钟错误。您的创建可能是不完整的(0)
linux ssh key配置方法(0)
C语言中auto，register，static，const，volatile的区别(0)
嵌入式系统文件系统比较 jffs2, yaffs, cramfs, romfs, ramdisk, ramfs/tmpfs(0)
推荐文章

最新评论
linux的system () 函数详解
linux_2013: 写的太好了，爱死你了，多搞点
QT获取系统时间，以及设置日期格式
haibocui: 不辍不辍
公司简介|招贤纳士|广告服务|银行汇款帐号|联系方式|版权声明|法律顾问|问题报告
QQ客服 微博客服 论坛反馈 联系邮箱：webmaster@csdn.net 服务热线：400-600-2320
京 ICP 证 070598 号
北京创新乐知信息技术有限公司 版权所有
世纪乐知(北京)网络技术有限公司 提供技术支持
江苏乐知网络技术有限公司 提供商务支持
Copyright © 1999-2012, CSDN.NET, All Rights Reserved 

