geniuscode
导航
博客园
首页
新随笔
联系
订阅
管理
<	2010年9月	>
日	一	二	三	四	五	六
29	30	31	1	2	3	4
5	6	7	8	9	10	11
12	13	14	15	16	17	18
19	20	21	22	23	24	25
26	27	28	29	30	1	2
3	4	5	6	7	8	9
公告
昵称：geniuscode
园龄：2年9个月
粉丝：1
关注：4
+加关注
统计
随笔 - 5
文章 - 2
评论 - 2
引用 - 0
搜索
 
 
常用链接
我的随笔
我的评论
我的参与
最新评论
我的标签
我的标签
3n+1(1)
ACM(1)
C++基本语法总结(1)
c++继承(1)
C++友元函数(1)
hdoj(1)
hdoj 1272(1)
hdu 1272(1)
uva100(1)
保护继承(1)
更多
随笔分类(4)
ACM(1)
C++(3)
随笔档案(5)
2010年9月 (4)
2010年8月 (1)
文章分类(1)
并查集(1)
文章档案(2)
2010年9月 (1)
2010年8月 (1)
相册
2010年全国软件大赛纪念照
最新评论
1. Re:浅谈C++中的友元关系
写得挺不错的，支持一下！也许是我水平较低，觉得例子写得有些混乱，没有清晰地表达出作者的意图。
--电路格格
阅读排行榜
1. 浅谈C++中的友元关系(7382)
2. 浅谈C++中三种继承关系(698)
3. C++重点语法概要(610)
4. notpad++配置free pascal IDE(216)
5. AC了222个HODJ的题目(110)
评论排行榜
1. 浅谈C++中的友元关系(1)
2. AC了222个HODJ的题目(1)
3. notpad++配置free pascal IDE(0)
4. 浅谈C++中三种继承关系(0)
5. C++重点语法概要(0)
推荐排行榜
1. 浅谈C++中的友元关系(1)
浅谈C++中的友元关系

在封装中C++类数据成员大多情况是private属性；但是如果接口采用多参数实现肯定影响程序效率；然而这时候如果外界需要频繁访问这些私有成员，就不得不需要一个既安全又理想的“后门”——友元关系;

C++中提供三种友元关系的实现方式，友元函数、友元成员函数、友元类。

友元函数：既将一个普通的函数在一个类中说明为一个friend属性；其定义（大多数会访问该类的成员）应在类后；

友元成员函数：既然是成员函数，那么肯定这个函数属于某个类，对了就是因为这个函数是另外一个类的成员函数，有时候因为我们想用一个类通过一个接口去访问另外一个类的信息，然而这个信息只能是被它授权的类才能访问；那么也需要用friend去实现；这个概念只是在声明的时候稍有变化；

友元类：友元类声明会将整个类说明成为另一个类的友元关系；和之前两种的区别是集体和个人的区别；友元类的所有成员函数都可以是另一个类的友元函数；

值得注意的是友元关系是单向的，有点像我们恋爱中出现的单相思 O(∩_∩)O，单向关系就是说如果A被说明成B的友元关系，那么只能说A是B的友元，并不代表B是A的友元；其次在多数情况下友元关系的函数都会访问它被说明中类的成员，这时候应该将函数定义在类的后面；

下面给一个简单的例程代码；

 


 1 #include <iostream>
 2 
 3 using namespace std;
 4 
 5 class B;
 6 
 7 class A{
 8     private:
 9         int x;
10     public:
11         A();
12         void display(B &);
13 };
14 
15 class C;
16 
17 class B{
18     private:
19         int y;
20         int z;
21     public:
22         B();
23         B(int, int);
24     friend void A::display(B &);//友元成员函数
25     friend void display(B &);//友元函数
26     friend class C;//友元类
27 };
28 
29 class C{
30     private:
31         int sum;
32         void calc(B &);
33     public:
34         C();
35         void display(B &);
36 };
37 
38 //必须在友元关系的类后进行定义
39 void display(B &v)//友元函数
40 {
41     cout << v.y << " " << v.z << endl;
42 }
43 
44 A::A()
45 {
46     this->x = 0;
47 }
48 
49 void A::display(B &v)//友元成员函数
50 {
51     this->x = v.y + v.z;
52     cout << this->x << endl;
53 }
54 
55 B::B()
56 {
57     this->y = 0;
58     this->z = 0;
59 }
60 
61 B::B(int y, int z)
62 {
63     this->y = y;
64     this->z = z;
65 }
66 
67 C::C()
68 {
69     sum = 0;
70 }
71 
72 void C::display(B &v)
73 {
74     this->calc(v);
75     cout << sum << " = " << v.y << " + " << v.z << endl;
76 }
77 
78 void C::calc(B &v)
79 {
80     sum = v.y + v.z;
81 }
82 
83 int main()
84 {
85     A a;
86     B b(2, 3);
87     display(b);
88     a.display(b);
89     C c;
90     c.display(b);
91     
92     return 0;
93 }
94 

 

 


 

～～～～～～～～～～～～～～～～～～～～～～～～听妈妈的话～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

～～～～～～～～～～～～～～好好学习～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～天天向上～～～～～～～～～～～～～～～～～～～～～

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

～～～～～～～～～～～～～～～～天才，没有一个伟大的心灵不带一粒疯狂的种子！～～～～～～～～～～～～～～～～～～～～～

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

分类: C++
标签: C++友元函数, 友元类, 友元成员函数
绿色通道： 好文要顶 关注我 收藏该文与我联系 
geniuscode
关注 - 4
粉丝 - 1
+加关注
1 0
(请您对文章做出评价)
« 上一篇：notpad++配置free pascal IDE
» 下一篇：浅谈C++中三种继承关系
posted on 2010-09-04 19:30 geniuscode 阅读(7382) 评论(1) 编辑 收藏


评论

#1楼 2013-04-21 10:52 电路格格  
写得挺不错的，支持一下！也许是我水平较低，觉得例子写得有些混乱，没有清晰地表达出作者的意图。
支持(0)反对(0)
  
刷新评论刷新页面返回顶部
注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。
找优秀程序员，就在博客园
博客园首页博问新闻闪存程序员招聘知识库

最新IT新闻:
· HTC One Mini真机图片曝光：4.3英寸屏幕
· 苹果电子书占美国电子书市场份额达20%
· 苹果公司推新功能打击iPhone盗窃活动
· 索尼全面开放智能手表项目：支持第三方固件
· WhatsApp日聊天数量达到270亿条半年增长50%
» 更多新闻...
最新知识库文章:
· 努力成为优秀的工程师
· 代码里的命名规则：错误的和正确的对比
· 杨澜：你唯一有把握的是成长
· 教育培训行业现状分析（九）
· 教育培训行业现状分析（八）
» 更多知识库文章...

Powered by: 
博客园 
Copyright © geniuscode
