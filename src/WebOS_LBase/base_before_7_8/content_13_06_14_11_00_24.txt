6. 数组的sizeof
　　数组的sizeof值等于数组所占用的内存字节数，如：
　　char a1[] = "abc";
　　int a2[3];
　　sizeof( a1 ); // 结果为4，字符 末尾还存在一个NULL终止符
　　sizeof( a2 ); // 结果为3*4=12（依赖于int）
　　一些朋友刚开始时把sizeof当作了求数组元素的个数，现在，你应该知道这是不对的，那么应该怎么求数组元素的个数呢Easy，通常有下面两种写法：
　　int c1 = sizeof( a1 ) / sizeof( int ); // 总长度/单个元素的长度
　　int c2 = sizeof( a1 ) / sizeof( a1[0] ); // 总长度/第一个元素的长度
　　写到这里，提一问，下面的c3，c4值应该是多少呢
　　void foo3(char a3[3])
　　{
　　int c3 = sizeof( a3 ); // c3 ==
　　}
　　void foo4(char a4[])
　　{
　　int c4 = sizeof( a4 ); // c4 ==
　　}
　　也许当你试图回答c4的值时已经意识到c3答错了，是的，c3!=3。这里函数参数a3已不再是数组类型，而是蜕变成指针，相当于char* a3，为什么仔细想想就不难明白，我们调用函数foo1时，程序会在栈上分配一个大小为3的数组吗不会！数组是“传址”的，调用者只需将实参的地址传递过去，所以a3自然为指针类型（char*），c3的值也就为4。
