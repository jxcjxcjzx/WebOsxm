VincentCZW
导航
博客园
首页
新随笔
联系
管理
<	2012年7月	>
日	一	二	三	四	五	六
24	25	26	27	28	29	30
1	2	3	4	5	6	7
8	9	10	11	12	13	14
15	16	17	18	19	20	21
22	23	24	25	26	27	28
29	30	31	1	2	3	4
统计
随笔 - 74
文章 - 11
评论 - 297
引用 - 0
公告
昵称：VincentCZW
园龄：1年1个月
粉丝：90
关注：8
+加关注
搜索
 
 
常用链接
我的随笔
我的评论
我的参与
最新评论
我的标签
随笔分类(76)
Android(1)
C#
C++(13)
IT小百科(13)
Love喜欢(2)
STL(6)
VC & MFC(1)
设计模式(15)
数据结构与算法(24)
自娱自乐(1)
随笔档案(74)
2013年3月 (1)
2012年12月 (1)
2012年9月 (1)
2012年8月 (15)
2012年7月 (19)
2012年6月 (9)
2012年5月 (28)
文章分类(7)
Android(4)
程序员职场生活
移动产品相关(3)
文章档案(11)
2013年4月 (1)
2013年3月 (8)
2012年8月 (2)
相册
2009那一年的我
积分与排名
积分 - 57975
排名 - 2173
最新评论
1. Re:数组中的趣味题（一）
第2题确实有难度啊，在知道答案的情况下还是依靠简单的数学证明使自己相信这是正确的。
--rqzrqh
2. Re:数组中的趣味题（一）
第3题和第4题可以合起来，时间复杂度O(n)int func1(int array[], int n){	int i;	int small,big,max;	max = 0;	small = big = array[0];	for (i=1; i<n; i++)	{ if (array[i] > big) { max = abs(array[i]-small); big = array...
--rqzrqh
3. Re:数组循环移位中的学问
@breeze356
这个方法比较实用，特别是在数组空间比较大的情况下，优势更为明显
--adong7639
4. Re:一个即将毕业的13届毕业生校招有感
我是14年要毕业的学生，你能不能内推一下我啊！！！
--driverlife
阅读排行榜
1. 关于C++中的友元函数的总结(5720)
2. 小程序员的趣味题（一）(3672)
3. 电梯调度算法(3525)
4. 快速模式匹配算法（KMP）(3238)
5. 二叉树中的那些常见的面试题(3224)
评论排行榜
1. 大家赶快来说说C和C++到底有什么“奸情”吧(35)
2. 小程序员的趣味题（一）(30)
3. 电梯调度算法(30)
4. 数组中的趣味题（一）(27)
5. 数组循环移位中的学问(25)
推荐排行榜
1. 一个即将毕业的13届毕业生校招有感(7)
2. 电梯调度算法(6)
3. 数组中的趣味题（一）(6)
4. 那些年我们一起学过的“排序算法”(6)
5. 小程序员的趣味题（一）(5)
 
快速模式匹配算法（KMP）
    恐怕现在用过电脑的人，一定都知道大部分带文本编辑功能的软件都有一个快捷键ctrl+f 吧（比如word）。这个功能主要来完成“查找”，“替换”和“全部替换”功能的，其实这就是典型的模式匹配的应用，即在文本文件中查找串。

1.模式匹配

    模式匹配的模型大概是这样的：给定两个字符串变量S和P，其中S成为目标串，其中包含n个字符，P称为模式串，包含m个字符，其中m<=n。从S的给定位置（通常是S的第一个位置）开始搜索模式P。如果找到，则返回模式P在目标串中的位置（即：P的第一个字符在S中的下标）。如果在目标串S中没有找到模式串P，则返回-1.这就是模式匹配的定义啦，下面来看看怎么实现模式匹配算法吧。

2.朴素的模式匹配

    朴素的模式匹配算法非常简单，容易理解，大概思路是这样的：从S的第一个字符S0开始，将P中的字符依次和S中字符比较，若S0=P0 && …… && Sm-1 = Pm-1，则证明匹配成功，剩下的匹配无需进行了，返回下标0。若在某一步Si != Pi 则P中剩下的字符也不用比较了，不可能匹配成功了，然后从S中第二个字符开始与P中第一个字符进行比较，同理，也是知道Sm = Pm-1或者找到某个i使得Si != S-1为止。依次类推若知道以S中第n-m个开始字符为止，还没有匹配成功则证明S中不存模式P。（想想为什么这里强调是n-m）这个代码实现应该是非常简单的，具体开始参考strstr函数的内部实现。可以看看百度百科，给个链接http://baike.baidu.com/view/745156.htm，这里不写出来了，还得赶紧进入正题KMP呢。

3.快速模式匹配算法（KMP）

    朴素的模式匹配效率不高的主要原因是进行了重复的字符比较。下一次比较和上一次比较没有任何的联系，是朴素模式匹配的缺点，其实上一次比较的比较结果是可以利用的，这就产生了快速模式匹配。在朴素的模式匹配中，目标串S的下标移动是一步一步的，这其实并不好，移动步数没有必要为1。

　　现在不妨假设，当前匹配情况是这样的：S0 …… St St+1 …… St+j  与 P0 P1…… Pj ，现在正在尝试匹配的字符是St+j+1和Pj+1，并且St+j+1 != Pj+1，言外之意就是说St St+1……St+j和P0 P1……Pj是完全匹配的。那么这个时候，S中下一次匹配开始位置应该是什么呢？？按照朴素的模式匹配，下次比较应该从St+1开始，并且令St+1和P0比较，但是在快速模式匹配中并不是这样，快速模式匹配选择St+j+1和Pk+1比较，K是什么呢？K是这样的一个值，使得P0 P1……Pk 和 Pj-k Pj-k+1……Pj完全匹配，不妨设k=next[j]，因此P0 P1……Pk和St+j-k St+j-k+1 ……St+j完全匹配。那么下一次要进行匹配的两个字符应为St+j+1和Pk+1。S和P都没有回溯到下标0在进行比较，这就是KMP之所以快的原因啦。

    现在关键问题来了，这个K怎么能得到呢？如果得到这个K值复杂度高，那这个思路就不好了，其实这个K呢，只和模式串P有关系，并且要求m个k，k = next[j]，因此只要算一次存储到next数组中就可以了，并且时间复杂度和m有关系（线性关系）。看看具体怎么求next数组的值，即求k。

用归纳法求next[]：设next(0) = -1，若已知next(j) = k，欲求得next[j+1]。

（1）如果Pk+1 = Pj+1，显然next[j+1] = k+1.如果Pk+1 != Pj+1，则next[j+1] < next[j]，于是寻找h < k 使得P0 P1……Ph = Pj-h Pj-h+1……Pj = Pk-h Pk-h+1……Pk。也就是说h = next(k);看出来了吧，这是个迭代的过程。（也就是以前的结果对求以后的值有用）

（2）如果不存这样的h，说明P0 P1……Pj+1中没有前后相等的子串，因此next[j+1] =-1.

（3）如果存在这样的h，继续检验Ph和Pj是否相等。知道找到这中相等的情况，或者确定为-1求next[j+1]的过程结束。

看看实现的代码：

View Code
现在有了next数组保存的k值，就可以实现KMP算法了：

View Code
时间复杂度：
　　对于Next函数近似接近O（m），KMP算法的时间复杂度为O(n)，所以整个算法的时间复杂度为O(n+m)

空间复杂度：

　　多引入了O（m）的空间复杂度。

4.应用KMP的一道面试题 

　　给定两个字符串是s1和s2，要判定s2是否能够被s1做循环移位得到的字符串包含。例如s1=AABCD，s2 =CDAA，返回true，因为s1循环移位可以变成CDAAB。给定s1=ACBD和s2=ACBD则返回false。

      分析：不难发现对s2移位得到的字符串都将是字符串s1s1的子串，如果s2可以有s1循环移位得到，那么s2一定是s1s1的子串，这时KMP算法是不是就很管用了呢。

思考：有没有比KMP更好的思路呢？？

 学习中的一点总结，欢迎拍砖哈^^

分类: 数据结构与算法
标签: 快速模式匹配（KMP）
绿色通道： 好文要顶 关注我 收藏该文与我联系 
VincentCZW
关注 - 8
粉丝 - 90
+加关注
0 0
(请您对文章做出评价)
« 上一篇：设计模式之策略模式（Strategy）
» 下一篇：设计模式之模板方法模式（Template）
posted on 2012-07-09 17:59 VincentCZW 阅读(3238) 评论(8) 编辑 收藏

Comments
#1楼
getgoing  
Posted @ 2012-07-09 18:08
……这么一说这个缩写还有点意思
支持(1)反对(0)
  
#2楼
随风浪迹天涯  
Posted @ 2012-07-09 22:56
@getgoing
是不是想到了一个音乐播放器。。哈哈。
支持(0)反对(0)
  
#3楼
hjason2042  
Posted @ 2012-07-09 23:24
@getgoing
哈哈哈有点意思
支持(0)反对(0)
  
#4楼[楼主]
BeyondAnyTime  
Posted @ 2012-07-10 10:01
@随风浪迹天涯
指的哪个呢？？呵呵……
支持(0)反对(0)
  
#5楼
随风浪迹天涯  
Posted @ 2012-07-10 14:12
@BeyondAnyTime
http://cn.kmplayer.com/

我一直很喜欢的播放器！！~你值得拥有。
支持(0)反对(0)
  
#6楼
hjason2042  
Posted @ 2012-07-10 16:07
指出2点错误哈（大概是笔误）：
1.【言外之意就是说S St+1……St+j和P0 P1……Pj是完全匹配的。】
应该是St St+1...
2.【但是在快速模式匹配中并不是这样，快速模式匹配选择St+j+1和Pk比较，K是什么呢】
根据下面的描述，应该是选择St+j+1和Pk+1比较
支持(0)反对(0)
  
#7楼[楼主]
BeyondAnyTime  
Posted @ 2012-07-10 16:33
@hjason2042
嗯，您说的都是对的，谢谢您您指出的这两个错误，已改过来了。。
支持(0)反对(0)
  
#8楼[楼主]
BeyondAnyTime  
Posted @ 2012-07-10 16:34
@随风浪迹天涯
哦，呵呵……
支持(0)反对(0)
  
刷新评论刷新页面返回顶部
注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。
找优秀程序员，就在博客园
博客园首页博问新闻闪存程序员招聘知识库

最新IT新闻:
· 针对.NET开发者的NuoDB 1.1发布
· iOS 和 Android 之争可以终结了
· 未来谷歌眼镜应用将会是什么样的？
· 超过三万人签署终止Adobe Creative Cloud在线请愿
· 谷歌FB声明有奥妙：美政府间接获取公民数据
» 更多新闻...
最新知识库文章:
· 杨澜：你唯一有把握的是成长
· 教育培训行业现状分析（九）
· 教育培训行业现状分析（八）
· 教育培训行业现状分析（七）
· 全功能团队 - 数据篇
» 更多知识库文章...

 
Powered by: 
博客园 
Copyright © VincentCZW
