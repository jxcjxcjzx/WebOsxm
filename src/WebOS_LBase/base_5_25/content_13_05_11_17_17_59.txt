
您还未登录！|登录|注册|帮助
 首页
 业界
 移动
 云计算
 研发
 论坛
 博客
 下载
 
更多
 







结构之法 算法之道

Google或baidu搜索：“结构之法”，进入本博客


 


目录视图
摘要视图
订阅
 . 



【免费有礼】欧美最新网络营销技巧分享        博客导入工具      【限时优惠】第五届云计算大会社区门票抢购 
探究云计算数据中心节能增效之道      专访邓凡平：Android开发路上的快速学习之道      CSDN博客第二期最佳移动开发博主评选 



程序员编程艺术第二十一~二章：发帖水王及扩展，与最短摘要生成（12.07修订） 
.
 分类： 11.TAOPP（编程艺术）13.TAOPP array12.TAOPP string2011-10-20 11:3627225人阅读评论(42)收藏举报
 
编程扩展算法numbers面试搜索引擎



目录(?)[+]












 



       第二十一~二十二章：出现次数超过一半的数字，最短摘要的生成





前言

   咱们先来看两个问题：



    第一个问题来自编程之美上，Tango是微软亚洲研究院的一个试验项目，如图1所示。研究院的员工和实习生们都很喜欢在Tango上面交流灌水。传说，Tango有一大“水王”，他不但喜欢发帖，还会回复其他ID发的每个帖子。坊间风闻该“水王”发帖数目超过了帖子总数的一半。如果你有一个当前论坛上所有帖子（包括回帖）的列表，其中帖子作者的ID也在表中，你能快速找出这个传说中的Tango水王吗？













                                          图1  Tango

   第二个问题来自各位读者的手中，你我在百度或谷歌搜索框中敲入本博客名称的前4个字“结构之法”，便能在第一个选项看到本博客的链接，如下图2所示：




                                      图2  谷歌中搜索关键字“结构之法”




  在上面所示的图2中，搜索结果“结构之法算法之道-博客频道-CSDN.NET”下有一段说明性的文字：“程序员面试、算法研究、编程艺术、红黑树4大经典原创系列集锦与总结 作者：July--结构之法算法...”，我们把这段文字称为那个搜索结果的摘要，亦即最短摘要。我们的问题是，请问，这个最短摘要是怎么生成的呢?


 ok，看本文之前，你尚不知道怎么解决上述两个问题的话不要紧，本文即要阐述上述两个问题。若有任何问题，欢迎随时不吝指正。谢谢。


第二十一章、发帖水王及其扩展

  第一节、74.数组中超过出现次数超过一半的数字

题目：数组中有一个数字出现的次数超过了数组长度的一半，找出这个数字。 

分析：编程之美上也有这道题，不过它变换了题目的表述形式，即是如本文前言所述的寻找发帖水王的问题。


    ok，咱们来解决上述这道题，以微软面试100题第74题的阐述为准（本程序员编程艺术系列就是按照之前整理的微软100题一题一题展开而来的）。

一个数组中有很多数，现在我们要找出这个数组中那个超过出现次数一半的数字，怎么找呢?大凡当我们碰到某一个杂乱无序的东西时，我们人的内心本质期望是希望把它梳理成有序的。所以，我们得分两种情况来讨论，无序和有序：

1.如果无序，那么我们是不是可以先把数组中所有这些数字先进行排序，至于选取什么排序方法则不在话下，最常用的快速排序O（N*logN）即可。排完序呢，直接遍历。在遍历整个数组的同时统计每个数字的出现次数，然后把那个出现次数超过一半的数字直接输出，题目便解答完成了。总的时间复杂度为O（N*logN+N）。
2.但各位再想想，如果是有序的数组呢或者经过上述由无序的数组变成有序后的数组呢？是否在排完序O（N*logN）后，真的还需要再遍历一次整个数组么?我们知道，既然是数组的话，那么我们可以根据数组索引支持直接定向到某一个数。我们发现，一个数字在数组中的出现次数超过了一半，那么在已排好序的数组索引的N/2处（从零开始编号），就一定是这个数字。自此，我们只需要对整个数组排完序之后，然后直接输出数组中的第N/2处的数字即可，这个数字即是整个数组中出现次数超过一半的数字，总的时间复杂度由于少了最后一次整个数组的遍历，缩小到O（N*logN）。
3. 然不论是上述思路一的O（N*logN+N），还是思路二的O（N*logN），时间复杂度并无本质性的改变。我们需要找到一种更为有效的思路或方法。既要缩小总的时间复杂度，那么就用查找时间复杂度为O（1），事先预处理时间复杂度为O（N）的hash表。哈希表的键值（Key）为数组中的数字，值（Value）为该数字对应的次数。然后直接遍历整个hash表，找出每一个数字在对应的位置处出现的次数，输出那个出现次数超过一半的数字即可。
4.Hash表需要O（N）的开销空间，且要设计hash函数，还有没有更好的办法呢?我们可以试着这么考虑，如果每次删除两个不同的数（不管是不是我们要查找的那个出现次数超过一半的数字），那么，在剩下的数中，我们要查找的数（出现次数超过一半）出现的次数仍然超过总数的一半。通过不断重复这个过程，不断排除掉其它的数，最终找到那个出现次数超过一半的数字。这个方法，免去了上述思路一、二的排序，也避免了思路三空间O（N）的开销，总得说来，时间复杂度只有O（N），空间复杂度为O（1），不失为最佳方法。

    或许，你还没有明白上述思路4的意思，举个简单的例子吧，如数组a[5]={0,1,2,1,1};

    很显然，若我们要找出数组a中出现次数超过一半的数字，这个数字便是1，若根据上述思路4所述的方法来查找，我们应该怎么做呢?通过一次性遍历整个数组，然后每次删除不相同的两个数字，过程如下简单表示：



0 1 2 1 1 =>2 1 1=>1,最终，1即为所找。
    但是如果是5，5，5，5，1，还能运用上述思路么？额，别急，请看下文思路5。


        5.   咱们根据数组的特性进一步考虑@zhedahht： 数组中有个数字出现的次数超过了数组长度的一半。也就是说，有个数字出现的次数比其他所有数字出现次数的和还要多。
    因此我们可以考虑在遍历数组的时候保存两个值：一个是数组中的一个数字，一个是次数。当我们遍历到下一个数字的时候，如果下一个数字和我们之前保存的数字相同，则次数加1。 如果下一个数字和我们之前保存的数字不同，则次数减1。如果次数为零，我们需要保存下一个数字，并把次数重新设为1。  

    下面，举二个例子：

•第一个例子，5，5，5，5，1 ：

    不同的相消，相同的累积。遍历到第四个数字时，candidate 是5, nTimes 是4;    遍历到第五个数字时，candidate 是5, nTimes 是3;  nTimes不为0，那么candidate就是超过半数的。 
•第二个例子，0，1，2，1，1：

    开始时，保存candidate是数字0，ntimes为1，遍历到数字1后，与数字0不同，则ntime减1变为零,；接下来，遍历到数字2，2与1不同，candidate保存数字2，且ntimes重新设为1；继续遍历到第4个数字1时，与2不同，ntimes减一为零，同时candidate保存为1；最终遍历到最后一个数字还是1，与我们之前candidate保存的数字1相同，ntime加一为1。最后返回的是之前保存的candidate为1。




    针对上述程序，我再说详细点，0，1，2，1，1：

1.i=0，candidate=0，nTimes=1；
2.i=1，a[1]=0 ！= candidate，nTimes--，=0；
3.i=2，candidate=2，nTimes=1；
4.i=3，a[3] ！= candidate，nTimes--，=0；
5.i=4，candidate=1，nTimes=1；
6.如果是0，1，2，1，1，1的话，那么i=5，a[5]=1=candidate，nTimes++，=2；......



    Ok，思路清楚了，完整的代码如下：





01.//改自编程之美 2010  
02.Type Find(Type* a, int N)  //a代表数组，N代表数组长度  
03.{  
04.    Type candidate;  
05.    int nTimes, i;  
06.    for(i = nTimes = 0; i < N; i++)  
07.    {  
08.        if(nTimes == 0)  
09.        {  
10.            candidate = a[i], nTimes = 1;  
11.        }  
12.        else  
13.        {  
14.            if(candidate == a[i])  
15.                nTimes++;  
16.            else  
17.                nTimes--;  
18.        }  
19.    }  
20.    return candidate;   
21.}  

    或者：






01.//copyright@zhedahht  
02.//July,updated,  
03.//2011.04.16。  
04.#include <iostream>  
05.using namespace std;  
06.  
07.bool g_Input = false;  
08.  
09.int Num(int* numbers, unsigned int length)  
10.{  
11.    if(numbers == NULL && length == 0)  
12.    {  
13.        g_Input = true;  
14.        return 0;  
15.    }  
16.    g_Input = false;  
17.      
18.    int result = numbers[0];  
19.    int times = 1;  
20.    for(int i = 1; i < length; ++i)  
21.    {  
22.        if(numbers[i] == result)  
23.            times++;  
24.        else  
25.            times--;  
26.        if(times == 0)  
27.        {  
28.            result = numbers[i];  
29.            times = 1;  
30.        }  
31.    }  
32.      
33.    //检测输入是否有效。  
34.    times = 0;  
35.    for(i = 0; i < length; ++i)  
36.    {  
37.        if(numbers[i] == result)  
38.            times++;  
39.    }  
40.    if(times * 2 <= length)  
41.        //检测的标准是：如果数组中并不包含这么一个数字，那么输入将是无效的。  
42.    {  
43.        g_Input = true;  
44.        result = 0;  
45.    }      
46.    return result;  
47.}  
48.  
49.int main()  
50.{  
51.    int a[10]={1,2,3,4,6,6,6,6,6};  
52.    int* n=a;  
53.    cout<<Num(a,9)<<endl;  
54.    return 0;  
55.}  


这段代码与上段代码本质上并无二致，不过有几个问题，还是需要我们注意：

1.当输入无效性时，要处理。比如数组长度为0。
2.最后，上述代码加了一个判断，如果数组中并不包含这么一个数字，那么输入也是无效的。因此在函数结束前还加了一段代码来验证输入是不是有效的。

  第二节、加强版水王：找出出现次数刚好是一半的数字    

 1、问题扩展@BrainDeveloper

    我们知道，水王问题：有N个数，其中有一个数出现超过一半，要求在线性时间求出这个数。那么，我的问题是，加强版水王：有N个数，其中有一个数刚好出现一半次数，要求在线性时间内求出这个数。

    因为，很明显，如果是刚好出现一半的话，如此例： 0，1，2，1：

	 遍历到0 时 candidate为0，times为1
	 遍历到1时  与candidate不同，times减为0
	 遍历到2时， times为0，则candidate更新为2，times加1
	 遍历到1时， 与candidate不同，则times减为0；我们需要返回所保存candidate（数字2）的下一个数字即数字1。


    所以，如果还运用上面的程序的话，那么只能返回我们要找的数字1的前一个数字，即遍历到1之前所保存的candidate2，试问如何让程序能返回我们需要的数字1呢？望读者思考之：



    程序经过修改后，如下（未经严格测试，如有误恳请指正）：






2、bug出现！

    据本文读者tenger_lee评论反应，上述程序有bug，因为若数组序列是：1 0 2 1 2 1，则无法得到正确结果。现修正如下（只是程序复杂度高达为O（N^2），还待后续改进与优化）：




3、持续改进

    赤血红狐&&pointersky用了两个变量来记录水王，最终完整代码如下（测试正确）：



01.#include<iostream>  
02.using namespace std;  
03.  
04.int Find(int* a, int N)  
05.{  
06.    int candidate1,candidate2;  
07.    int nTimes1, nTimes2, i;  
08.          
09.    for(i = nTimes1 = nTimes2 =0; i < N; i++)  
10.    {  
11.        if(nTimes1 == 0)  
12.        {  
13.            candidate1 = a[i], nTimes1 = 1;  
14.        }  
15.        else if(nTimes2 == 0 && candidate1 != a[i])  
16.        //注意：这里的判断条件加上第二个变量是否等于第一个变量的判断  
17.        {  
18.              
19.            candidate2 = a[i], nTimes2 = 1;  
20.        }  
21.        else  
22.        {  
23.            if(candidate1 == a[i])  
24.                nTimes1++;  
25.            else if(candidate2 == a[i])  
26.                nTimes2++;  
27.            else  
28.            {  
29.                nTimes1--;  
30.                nTimes2--;  
31.            }  
32.        }  
33.    }  
34.    return nTimes1>nTimes2?candidate1:candidate2;  
35.}  
36.  
37.int main()  
38.{  
39.    int a[4]={0,1,2,1};  
40.    cout<<Find(a,4)<<endl;  
41.//  int a[6]={1,0,2,1,2,1};  
42.//  cout<<Find(a,6)<<endl;  
43.}  


4、读者反馈

    当然也可以如本文评论下第16楼dalong7所述：
易知总数必定是偶数，同时删除不同数字，最后剩余的两个数字必有其一为水王，只需简单判断一下即可，
代码如下（测试正确）：



01.int Find(int* a, int N)  //a代表数组，N代表数组长度      
02.{      
03.    int candidate;      
04.    int nTimes, i;      
05.    for(i = nTimes = 0; i < N; i++)      
06.    {      
07.        if(nTimes == 0)      
08.        {      
09.            candidate = a[i], nTimes = 1;      
10.        }      
11.        else      
12.        {      
13.            if(candidate == a[i])      
14.                nTimes++;      
15.            else      
16.                nTimes--;      
17.        }      
18.    }      
19.    
20.    int cTimes = 0;    
21.    int candidate2 = a[N-1];    
22.    for(i = 0; i < N; i ++)    
23.    {    
24.        if(a[i] == candidate)    
25.        {    
26.            cTimes++;    
27.        }    
28.    }    
29.    
30.    return cTimes == N/2 ? candidate : candidate2;       
31.}      
其实上述代码与本文评论下第19楼xiaoyinghao999所述思路基本一致，
    关于加强版水王的题我有个想法可以扫描一遍数组就解决问题：
    首先，水王占总数的一半，说明总数必为偶数；其次，最后一个元素或者是水王，或者不是水王，因此只要在扫描数组的时候每一个元素都与最后一个元素做比较，如果相等则最后一个元素的个数加1，否则不处理。如果最后一个元素的个数为N/2,（N为数组元素个数）则它就是水王，否则水王就是前面N-1个元素中选出的candidate。
代码如下（暂未测试）：



01.int MoreThanHalf(int a[], int N)  
02.{  
03.    int sum1 = 0;//最后一个元素的个数  
04.    int sum2 = 0;  
05.    int candidate;  
06.    int i;  
07.    for(i=0;i<N-1;i++)//扫描前N-1个元素  
08.    {  
09.        if(a == a[N-1])//判断当前元素与最后一个是否相等  
10.        sum1++;  
11.        if(sum2 == 0)  
12.        {  
13.             candidate = a;  
14.             sum2++;  
15.        }  
16.        else  
17.        {  
18.             if(a == candidate)  
19.                 sum2++;  
20.             else  
21.                 sum2--;  
22.        }  
23.     }  
24.  
25.     if((sum1+1) == N/2)  
26.         return a[N-1];  
27.     else  
28.         return candidate;  
29.}  
    特别感谢诸位朋友们的指正，与贡献代码!July、二零一二年九月二十八日。


第二十二章、最短摘要的生成

Alibaba笔试题：给定一段产品的英文描述，包含M个英文字母，每个英文单词以空格分隔，无其他标点符号；再给定N个英文单词关键字，请说明思路并编程实现方法




String extractSummary(String description,String[] key words)


目标是找出此产品描述中包含N个关键字（每个关键词至少出现一次）的长度最短的子串，作为产品简介输出。（不限编程语言）20分。

   这题是来自此篇文章十月百度，阿里巴巴，迅雷搜狗最新面试十一题中整理的阿里巴巴的笔试题，之前已经给出了这样一种思路，如下：

    @owen：扫描过程始终保持一个[left,right]的range,初始化确保[left,right]的range里包含所有关键字则停止。然后每次迭代：

1.试图右移动left，停止条件为再移动将导致无法包含所有关键字。
2.比较当前range's length和best length，更新最优值。
3.右移right，停止条件为使任意一个关键字的计数+1。
4.重复迭代。

    在那篇文章中也提到了编程之美有最短摘要生成的问题，与此问题类似。下面，我将介绍这种方法。首先，咱们来看一个问题。读者可以在百度或谷歌中搜索本博客名称的前4个字，”结构之法“，便会在第一个搜索结果中看到如下图所示的搜索项：





    上图中，那段大致介绍本博客结构之法算法之道的文字：”程序员面试、算法研究、编程艺术、红黑树4大经典原创系列集锦与总结 作者：July--结构之法算法之道blog之博主。时间：2010年10月-2011年6月。出处：http://...“这段介于搜索关键词与最底下的URL便是我们所称之为的摘要。那么，这段摘要是怎么产生的呢?可以对问题进行如下的简化。


1.假设给定的已经是经过网页分词之后的结果，词语序列数组为W。其中W[0], W[1],…, W[N]为一些已经分好的词语。
2.假设用户输入的搜索关键词为数组Q。其中Q[0], Q[1],…, Q[m]为所有输入的搜索关键词。


    这样，生成的最短摘要实际上就是一串相互联系的分词序列。比如从W[i]到W[j]，其中，0<i<j<=N。例如上图所示的摘要“程序员面试、算法研究、编程艺术、红黑树4大经典原创吸了集锦与总结 作者：July--结构之法算法之道blog之博主.....”中包含了关键字——“结构之法”。

    那么，我们该怎么做呢？


思路一：

    在分析问题之前，先通过一个实际的例子来探讨。比如在本博客第一篇置顶文章的开头，有这么一段话：

“程序员面试、算法研究、编程艺术、红黑树4大经典原创系列集锦与总结
作者：July--结构之法算法之道blog之博主。
时间：2010年10月-2011年6月。
出处：http://blog.csdn.net/v_JULY_v。
声明：版权所有，侵犯必究。”


    那么，我们可以猜想一下可能的分词结果：


”程序员/面试/、/算法/研究/、/编程/艺术/、/红黑树/4/大/经典/原创/系列/集锦/与/总结/ /作者/：/July/--/结构/之/法/算法/之/道/blog/之/博主/....“（网页的分词效果W数组）


    这也就是我们期望的W数组序列。

    之前的Q数组序列为：

             “结构之法”（用户输入的关键字Q数组）

    再看下下面这个W-Q序列：

w0,w1,w2,w3,q0,w4,w5,q1,w6,w7,w8,q0,w9,q1

    上述序列上面的是W数组（经过网页分词之后的结果），W[0], W[1],…, W[N]为一些已经分好的词语，

  上述序列下面的是Q数组（用户输入的搜索关键词）。其中Q[0], Q[1],…, Q[m]为所有输入的搜索关键词。

    ok，如果你不甚明白，我说的通俗点：如上W-Q序列中，我们可以把,q0,w4,w5,q1作为摘要，q0,w9,q1的也可以作为摘要，同样都包括了所有的关键词q0，q1，那么选取哪个是最短摘要呢？答案很明显，后一个更短，选取q0,w9,q1的作为最短摘要，这便是最短摘要的生成。

    我们可以进一步可以想象，如下：

    从用户的角度看：当我们在百度的搜索框中输入“结构之法”4个字时，搜索引擎将在索引数据库中（关于搜索引擎原理的大致介绍，可参考本博客中这篇文章：搜索引擎技术之概要预览）查找和匹配这4个字的网页，最终第一个找到了本博客的置顶的第一篇文章：[置顶]程序员面试、算法研究、编程艺术、红黑树4大系列集锦与总结；

   从搜索引擎的角度看：搜索引擎经过把上述网页分词后，便得到了上述的分词效果，然后在这些分词中查找“结构之法”4个关键字，但这4个关键字不一定只会出现一遍，它可能会在这篇文章中出现多次，就如上面的W-Q序列一般。咱们可以假想出下面的结果（结构之法便出现了两次）：

“程序员/面试/、/算法/研究/、/编程/艺术/、/红黑树/4/大/经典/原创/系列/集锦/与/总结/ /作者/：/July/--/结构/之/法/算法/之/道/blog/之/博主/././././转载/请/注明/出处/：/结构/之/法/算法/之/道/CSDN/博客/./././.”


    由此，我们可以得出解决此问题的思路，如下：

1.  从W数组的第一个位置开始查找出一段包含所有关键词数组Q的序列（第一个位置”程“开始：程序员/面试/、/算法/研究/、/编程/艺术/、/红黑树/4/大/经典/原创/系列/集锦/与/总结/ /作者/：/July/--/结构/之/法/查找包含关键字“结构之法”所有关键词的序列）。计算当前的最短长度，并更新Seq数组。
2.  对目标数组W进行遍历，从第二个位置开始，重新查找包含所有关键词数组Q的序列（第二个位置”序“处开始：程序员/面试/、/算法/研究/、/编程/艺术/、/红黑树/4/大/经典/原创/系列/集锦/与/总结/ /作者/：/July/--/结构/之/法/查找包含关键字”结构之法“所有关键词的序列），同样计算出其最短长度，以及更新包含所有关键词的序列Seq，然后求出最短距离。
3.  依次操作下去，一直到遍历至目标数组W的最后一个位置为止。

最终，通过比较，咱们确定如下分词序列作为最短摘要，即搜索引擎给出的分词效果：

    ”程序员面试、算法研究、编程艺术、红黑树4大经典原创系列集锦与总结 作者：July--结构之法算法之道blog之博主。时间：2010年10月-2011年6月。出处：http://...“


    那么，这个算法的时间复杂度如何呢？

    要遍历所有其他的关键词（M），对于每个关键词，要遍历整个网页的词（N），而每个关键词在整个网页中的每一次出现，要遍历所有的Seq，以更新这个关键词与所有其他关键词的最小距离。所以算法复杂度为：O（N^2 * M）。

思路二：


    我们试着降低此问题的复杂度。因为上述思路一再进行查找的时候，总是重复地循环，效率不高。那么怎么简化呢？先来看看这些序列：


w0,w1,w2,w3,q0,w4,w5,q1,w6,w7,w8,q0,w9,q1

    问题在于，如何一次把所有的关键词都扫描到，并且不遗漏。扫描肯定是无法避免的，但是如何把两次扫描的结果联系起来呢？这是一个值得考虑的问题。

    沿用前面的扫描方法，再来看看。第一次扫描的时候，假设需要包含所有的关键词，从第一个位置w0处将扫描到w6处：



w0,w1,w2,w3,q0,w4,w5,q1,w6,w7,w8,q0,w9,q1


    那么，下次扫描应该怎么办呢？先把第一个被扫描的位置挪到q0处。


w0,w1,w2,w3,q0,w4,w5,q1,w6,w7,w8,q0,w9,q1

    然后把第一个被扫描的位置继续往后面移动一格，这样包含的序列中将减少了关键词q0。那么，我们便可以把第二个扫描位置往后移，这样就可以找到下一个包含所有关键词的序列。即从w4扫描到w9处，便包含了q1，q0：


w0,w1,w2,w3,q0,w4,w5,q1,w6,w7,w8,q0,w9,q1

    这样，问题就和第一次扫描时碰到的情况一样了。依次扫描下去，在w中找出所有包含q的序列，并且找出其中的最小值，就可得到最终的结果。编程之美上给出了如下参考代码：

//July、updated，2011.10.21。




01.int nTargetLen = N + 1;           // 设置目标长度为总长度+1  
02.int pBegin = 0;                     // 初始指针  
03.int pEnd = 0;                       // 结束指针  
04.int nLen = N;                       // 目标数组的长度为N  
05.int nAbstractBegin = 0;           // 目标摘要的起始地址  
06.int nAbstractEnd = 0;           // 目标摘要的结束地址  
07.  
08.while(true)  
09.{  
10.    // 假设未包含所有的关键词，并且后面的指针没有越界，往后移动指针  
11.    while(!isAllExisted() && pEnd < nLen)  
12.    {  
13.        pEnd++;  
14.    }  
15.      
16.    // 假设找到一段包含所有关键词信息的字符串  
17.    while(isAllExisted())  
18.    {  
19.        if(pEnd – pBegin < nTargetLen)  
20.        {  
21.            nTargetLen = pEnd – pBegin;  
22.            nAbstractBegin = pBegin;  
23.            nAbstractEnd = pEnd – 1;   
24.        }  
25.        pBegin++;  
26.    }  
27.    if(pEnd >= N)  
28.        Break;  
29.}   


  小结：上述思路二相比于思路一，很明显提高了不小效率。我们在匹配的过程中利用了可以省去其中某些死板的步骤，这让我想到了KMP算法的匹配过程。同样是经过观察，比较，最后总结归纳出的高效算法。我想，一定还有更好的办法，只是我们目前还没有看到，想到，待我们去发现，创造。

思路三：

    以下是读者jiaotao1983回复于本文评论下的反馈，非常感谢。

  关于最短摘要的生成，我觉得July的处理有些简单，我以July的想法为基础，提出了自己的一些想法，这个问题分以下几步解决：

1，将传入的key words[]生成哈希表，便于以后的字符串比较。结构为KeyHash，如下：
struct KeyHash
{
  int cnt;
  char key[];
  int hash;
}
结构体中的hash代表了关键字的哈希值，key代表了关键字，cnt代表了在当前的扫描过程中，扫描到的该关键字的个数。
当然，作为哈希表结构，该结构体中还会有其它值，这里不赘述。
初始状态下，所有哈希结构的cnt字段为0。

2，建立一个KeyWord结构，结构体如下：
struct KeyWord
{
  int start;
  KeyHash* key;
  KeyWord* next;
  KeyWord* prev;
}
key字段指向了建立的一个KeyWord代表了当前扫描到的一个关键字，扫描到的多个关键字组成一个双向链表。
start字段指向了关键字在文章中的起始位置。

3，建立几个全局变量:
  KeyWord* head，指向了双向链表的头，初始为NULL。
  KeyWord* tail，指向了双向链表的尾，初始为NULL。
  int minLen，当前扫描到的最短的摘要的长度，初始为0。
  int minStartPos，当前扫描到的最短摘要的起始位置。
  int needKeyCnt，还需要几个关键字才能够包括全部的关键字，初始为关键字的个数。

4，开始对文章进行扫描。每扫描到一个关键字时，就建立一个KeyWord的结构并且将其连入到扫描到的双向链表中，更新head和tail结构，同时将对应的KeyHash结构中的cnt加1，表示扫描到了关键字。如果cnt由0变成了1，表示扫描到一个新的关键字，因此needKeyCnt减1。

5，当needKeyCnt变成0时，表示扫描到了全部的关键字了。此时要进行一个操作：链表头优化。
链表头指向的word是摘要的起始点，可是如果对应的KeyHash结构中的cnt大于1，表示扫描到的摘要中还有该关键字，因此可以跳过该关键字。因此，此时将链表头更新为下一个关键字，同时，将对应的KeyHash中的结构中的cnt减1，重复这样的检查，直至某个链表头对应的KeyHash结构中的cnt为1，此时该结构不能够少了。

6，如果找到更短的minLength，则更新minLength和minStartPos。

7，开始新一轮的搜索。此时摘除链表的第一个节点，将needKeyCnt加1，将下一个节点作为链表头，同样的开始链表头优化措施。搜索从上一次的搜索结束处开始，不用回溯。就是所，搜索在整个算法的过程中是一直沿着文章向下的，不会回溯。，直至文章搜索完毕。

这样的算法的复杂度初步估计是O(M+N)。

8，另外，我觉得该问题不具备实际意义，要具备实际意义，摘要应该包含完整的句子，所以摘要的起始和结束点应该以句号作为分隔。

这里，新建立一个结构：Sentence，结构体如下：
struct Sentence
{
  int start; //句子的起始位置
  int end; //句子的结束位置
  KeyWord* startKey; //句子包含的起始关键字
  KeyWord* endKey; //句子包含的结束关键字
  Sentence* prev; //下一个句子结构
  Sentence* next; //前一个句子结构
}
扫描到的多个句子结构组成一个链表。增加两个全局变量，分别指向了Sentence链表的头和尾。

扫描时，建立关键字链表时，也要建立Sentence链表。当扫描到包含了所有的关键字时，必须要扫描到一个完整句子的结束。开始做Sentence头节点优化。做法是：查看Sentence结构中的全部key结构，如果全部的key对应的KeyHash结构的cnt属性全部大于1，表明该句子是多余的，去掉它，去掉它的时候更新对应的HashKey结构的关键字，因为减去了很多的关键字。然后对下一个Sentence结构做同样的操作，直至某个Sentence结构是必不可少的，就是说它包含了当前的摘要中只出现过一次的关键字！

扫描到了一个摘要后，在开始新的扫描。更新Sentence链表的头结点为下一个节点，同时更新对应的KeyHash结构中的cnt关键字，当某个cnt变成0时，就递增needKeycnt变量。再次扫描时仍然是从当前的结束位置开始扫描。
初步估计时间也是O(M+N)。

  ok，留下一个编程之美一书上的扩展问题：当搜索一索一个词语后，有许多的相似页面出现，如何判断两个页面相似，从而在搜索结果中隐去这类结果？ 



  本文参考：
1.编程之美第二章第2.3节寻找发帖水王；
2.编程之美第三章第3.5节最短摘要的生成；
3.http://zhedahht.blog.163.com/blog/static/25411174201085114733349/。

后记

   编程艺术系列从今年4月开始创作，已写了二十二章。此系列最初是我一个人写，后来我的一些朋友加入进来了，便成立了程序员编程艺术室，是我和一些朋友们一起写了，但到如今一直在坚持的又只剩下自己了。近些天，常常发呆胡乱思考一些东西，如个人写博刚过一年，有时候也看得一些有关互联网创业的文章，便有了下面写博VS创业这个话题：
1.读者第一（用户至上）；
2.站在读者角度和思维方式阐述问题，文不易懂死不休（重视用户体验，用户不喜欢不会用的产品便是废品）；
3.只写和创作读者最最需要的文章，东西（别人不需要，便没有市场，没有市场，一切免谈）；
4.写博贵在坚持（创业贵在坚持）。

  编程艺术系列一如之前早已说过，“因为编程艺术系列最后可能要写到第六十章”（语出自：程序员编程艺术第一~十章集锦与总结--面试、算法、编程）。期待，编程艺术室的朋友能早日继续加入共同创作。以诸君为傲。ok，若有任何问题，欢迎随时不吝指正。转载请注明出处。完。July、2011.10。
 
分享到： 

上一篇：十月下旬腾讯，网易游戏，百度迅雷校园招聘笔试题集锦(第271-330题)
下一篇：从Trie树（字典树）谈到后缀树（10.28修订）
 .
顶44踩1. 


查看评论
 
24楼 mika_sleeping 2013-04-08 13:36发表[回复] 回复mika_sleeping：我刚开始看这个帖子，第一个find函数有点问题，没有存过你的数据的a[1]的值23楼 linlintu 2012-12-08 08:59发表[回复] 你能不装逼吗22楼 zxt5105515 2012-11-03 16:44发表[回复] 加强版水王每次删除3个不同的，恩恩21楼 JJdoo 2012-10-03 10:31发表[回复] 3、持续改进中的算法应该是求出的出现次数大于N/3的帖子。请楼主测试一下int a[10]={0,1,2,1,1,1,5,6,7,2};20楼 v_JULY_v 2012-08-30 13:26发表[回复] zph_seu，编程艺术21章bug
“赤血红狐用了两个变量来记录水王”这段程序若输入为 a[4]={1,1,2,0};则无法输出正确结果Re: v_JULY_v 2012-09-28 16:23发表[回复] 回复v_JULY_v：bug已经修正，感谢诸位朋友！19楼 v_JULY_v 2012-07-19 14:09发表[回复] 加强版水王

发件人：xiaoyinghao999
时间：2012-07-16 23:31:10
楼主您好！抱歉打扰，我第一次评论，由于一直出错，在评论区修改了三次，系统提示不能再评论了，只好给您发私信，关于加强版水王的题我有个想法可以扫描一遍数组就解决问题：
首先，水王占总数的一半，说明总数必为偶数；其次，最后一个元素或者是水王，或者不是水王，因此只要在扫描数组的时候每一个元素都与最后一个元素做比较，如果相等则最后一个元素的个数加1，否则不处理。如果最后一个元素的个数为N/2,（N为数组元素个数）则它就是水王，否则水王就是前面N-1个元素中选出的candidate。代码如下：
int MoreThanHalf(int a[], int N)
{
int sum1 = 0;//最后一个元素的个数
int sum2 = 0;
int candidate;
int i;
for(i=0;i<N-1;i++)//扫描前N-1个元素
{
if(a[i] == a[N-1])//判断当前元素与最后一个是否相等
sum1++;
if(sum2 == 0)
{
candidate = a[i];
sum2++;
}
else
{
if(a[i] == candidate)
sum2++;
else
sum2--;
}
}
if((sum1+1) == N/2)
return a[N-1];
else
return candidate;
}
不知道思路有没有漏洞，请楼主指教！Re: lufthansa 2012-08-29 20:22发表[回复] 回复v_JULY_v：这个不错，比那个两个candidate的容易理解多了。Re: v_JULY_v 2012-09-28 16:39发表[回复] 回复lufthansa：EN，是的，与本文评论下第16楼dalong7所述的思路基本一致（暂未测试）。18楼 pointersky 2012-05-27 11:34发表[回复] 博主，您好！
看了您的文章很受用，关于发帖水王的程序，我有两个小小的疑问。
① 求解发帖水王，改编自编程之美的程序，我觉得在程序最后加上nTimes的判断，以此判断输入是否符合要求；
int Find(int* ID,int N)
{
// 前面处理一样
if(nTimes > 0)
return candidate;
else
return -1;
}

② 关于 赤血红狐用了两个变量来记录水王，当测试数据为{1,1,2,0}时，程序输出错误，我觉得程序可以加上第二个变量是否等于第一个变量的判断，以此消除BUG：
#include<iostream>
using namespace std;

int Find(int* a, int N)
{
int candidate1,candidate2;
int nTimes1, nTimes2, i;

for(i = nTimes1 = nTimes2 =0; i < N; i++)
{
if(nTimes1 == 0)
{
candidate1 = a(i), nTimes1 = 1;
}
else if(nTimes2 == 0 && candidate1 != a(i))
{

candidate2 = a(i), nTimes2 = 1;
}
else
{
if(candidate1 == a(i))
nTimes1++;
else if(candidate2 == a(i))
nTimes2++;
else
{
nTimes1--;
nTimes2--;
}
}
}
return nTimes1>nTimes2?candidate1:candidate2;
}Re: v_JULY_v 2012-05-28 05:12发表[回复] 回复pointersky：EN，好的，多谢17楼 歌神的卖 2012-05-12 16:35发表[回复] 感谢博主16楼 v_JULY_v 2012-05-06 23:01发表[回复] 今天在上csdn的时候看到了你的博客，下载了"程序员编程艺术第一~二十七章集锦与总结“ pdf 版
 看了几个章节，写的挺好的。我说几个问题
1. 第二十一：出现次数超过一半的数字
第二节 加强版水王：找出出现次数刚好是一半的数字
其中 赤血红狐 用两个变量来记录水王的程序是有问题的
比如输入是 {1,1,2,1,1,3,1,1,4,1,1,5,6,7,8,9} 时就会出错。
我的想法是：既然出现次数刚好是一半，那么我们我们假设数列中至少出现了三个不同的数字(假如只出现了两个数字，即这两个数字各占一半，这种情况比较简单，容易判断)。我们只要从这个数列中删除三个不同的数字(无论这个数列中共有多少个不同的数字，只要不是两个数字)，就可以保证有一个数字的出现次数超过一半，就可以用出现次数超过一半时所用的方法了。
 何孟飞Re: dalong7 2012-05-12 11:40发表[回复] 回复v_JULY_v：水王加强版：易知总数必定是偶数，同时删除不同数字，最后剩余的两个数字必有其一为水王，只需简单判断一下即可
修改Find函数如下：




01.int Find(int* a, int N)  //a代表数组，N代表数组长度    
02.{    
03.    int candidate;    
04.    int nTimes, i;    
05.    for(i = nTimes = 0; i < N; i++)    
06.    {    
07.        if(nTimes == 0)    
08.        {    
09.            candidate = a[i], nTimes = 1;    
10.        }    
11.        else    
12.        {    
13.            if(candidate == a[i])    
14.                nTimes++;    
15.            else    
16.                nTimes--;    
17.        }    
18.    }    
19.  
20.    int cTimes = 0;  
21.    int candidate2 = a[N-1];  
22.    for(i = 0; i < N; i ++)  
23.    {  
24.        if(a[i] == candidate)  
25.        {  
26.            cTimes++;  
27.        }  
28.    }  
29.  
30.    return cTimes == N/2 ? candidate : candidate2;     
31.}    
Re: v_JULY_v 2012-09-28 16:17发表[回复] 回复dalong7：Good，我测试了你的代码，是正确的，多谢！15楼 DarkKaiser 2012-03-21 14:17发表[回复] 找出出现次数刚好是一半的最终解法貌似有点儿问题啊，下面这段代码：
if(nTimes1 == 0)
{
 candidate1 = a[i], nTimes1 = 1;
}
else if(nTimes2 == 0)
{

 candidate2 = a[i], nTimes2 = 1;
}
else
{
 if(candidate1 == a[i])
 nTimes1++;
 else if(candidate2 == a[i])
 nTimes2++;
 else
 {
 nTimes1--;
nTimes2--;
 }
}
如果序列为1,1,3,4,1,1,2,2的话，开始的两个1会分别记录在candidate1和candidate2上，导致最终结果有问题。14楼 yuecjn 2012-03-10 13:45发表[回复] 思路二还是有很多地方没有考虑周全的。
比如：有序列：w0,w1,w2,w3,q0,w4,,q0,w5,q1,w6,w7,w8,q0,w9,q1
搜索到序列：
w0,w1,w2,w3,q0,w4,q0,w5,q1
下一步取舍显然不会是丢弃q0然后向q1后面搜索，而是应该对q0到q1这一段进行搜索，确定其最短序列。因为其中q值必然会有重复，只有最后最后一个q值不会重复。确定最短序列后，末尾仍然是q1，从q1后开始搜索13楼 newrain021011 2012-01-09 21:58发表[回复] int a[] = {4,4,4,4,5,5,5,5,1}; 那就很悲惨了。12楼 tenger_lee 2012-01-05 22:32发表[回复] 你好，从你的文章中学到很多，非常感谢！不过关于发帖水王加强问题的最后代码，个人觉得对于像111234和102121这样的数组并不能给出正确结果。我想如下修改是否可行呢？在普通问题的程序的基础上后面加上这样一段
if(nTimes==0)
 {
 int j;
 for(j=0;j<N-2;)
 {
 if(a[N-1]==a[j]||a[N-1]==a[j+1])
 j=j+2;
 else
 break;
 }
 if(j==N-2)
 candidate=a[N-1];
 }
 return candidate;
如有错误，请大家指正。Re: v_JULY_v 2012-01-06 12:03发表[回复] 回复tenger_lee：我测试下了你的代码，据结果来看是对的。但你O（N^2）的复杂度，则就高了点11楼 Endoresu 2011-12-22 21:10发表[回复] 找出出现次数刚好是一半的数字，
int j;
for(j=1;j<N-2;)
{
 if(a[j]==a[j+2])
 j=j+2;
 else
 break;
}
//我觉得这里应该是j<N，还有你这个算法的意思是不是判断奇数为的数字都是一样，如果是的话，这样一个数列11112345或者23451111可以判断出来吗。
我觉得还不如统计一遍candidate是不是达到半数Re: v_JULY_v 2012-01-06 12:07发表[回复] 回复Endoresu：改成j<N，也不对10楼 jiaotao1983 2011-11-13 12:50发表[回复] 扫描时，建立关键字链表时，也要建立Sentence链表。当扫描到包含了所有的关键字时，必须要扫描到一个完整句子的结束。开始做Sentence头节点优化。做法是：查看Sentence结构中的全部key结构，如果全部的key对应的KeyHash结构的cnt属性全部大于1，表明该句子是多余的，去掉它，去掉它的时候更新对应的HashKey结构的关键字，因为减去了很多的关键字。然后对下一个Sentence结构做同样的操作，直至某个Sentence结构是必不可少的，就是说它包含了当前的摘要中只出现过一次的关键字！

扫描到了一个摘要后，在开始新的扫描。更新Sentence链表的头结点为下一个节点，同时更新对应的KeyHash结构中的cnt关键字，当某个cnt变成0时，就递增needKeycnt变量。再次扫描时仍然是从当前的结束位置开始扫描。
初步估计时间也是O(M+N)。Re: v_JULY_v 2011-11-14 10:09发表[回复] 回复jiaotao1983：辛苦了，我把你的回复更新到原文章中去。谢谢你。9楼 jiaotao1983 2011-11-13 12:50发表[回复] 5，当needKeyCnt变成0时，表示扫描到了全部的关键字了。此时要进行一个操作：链表头优化。
链表头指向的word是摘要的起始点，可是如果对应的KeyHash结构中的cnt大于1，表示扫描到的摘要中还有该关键字，因此可以跳过该关键字。因此，此时将链表头更新为下一个关键字，同时，将对应的KeyHash中的结构中的cnt减1，重复这样的检查，直至某个链表头对应的KeyHash结构中的cnt为1，此时该结构不能够少了。

6，如果找到更短的minLength，则更新minLength和minStartPos。

7，开始新一轮的搜索。此时摘除链表的第一个节点，将needKeyCnt加1，将下一个节点作为链表头，同样的开始链表头优化措施。搜索从上一次的搜索结束处开始，不用回溯。就是所，搜索在整个算法的过程中是一直沿着文章向下的，不会回溯。，直至文章搜索完毕。

这样的算法的复杂度初步估计是O(M+N)。


另外，我觉得该问题不具备实际意义，要具备实际意义，摘要应该包含完整的句子，所以摘要的其实和结束点应该以句号作为分隔。

这里，新建立一个结构：Sentence，结构体如下：
struct Sentence
{
 int start; //句子的起始位置
int end; //橘子的结束位置
KeyWord* startKey; //句子包含的起始关键字
KeyWord* endKey; //句子包含的结束关键字
Sentence* prev; //下一个句子结构
Sentence* next; //前一个句子结构
}
扫描到的多个句子结构组成一个链表。增加两个全局变量，分别指向了Sentence链表的头和尾。8楼 jiaotao1983 2011-11-13 12:49发表[回复] 关于最短摘要的生成，我觉得作者的处理有些简单，我以作者的想法为基础，提出了自己的一些想法，这个问题分以下几步解决：

1，将传入的key words[]生成哈希表，便于以后的字符串比较。结构为KeyHash，如下：
struct KeyHash
{
 int cnt;
 char key[];
 int hash;
}
结构体中的hash代表了关键字的哈希值，key代表了关键字，cnt代表了在当前的扫描过程中，扫描到的该关键字的个数。
当然，作为哈希表结构，该结构体中还会有其它值，这里不赘述。
初始状态下，所有哈希结构的cnt字段为0。

2，建立一个KeyWord结构，结构体如下：
struct KeyWord
{
 int start;
 KeyHash* key;
 KeyWord* next;
 KeyWord* prev;
}
key字段指向了建立的一个KeyWord代表了当前扫描到的一个关键字，扫描到的多个关键字组成一个双向链表。
start字段指向了关键字在文章中的起始位置。

3，建立几个全局变量:
KeyWord* head，指向了双向链表的头，初始为NULL。
KeyWord* tail，指向了双向链表的尾，初始为NULL。
int minLen，当前扫描到的最短的摘要的长度，初始为0。
int minStartPos，当前扫描到的最短摘要的起始位置。
int needKeyCnt，还需要几个关键字才能够包括全部的关键字，初始为关键字的个数。

4，开始对文章进行扫描。每扫描到一个关键字时，就建立一个KeyWord的结构并且将其连入到扫描到的双向链表中，更新head和tail结构，同时将对应的KeyHash结构中的cnt加1，表示扫描到了关键字。如果cnt由0变成了1，表示扫描到一个新的关键字，因此needKeyCnt减1。7楼 dlengong 2011-10-23 10:12发表[回复] 博主辛苦了，这种精神值得发扬6楼 jiale 2011-10-22 16:50发表[回复] 我们知道，既然是数组的话，那么我们可以根据数组索引支持直接定向到某一个数。我们发现，一个数字在数组中的出现次数超过了一半，那么在数组索引的N/2处（从零开始编号），就一定是这个数字。
-----------------------------------
那我就做一个数组，把数组索引的N/2处设置为1，其余都设为0，
很明显 你的推断是错误的。
这个是低级的推断。。。。Re: v_JULY_v 2011-10-22 17:37发表[回复] 回复jiale：兄弟未看仔细，原文中这个结论是在数组已经经过排序后得出的。5楼 jiale 2011-10-22 16:47发表[回复] 我们知道，既然是数组的话，那么我们可以根据数组索引支持直接定向到某一个数。我们发现，一个数字在数组中的出现次数超过了一半，那么在数组索引的N/2处（从零开始编号），就一定是这个数字。

------我做个数组 N=4
数组编号：1 2 3 4 
数据 0 1 0 0
组索引的N/2 怎么会是0 呢？ 好像不对。Re: yaomanhai 2011-10-24 10:23发表[回复] 回复jiale：都说了是排好序的... 不仔细啊~4楼 yunfei8yunfei 2011-10-22 14:37发表[回复] 看么这么多，感觉这个最结合现实，看着很有劲，不像老师讲的枯燥无味3楼 liubing_2010 2011-10-22 11:10发表[回复] 代码里有个注释应该是: 假设 未 包含所有的关键词，并且后面的指针没有越界，往后移动指针 吧？Re: v_JULY_v 2011-10-22 12:24发表[回复] 回复liubing_2010：哈哈，恩，是的。2楼 不懂就要问 2011-10-21 11:05发表[回复] 恩，受教了1楼 ohmygirl 2011-10-20 12:38发表[回复] hello,July
关于思路2：自此，我们只需要对整个数组排完序之后，然后直接输出数组中的第N/2处的数字即可。
如果利用快速排序的一次划分，那么超过一半的这个数字是否一定会出现在数组的中间位置呢？
如果是，那么时间复杂度是否也是O(N)呢？
刚学习算法不久，请指教Re: swagle 2012-02-01 17:11发表[回复] 回复ohmygirl：快速排序与元素值大小有关，与元素出现次数无关。快速排序对本问题不适合。Re: chong_boy 2011-10-22 00:24发表[回复] 回复ohmygirl：你是对的。如果你是在校生，也想学算法，建议参加ACM。一年后再回头看看这些。最后，貌似学好c/c++、算法等会比较容易找到好工作，至少今年是。good luck。Re: v_JULY_v 2011-10-20 17:03发表[回复] 回复ohmygirl：不是的。快速排序第一次划分只是以枢纽元为中心把左小右大的数做了一次区分而已。此时，N/2处的数字不代表什么。只有完整对整个数组排完序之后，才能确定数组中出现次数超过一半的数字，即在N/2处。Re: sticker1gb 2011-10-20 19:40发表[回复] 回复v_JULY_v：1.快排[left, right]找到枢纽元位置p
2.如果p==N/2，则终止，否则3
3.N/2位于[left,p-1]则排左边，否则排右边，重复1

T(N)=O(N)+T(N/2)=O(N)+O(N/2)+T(N/4)=O(N)+O(N/2)+O(N/4)...
=2*O(N)-2*O(N)(1/2)^logN
=O(N)
随手写，可能有笔误，但可证得是O(N)的Re: sticker1gb 2011-10-20 19:34发表[回复] 回复v_JULY_v：我觉得ohmygirl 的想法是有部分对的，枢纽元的位置确定后是不会再更改，如果运气好某次碰到枢纽元位置刚好是N/2，那排序就可以直接结束。比如{0,1,[1],2,1}，虽然数组任然无序，但是结果已经出来的。
其实这题最后的本质就是找中位数，july自己不会忘了SELECT算法吧。。。。Re: Antineutrino 2011-10-25 11:28发表[回复] 回复sticker1gb：表示对“运气好”三个字无语
 


您还没有登录,请[登录]或[注册]
 
* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场
 








个人资料 

v_JULY_v 






访问：4195724次
积分：25982分
排名：第50名
 . 原创：134篇
转载：0篇
译文：5篇
评论：10137条
 . 
博客公告 ①.本blog开通于2010年10月11日，高级C /Algorithms交流群：149977547；北京程序员联盟：172727781。②.狂热算法，热爱数据挖掘，关注机器学习、统计分析，爱好文学数学。③.微博：研究者July，邮箱：zhoulei0907@yahoo.cn，July，二零一三年三月二十九日。 
我的微博 
文章分类 03.Algorithms（实现）(9) 
01.Algorithms（研究）(27) 
02.Algorithms（后续）(22) 
04.Algorithms（讨论）(1) 
05.MS 100' original(7) 
06.MS 100' answers(13) 
07.MS 100' classify(4) 
08.MS 100' one Keys(6) 
09.MS 100' follow-up(3) 
10.MS 100' comments(4) 
11.TAOPP（编程艺术）(26) 
12.TAOPP string(6) 
13.TAOPP array(10) 
14.TAOPP list(2) 
15.stack/heap/queue(0) 
16.TAOPP tree(1) 
17.TAOPP c/c++(2) 
18.TAOPP function(2) 
19.TAOPP algorithms(7) 
20.number operations(1) 
21.Essays(8) 
22.Big Data Processing(5) 
23.Redis/MongoDB(0) 
24.data structures(12) 
25.Red-black tree(7) 
26.Image Processing(3) 
27.Architecture design(4) 
28.Source analysis(3) 
29.Recommend&Search(4) 
30.Machine L&Data Mining(5) 

博客专栏




微软面试100题系列
文章：17篇
阅读：1246124 





程序员编程艺术
文章：24篇
阅读：859726 





经典算法研究
文章：32篇
阅读：1110619 

阅读排行 程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦(186273) 
九月十月百度人搜，阿里巴巴，腾讯华为笔试面试八十题(第331-410题)(141620) 
教你如何迅速秒杀掉：99%的海量数据处理面试题(137467) 
横空出世，席卷互联网--评微软等公司数据结构+算法面试100题(127654) 
从B树、B+树、B*树谈到R 树(122031) 
十道海量数据处理面试题与十个方法大总结(101550) 
九月腾讯，创新工场，淘宝等公司最新面试三十题（第171-200题）(87335) 
十一、从头到尾彻底解析Hash表算法(78390) 
微软公司等数据结构+算法面试100题(第1-100题)全部出炉(75917) 
支持向量机通俗导论（理解SVM的三层境界）(74618) 

评论排行 程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦(371) 
九月十月百度人搜，阿里巴巴，腾讯华为笔试面试八十题(第331-410题)(361) 
九月腾讯，创新工场，淘宝等公司最新面试三十题（第171-200题）(331) 
当今世界最为经典的十大算法--投票进行时(320) 
从B树、B+树、B*树谈到R 树(264) 
横空出世，席卷互联网--评微软等公司数据结构+算法面试100题(263) 
十三个经典算法研究与总结、目录+索引(216) 
我的大学生涯(214) 
程序员编程艺术第一章、左旋转字符串(203) 
三五杆枪，可干革命，三五个人，可以创业(198) 

最新评论 程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦
v_JULY_v: @q1w2ok11:替我感谢你的同事:-) 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦
q1w2ok11: 同事推荐，太给力了，必须好好学习，楼主辛苦 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦
kiritor: 谢谢博主的分享,先收藏了 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦
v_JULY_v: @zhouqinxiong:哪个学校呢？替我谢谢你的老师:-) 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦
zhouqinxiong: 老师推荐的，lz，你的博客非常给力 

快速排序算法
康天崽: 太给力了，我喜欢，爱死你了 

我的大学生涯
msjcool: 看完楼主的经历，感觉自己弱爆了 

B树的C实现
hao138548: 好贴 

教你如何迅速秒杀掉：99%的海量数据处理面试题
xiyandeng: 虽然看得不是很懂，以后可以慢慢消化！感谢博主啊 

程序员编程艺术第一章、左旋转字符串
dusx1981: void RightShift4(string &str, int k){ int len = st... 


01、本blog索引 3、微软100题维护地址
1、微软100题横空出世
5、经典算法研究系列
7、红黑树系列集锦
6、程序员编程艺术系列
2、微软面试全部100题
0、经典4大原创系列集锦
4、微软100题下载地址
 
02、Google or baidu? Google搜--"结构之法"（My BLOG）
baidu 搜--"结构之法"（My BLOG）
 
03、个人标签 本BLOG RSS订阅
zhoulei0907@yahoo.cn
csdn blog订阅排行榜
TAOPP修订wiki
julymsn@live.cn
电子工程网专家VIP
 博客园blog-成为推荐博客
 ITpub-代码优化专家
 
04、我的驻点 01. 为学论坛-万物皆数 终生为学
 02、Harry
 03、NoSQLFan
 04、酷勤网
 05、52nlp
 06、北大朋友的挖掘乐园
 07、跟Sophia_qing一起读硕士
 08、面试问答社区51nod
 09、韩寒
 10、我的有鱼
 11、曾经的叛逆与年少
 12、老D之MongoDB源码分析
 14、code4app:iOS代码示例
 17、斯坦福机器学习公开课
 18、TheItHome算法版块版主
 19、36氪--关注互联网创业
 20、德问--编程是一种艺术创作
 21、善科网
 22、百度搜索研发部
 23、淘宝搜索技术博客
 24、interviewstreet
 25、LeetCode
 26、Team_Algorithms人人小组
 
文章存档 
2013年03月(1).
2012年12月(1).
2012年11月(1).
2012年09月(1).
2012年06月(1).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

展开.
 

. 
公司简介|招贤纳士|广告服务|银行汇款帐号|联系方式|版权声明|法律顾问|问题报告QQ客服 微博客服 论坛反馈 联系邮箱：webmaster@csdn.net 服务热线：400-600-2320京 ICP 证 070598 号北京创新乐知信息技术有限公司 版权所有世纪乐知(北京)网络技术有限公司 提供技术支持江苏乐知网络技术有限公司 提供商务支持Copyright © 1999-2012, CSDN.NET, All Rights Reserved  
