



争气
 
静心方能尽力...

 
首页
 博问
 闪存
 
联系
 订阅 
管理
 
随笔-26  文章-0  评论-39  






华为机试第三篇




备注，本人博客上与找工作有关的文章的doc以及答案均已上传至本人网络硬盘，并持续更新，需要共享的点这里，给我留言【留言形式为你的邮箱】
 
一：给定一个字符串，寻找它的一个最大子字符串，该子字符串是回文。例如给定一个用例的字符串”gabcdcbaef”,那么最大回文 
字串是”abcdcba”
函数声明为void huiwen(char input[], int len, char output[])
 



?




1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36 



//如果是回文字符串，那么从字符串的最中间向两头分别遍历，则应该都是相等的

void huiwen(char input[],int len, char output[])

{

    //start表示回文字串的起始位置

    int max=0,left=0,start=0,left1=0;

    for(int i=0;i<len;i++)

    {

        for(int t=0;t<=i;++t)//奇数

        {

            if(i+t>len)//避免发生了越界访问

                break;

            if(input[i-t]!=input[i+t])//从中间向两边遍历

                break;

            else

                ++left;

        }

        for(int t1=0;t1<=i;++t1)//偶数

        {

            if(i+t1-1>len)//避免发生了越界访问

                break;

            if(input[i-t1]!=input[i+t1+1])//从中间向两边遍历

                break;

            else

                ++left1;

        }

        int maxLeft=left>left1?(2*left-1):(2*left1);

        if(maxLeft>max)

        {

            max=maxLeft;

            start=i-maxLeft/2+1;//获取其起始地址

        }

        left=0;

        left1=0;

    }

    memcpy(output,input+start,max);

} 


　　
 
二：删除字符串中所有给定的子串
 
问题描述： 在给定字符串中查找所有特定子串并删除，若是没有找到响应子串，则不作任何操作。要求实现函数： 
int delete_sub_str(const char *str, const char *sub_str, char *result_str)
输入: str：输入的被操作字符串
sub_str：需要查找并删除的特定子字符串
输出: result_str：在str字符串中删除所有sub_str子字符串后的终局
返回: 删除的子字符串的个数
子串匹配只考虑最左匹配情况，即只需要从左到右进行字串匹配的情况。比如：在字符串"abababab"中，采用最左匹配子串"aba", 
可以匹配2个"aba"字串。若是匹配出从左到右位置2起头的"aba"，则不是最左匹配，且只能匹配出1个"aba"字串。输入字符串不会 
跨越100 Bytes，请不用考虑超长字符串的情况。
示例 
输入：str = "abcde123abcd123"
sub_str = "123"
输出：result_str = "abcdeabcd"
返回：2
输入：str = "abcde123abcd123"
sub_str = "1234"
输出：result_str = "abcde123abcd123"
返回：0
 



?




1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20 



int delete_sub_str(const char *str, const char *sub_str, char *result_str)

{

    int len=strlen(sub_str);//获取子串的长度

    int cnt=0,index=0;

    for(int t=0;t<strlen(str);++t)

    {

        for(int j=0;j<len;j++)

            if(str[t+j]!=sub_str[j])

                break;

        if(j>=len)

        {

             ++cnt;

             t=t+len-1;//删除子串

        }

        else

        result_str[index++]=str[t];

    }

    result_str[index]='\0';

    return cnt;

} 


　　
 
三：在计算机中，由于位宽限制，只能进行有限精度的十进制整数加减法，比如在32位宽计算机中，参与运算的操作数和结果必须 
在-231~231-1之间。若是需要进行更大规模的十进制整数加法，需要使用特殊的方法实现，比如使用字符串保存操作数和结果，采 
纳逐位运算的方式进行。如下：9876543210 + 1234567890 = ?，让字符串 num1="9876543210"，字符串 num2="1234567890"，结果
 保存在字符串 result = "11111111100"。-9876543210 + (-1234567890) = ?让字符串 num1="-9876543210"，字符串 num2="-
 1234567890"，终局保存在字符串 result = "-11111111100"。
要求编程实现上述高精度的十进制加法。
要求实现函数： 
void add (const char *num1, const char *num2, char *result)
输入：num1：字符串形式操作数1，若是操作数为负，则num1[0]为符号位-
num2：字符串形式操作数2，若是操作数为负，则num2[0]为符号位-
输出：result：保存加法计较终局字符串，若是终局为负，则result[0]为符号位。
 当输入为正数时，+不会出今朝输入字符串中；当输入为负数时，-会出今朝输入字符串中，且必然在输入字符串最左边位置
 输入字符串所有位均代表有效数字，即不存在由0起头的输入字符串，比如"0012", "-0012"不会呈现；
 要求输出字符串所有位均为有效数字，终局为正或0时+不出今朝输出字符串，终局为负时输出字符串最左边位置为-。
 



?




1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

40

41

42

43

44

45

46

47

48

49

50

51

52

53

54

55

56

57

58

59

60

61

62

63

64

65

66

67

68

69

70

71

72

73

74

75

76

77

78

79

80

81

82

83 



//只考虑同号的情况下，不同号情况类似【程序有点冗长，共同改进】

void add (const char *num1, const char *num2, char *result)

{

    int len1=strlen(num1),len2=strlen(num2),flag=0;

    if((num1[0]=='-'&&num2[0]!='-')||(num1[0]!='-'&&num2[0]=='-1'))//同为正数

        return ;

    const char *p1=num1+strlen(num1)-1,*p2=num2+strlen(num2)-1;

    if(num1[0]=='-'&&num2[0]=='-')

    {

        num1++;

        num2++;

        p1=num1+strlen(num1)-1;

        p2=num2+strlen(num2)-1;

    }

    int max=_cpp_max(len1,len2);

    int index=0,carry=0;

    for(int i=0;i<max;i++)

    {

        if(p1>=num1&&p2>=num2)

        {

            int tmp=*p1-48+*p2-48+carry;

            if(tmp>=10)

            {

                result[index++]=tmp-10+48;

                carry=1;

            }

            else

            {

                result[index++]=tmp+48;

                carry=0;

            }

            p1--;

            p2--;

        }

        else if(p1>=num1&&p2<num2)

        {

            int tmp=*p1-48+carry;

            if(tmp>=10)

            {

                result[index++]=tmp-10+48;

                carry=1;

            }

            else

            {

                result[index++]=tmp+48;

                carry=0;

            }

            p1--;

        }

        else if(p1<num1&&p2>=num2)

        {

            int tmp=*p2-48+carry;

            if(tmp>=10)

            {

                result[index++]=tmp-10+48;

                carry=1;

            }

            else

            {

                result[index++]=tmp+48;

                carry=0;

            }

            p2--;

        }

    }

    if(*(num1-1)=='-'&&*(num2-1)=='-')

        result[index++]='-';

    result[index]='\0';

    int left=strlen(result)/2;

    if(strlen(result)%2==0)

    {

        left=left-1;

        result[left]=result[left]^result[left+1];

        result[left+1]=result[left]^result[left+1];

        result[left]=result[left]^result[left+1];

    }

    for(int l=0;l<left;l++)

    {

        int tmp=result[l];

        result[l]=result[strlen(result)-l-1];

        result[strlen(result)-l-1]=tmp;

    }

} 






分类: 找工作--华为篇
 

绿色通道： 好文要顶 关注我 收藏该文与我联系 




星空雾雨
 关注 - 1
 粉丝 - 39 



+加关注 


4

0


 (请您对文章做出评价) 


« 博主上一篇：谷歌笔试第一篇
» 博主下一篇：华为机试第四篇
« 首页上一篇：C++继承
» 首页下一篇：稍微深入点理解C++复制控制

 
posted @ 2012-11-02 09:53 星空雾雨 阅读(1957) 评论(13) 编辑 收藏
 


评论列表
 



  
#1楼2012-11-02 11:37 hansong1989  

你好，我认为第一题可以有另外一种思路：那就是将源串input反转得到input2，然后对input和input2求最大公共子序列，得到的最大公共子序列也就是目地串了。至于求最大公共子序列是一个经典问题了，所以代码也就不附加了。
如：input=“gabcdcbaef”，input2="feabcdcbag"，对input和input2求最大公共子序列得到：output=“abcdcba”。

支持(5)反对(0)



   
#2楼2012-11-02 12:50 calvinK  

@hansong1989
受教

支持(0)反对(0)



   
#3楼2012-11-02 13:31 Iyanzi  

1楼大牛！！

支持(0)反对(0)



   
#4楼2012-11-02 15:08 滴答的雨  

1楼的方法思路很清楚……

悲催，听起来好像很明确，刚找了下最大公共子序列的算法，一看，发现没看懂！！！

支持(0)反对(0)



   
#5楼2012-11-02 16:01 nealgaga  

第二个题可否再引入kmp算法提高效率

支持(0)反对(0)



   
#6楼2012-11-02 16:27 byfei  

比较好理解的解法
map <char,int> char2int;
map <int,char> int2char;
void Init()
{
 for(int i = 0;i<10;i++)
 {
 char CData = (char)(i+48);
 char2int[CData] = i;
 int2char[i] = CData;
 }
}

char * Reverse(const char *strStc,char*strDest)
{
 int nLen = strlen(strStc);
 int i = 0;
 for(nLen;0 <= nLen;nLen--)
 {
strDest[i]= strStc[nLen-1];
 i++;
 }
 strDest[i]='\0';
 return strDest;
}

void add (const char *num1, const char *num2, char *result)
{
 int nLenNum1 = strlen(num1);
 int nLenNum2 = strlen(num2);
 char ReverseNum1 [100] ={'0'};
 char ReverseNum2 [100] ={'0'};
 char ReverseResult [100] = {'0'};
 Reverse(num1,ReverseNum1);
 Reverse(num2,ReverseNum2);
 int nLen = nLenNum1 > nLenNum2 ? nLenNum1:nLenNum2;
 for(int i=0;i<nLen;i++)
 {
 int nResult = char2int[ReverseNum1[i]] + char2int[ReverseNum2[i]] 
+ char2int[result[i]];
 result[i] = int2char[nResult%10];
 result[i+1] = int2char[nResult/10];
 }
 strcpy(ReverseResult,result);
 Reverse(ReverseResult,result);

}

支持(0)反对(0)



   
#7楼2012-11-02 16:29 dytes  

@hansong1989
这个方法很犀利！

支持(0)反对(0)



   
#8楼2012-11-02 17:42 潇洒一回  

@hansong1989
一楼好强大

支持(0)反对(0)



   
#9楼2012-11-02 21:38 76er  

嗯，厉害

支持(0)反对(0)



   
#10楼2012-11-02 23:01 izhangxu  

@hansong1989
初级菜鸟请教求“最大公共子序列”算法~~

支持(0)反对(0)



   
#11楼2012-11-02 23:06 hansong1989  

本人不是有意拍板砖，恕我直言，LZ第一题的算法是错误的或者说有致命的缺陷，请听我分析。
首先明确一个概念，回文字符串是正序遍历和反序遍历完全相同的字符串，而楼主说“从字符串的最中间向两头分别遍历，则应该都是相等的”字符串是回文字符串，如果字符串的长度是奇数，如：“abcdcba”，楼主的做法没有任何问题，但是如果字符串的长度是偶数，如：“abccba”，根据定义，是回文字符串，但是按照LZ的解释不是回文字符串，因为没有中间字符。
回到题目，如果测试用例是“gabccbaef”（最长公共子串为“abccba”），按照LZ算法的运行结果最长公共子串是字符串“g”，而不是“abccba”。
如果按照我1楼提出的算法：input=“gabccbaef”，input2="feabccbag"，对input和input2求最大公共子序列得到：output=“abccba”。
初次看到LZ的算法感觉有点别扭，后来学习之余拿来分析发现有点缺陷，希望LZ稍作修改，共同进步！

支持(0)反对(0)



   
#12楼[楼主] 2012-11-03 10:41 星空雾雨  

@hansong1989
已更正，Thank you ~

支持(0)反对(0)



   
#13楼2012-11-03 16:01 玉菜园  

强

支持(0)反对(0)

 


刷新评论刷新页面返回顶部
 

注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。

找优秀程序员，就在博客园

 
博客园首页博问新闻闪存程序员招聘知识库
 





最新IT新闻:
 · 英活动家呼吁政府颁布杀手机器人研发禁令
 · 能看漫画的日本智能眼镜 要抢在谷歌前面上市！
 · 787客机即将重返蓝天 波音交出漂亮财报
 · 复盘互联网巨头打通寻人平台过程：大灾面前泯恩仇
 · 江民发生人事动荡：多名创业元老离职
» 更多新闻...

最新知识库文章:

 · 谈谈对BPM的理解
 · 遗留系统的技术栈迁移
 · 架构 － 业务流程管理介绍（BPM）
 · 中文女和程序员的爱情奇遇
 · HTTP负载测试

» 更多知识库文章... 







公告


昵称：星空雾雨
园龄：1年1个月
粉丝：39
关注：1
+加关注
 





随笔分类(26)
AndRoid 
C/C++(3) 
JAVA(1) 
Visaul C++ 
Wince程序以及感悟(2) 
嵌入式编程与开发(8) 
软件设计模式(1) 
数据结构与算法 
找工作--谷歌篇(1) 
找工作--华为篇(6) 
找工作--混杂篇(1) 
找工作--中兴篇(3) 


积分与排名
 积分 - 15933 
排名 - 7736 


阅读排行榜

1. 华为机试第一篇(3417)
2. 谷歌笔试第一篇(2480)
3. 华为机试第三篇(1957)
4. Linux源码printf函数实现(1711)
5. 华为机试第四篇(1601)
6. 将Ubuntu打包成实时操作系统(RTAI)(1432)
7. WinCE下的计算器实现源码(1116)
8. Linux驱动程序第二篇(1049)
9. Linux源码之进程终止函数(920)
10. Linux驱动编程第三篇(837)
11. getchar的缓存机制(789)
12. 华为机试第二篇(729)
13. assert的源码分析以及用法(677)
14. 设计模式总结(646)
15. 华为机试第六篇(320)
16. SD卡烧写WinCE启动过程解析(298)
17. Linux驱动编程第四篇(268)
18. Linux源码之sleep_on【不可中断休眠】(229)
19. 小米网站批量修改密码软件(172)
20. 笔试杂汇(137)
21. Linux驱动程序第一篇【笔记】(127)
22. 华为机试第五篇(99)
23. 中兴Java面试汇总三(33)
24. 中兴Java面试汇总一(25)
25. 中兴Java面试汇总二(23)
26. 操作符重载(19)
 

评论排行榜

1. 华为机试第三篇(13)
2. 华为机试第四篇(11)
3. getchar的缓存机制(8)
4. 华为机试第六篇(1)
5. 设计模式总结(1)
6. 谷歌笔试第一篇(1)
7. 笔试杂汇(1)
8. 小米网站批量修改密码软件(1)
9. 华为机试第一篇(1)
10. Linux源码之进程终止函数(0)
11. Linux源码之sleep_on【不可中断休眠】(0)
12. Linux驱动编程第三篇(0)
13. 华为机试第五篇(0)
14. Linux驱动程序第二篇(0)
15. Linux驱动程序第一篇【笔记】(0)
16. 将Ubuntu打包成实时操作系统(RTAI)(0)
17. SD卡烧写WinCE启动过程解析(0)
18. assert的源码分析以及用法(0)
19. Linux源码printf函数实现(0)
20. 华为机试第二篇(0)
21. 中兴Java面试汇总三(0)
22. 中兴Java面试汇总二(0)
23. 中兴Java面试汇总一(0)
24. 操作符重载(0)
25. WinCE下的计算器实现源码(0)
26. Linux驱动编程第四篇(0)
 

推荐排行榜
 
1. 华为机试第六篇(6)
2. 华为机试第一篇(4)
3. 华为机试第三篇(4)
4. 华为机试第四篇(2)
5. assert的源码分析以及用法(2)
6. 谷歌笔试第一篇(1)
7. Linux驱动编程第三篇(1)
8. Linux驱动程序第二篇(1)
9. Linux源码printf函数实现(1)
10. 华为机试第二篇(1)
11. getchar的缓存机制(1)
12. Linux驱动编程第四篇(1)
13. 设计模式总结(1)
14. WinCE下的计算器实现源码(1)
 


Copyright ©2013 星空雾雨 

