
您还未登录！|登录|注册|帮助
 首页
 业界
 移动
 云计算
 研发
 论坛
 博客
 下载
 
更多
 







结构之法 算法之道
 
Google或baidu搜索：“结构之法”，进入本博客
 




目录视图
 摘要视图
 订阅
 . 



【免费有礼】欧美最新网络营销技巧分享        博客导入工具      【限时优惠】第五届云计算大会社区门票抢购 
探究云计算数据中心节能增效之道      专访邓凡平：Android开发路上的快速学习之道      CSDN博客第二期最佳移动开发博主评选 



程序员编程艺术第十一章：最长公共子序列(LCS)问题 
. 
分类： 11.TAOPP（编程艺术） 19.TAOPP algorithms 2011-08-17 16:47 15652人阅读 评论(35) 收藏 举报 

编程算法zkcnullstring
 


目录(?)[+]














 


    程序员编程艺术第十一章：最长公共子序列(LCS)问题

0、前言

    程序员编程艺术系列重新开始创作了（前十章，请参考程序员编程艺术第一~十章集锦与总结）。回顾之前的前十章，有些代码是值得商榷的，因当时的代码只顾阐述算法的原理或思想，所以，很多的与代码规范相关的问题都未能做到完美。日后，会着力修缮之。

    搜遍网上，讲解这个LCS问题的文章不计其数，但大多给读者一种并不友好的感觉，稍感晦涩，且代码也不够清晰。本文力图避免此些情况。力保通俗，阐述详尽。同时，经典算法研究系列的第三章（三、dynamic programming）也论述了此LCS问题。有任何问题，欢迎不吝赐教。

第一节、问题描述

    什么是最长公共子序列呢?好比一个数列 S，如果分别是两个或多个已知数列的子序列，且是所有符合此条件序列中最长的，则S 称为已知序列的最长公共子序列。

    举个例子，如：有两条随机序列，如 1 3 4 5 5 ，and 2 4 5 5 7 6，则它们的最长公共子序列便是：4 5 5。

    注意最长公共子串（Longest CommonSubstring）和最长公共子序列（LongestCommon Subsequence, LCS）的区别：子串（Substring）是串的一个连续的部分，子序列（Subsequence）则是从不改变序列的顺序，而从序列中去掉任意的元素而获得的新序列；更简略地说，前者（子串）的字符的位置必须连续，后者（子序列LCS）则不必。比如字符串acdfg同akdfc的最长公共子串为df，而他们的最长公共子序列是adf。LCS可以使用动态规划法解决。下文具体描述。

第二节、LCS问题的解决思路
•
穷举法    


    解最长公共子序列问题时最容易想到的算法是穷举搜索法，即对X的每一个子序列，检查它是否也是Y的子序列，从而确定它是否为X和Y的公共子序列，并且在检查过程中选出最长的公共子序列。X和Y的所有子序列都检查过后即可求出X和Y的最长公共子序列。X的一个子序列相应于下标序列{1, 2, …, m}的一个子序列，因此，X共有2m个不同子序列（Y亦如此，如为2^n），从而穷举搜索法需要指数时间（2^m * 2^n）。
•动态规划算法

    事实上，最长公共子序列问题也有最优子结构性质。

记:


Xi=﹤x1，⋯，xi﹥即X序列的前i个字符 (1≤i≤m)（前缀）

Yj=﹤y1，⋯，yj﹥即Y序列的前j个字符 (1≤j≤n)（前缀）

假定Z=﹤z1，⋯，zk﹥∈LCS(X , Y)。
•
若xm=yn（最后一个字符相同），则不难用反证法证明：该字符必是X与Y的任一最长公共子序列Z（设长度为k）的最后一个字符，即有zk = xm = yn 且显然有Zk-1∈LCS(Xm-1 , Yn-1)即Z的前缀Zk-1是Xm-1与Yn-1的最长公共子序列。此时，问题化归成求Xm-1与Yn-1的LCS（LCS(X , Y)的长度等于LCS(Xm-1 , Yn-1)的长度加1）。

•
若xm≠yn，则亦不难用反证法证明：要么Z∈LCS(Xm-1, Y)，要么Z∈LCS(X , Yn-1)。由于zk≠xm与zk≠yn其中至少有一个必成立，若zk≠xm则有Z∈LCS(Xm-1 , Y)，类似的，若zk≠yn 则有Z∈LCS(X , Yn-1)。此时，问题化归成求Xm-1与Y的LCS及X与Yn-1的LCS。LCS(X , Y)的长度为：max{LCS(Xm-1 , Y)的长度, LCS(X , Yn-1)的长度}。


    由于上述当xm≠yn的情况中，求LCS(Xm-1 , Y)的长度与LCS(X , Yn-1)的长度，这两个问题不是相互独立的：两者都需要求LCS(Xm-1，Yn-1)的长度。另外两个序列的LCS中包含了两个序列的前缀的LCS，故问题具有最优子结构性质考虑用动态规划法。

    也就是说，解决这个LCS问题，你要求三个方面的东西：1、LCS（Xm-1，Yn-1）+1；2、LCS（Xm-1，Y），LCS（X，Yn-1）；3、max{LCS（Xm-1，Y），LCS（X，Yn-1）}。

    行文至此，其实对这个LCS的动态规划解法已叙述殆尽，不过，为了成书的某种必要性，下面，我试着再多加详细阐述这个问题。

第三节、动态规划算法解LCS问题

3.1、最长公共子序列的结构

    最长公共子序列的结构有如下表示：

    设序列X=<x1, x2, …, xm>和Y=<y1, y2, …, yn>的一个最长公共子序列Z=<z1, z2, …, zk>，则：
1.若xm=yn，则zk=xm=yn且Zk-1是Xm-1和Yn-1的最长公共子序列；
2.若xm≠yn且zk≠xm ，则Z是Xm-1和Y的最长公共子序列；
3.若xm≠yn且zk≠yn ，则Z是X和Yn-1的最长公共子序列。

    其中Xm-1=<x1, x2, …, xm-1>，Yn-1=<y1, y2, …, yn-1>，Zk-1=<z1, z2, …, zk-1>。

3、2.子问题的递归结构

    由最长公共子序列问题的最优子结构性质可知，要找出X=<x1, x2, …, xm>和Y=<y1, y2, …, yn>的最长公共子序列，可按以下方式递归地进行：当xm=yn时，找出Xm-1和Yn-1的最长公共子序列，然后在其尾部加上xm(=yn)即可得X和Y的一个最长公共子序列。当xm≠yn时，必须解两个子问题，即找出Xm-1和Y的一个最长公共子序列及X和Yn-1的一个最长公共子序列。这两个公共子序列中较长者即为X和Y的一个最长公共子序列。

    由此递归结构容易看到最长公共子序列问题具有子问题重叠性质。例如，在计算X和Y的最长公共子序列时，可能要计算出X和Yn-1及Xm-1和Y的最长公共子序列。而这两个子问题都包含一个公共子问题，即计算Xm-1和Yn-1的最长公共子序列。

    与矩阵连乘积最优计算次序问题类似，我们来建立子问题的最优值的递归关系。用c[i,j]记录序列Xi和Yj的最长公共子序列的长度。其中Xi=<x1, x2, …, xi>，Yj=<y1, y2, …, yj>。当i=0或j=0时，空序列是Xi和Yj的最长公共子序列，故c[i,j]=0。其他情况下，由定理可建立递归关系如下：




3、3.计算最优值

    直接利用上节节末的递归式，我们将很容易就能写出一个计算c[i,j]的递归算法，但其计算时间是随输入长度指数增长的。由于在所考虑的子问题空间中，总共只有θ(m*n)个不同的子问题，因此，用动态规划算法自底向上地计算最优值能提高算法的效率。

    计算最长公共子序列长度的动态规划算法LCS_LENGTH(X,Y)以序列X=<x1, x2, …, xm>和Y=<y1, y2, …, yn>作为输入。输出两个数组c[0..m ,0..n]和b[1..m ,1..n]。其中c[i,j]存储Xi与Yj的最长公共子序列的长度，b[i,j]记录指示c[i,j]的值是由哪一个子问题的解达到的，这在构造最长公共子序列时要用到。最后，X和Y的最长公共子序列的长度记录于c[m,n]中。




01.Procedure LCS_LENGTH(X,Y);  
02.begin  
03.  m:=length[X];  
04.  n:=length[Y];  
05.  for i:=1 to m do c[i,0]:=0;  
06.  for j:=1 to n do c[0,j]:=0;  
07.  for i:=1 to m do  
08.    for j:=1 to n do  
09.      if x[i]=y[j] then  
10.        begin  
11.          c[i,j]:=c[i-1,j-1]+1;  
12.          b[i,j]:="↖";  
13.        end  
14.      else if c[i-1,j]≥c[i,j-1] then  
15.        begin  
16.          c[i,j]:=c[i-1,j];  
17.          b[i,j]:="↑";  
18.        end  
19.      else  
20.        begin  
21.          c[i,j]:=c[i,j-1];  
22.          b[i,j]:="←"  
23.        end;  
24.  return(c,b);  
25.end;   

    由算法LCS_LENGTH计算得到的数组b可用于快速构造序列X=<x1, x2, …, xm>和Y=<y1, y2, …, yn>的最长公共子序列。首先从b[m,n]开始，沿着其中的箭头所指的方向在数组b中搜索。
•当b[i,j]中遇到"↖"时（意味着xi=yi是LCS的一个元素），表示Xi与Yj的最长公共子序列是由Xi-1与Yj-1的最长公共子序列在尾部加上xi得到的子序列；
•当b[i,j]中遇到"↑"时，表示Xi与Yj的最长公共子序列和Xi-1与Yj的最长公共子序列相同；
•当b[i,j]中遇到"←"时，表示Xi与Yj的最长公共子序列和Xi与Yj-1的最长公共子序列相同。

    这种方法是按照反序来找LCS的每一个元素的。由于每个数组单元的计算耗费Ο(1)时间，算法LCS_LENGTH耗时Ο(mn)。

3、4.构造最长公共子序列

    下面的算法LCS(b,X,i,j)实现根据b的内容打印出Xi与Yj的最长公共子序列。通过算法的调用LCS(b,X,length[X],length[Y])，便可打印出序列X和Y的最长公共子序列。




01.Procedure LCS(b,X,i,j);  
02.begin  
03.  if i=0 or j=0 then return;  
04.  if b[i,j]="↖" then  
05.    begin  
06.      LCS(b,X,i-1,j-1);  
07.      print(x[i]); {打印x[i]}  
08.    end  
09.  else if b[i,j]="↑" then LCS(b,X,i-1,j)   
10.                      else LCS(b,X,i,j-1);  
11.end;   

在算法LCS中，每一次的递归调用使i或j减1，因此算法的计算时间为O(m+n)。

例如，设所给的两个序列为X=<A，B，C，B，D，A，B>和Y=<B，D，C，A，B，A>。由算法LCS_LENGTH和LCS计算出的结果如下图所示：





    我来说明下此图（参考算法导论）。在序列X={A，B，C，B，D，A，B}和 Y={B，D，C，A，B，A}上，由LCS_LENGTH计算出的表c和b。第i行和第j列中的方块包含了c[i，j]的值以及指向b[i，j]的箭头。在c[7,6]的项4，表的右下角为X和Y的一个LCS<B，C，B，A>的长度。对于i，j>0，项c[i，j]仅依赖于是否有xi=yi，及项c[i-1，j]和c[i，j-1]的值，这几个项都在c[i，j]之前计算。为了重构一个LCS的元素，从右下角开始跟踪b[i，j]的箭头即可，这条路径标示为阴影，这条路径上的每一个“↖”对应于一个使xi=yi为一个LCS的成员的项（高亮标示）。

    所以根据上述图所示的结果，程序将最终输出：“B C B A”。

3、5.算法的改进

    对于一个具体问题，按照一般的算法设计策略设计出的算法，往往在算法的时间和空间需求上还可以改进。这种改进，通常是利用具体问题的一些特殊性。

    例如，在算法LCS_LENGTH和LCS中，可进一步将数组b省去。事实上，数组元素c[i,j]的值仅由c[i-1,j-1]，c[i-1,j]和c[i,j-1]三个值之一确定，而数组元素b[i,j]也只是用来指示c[i,j]究竟由哪个值确定。因此，在算法LCS中，我们可以不借助于数组b而借助于数组c本身临时判断c[i,j]的值是由c[i-1,j-1]，c[i-1,j]和c[i,j-1]中哪一个数值元素所确定，代价是Ο(1)时间。既然b对于算法LCS不是必要的，那么算法LCS_LENGTH便不必保存它。这一来，可节省θ(mn)的空间，而LCS_LENGTH和LCS所需要的时间分别仍然是Ο(mn)和Ο(m+n)。不过，由于数组c仍需要Ο(mn)的空间，因此这里所作的改进，只是在空间复杂性的常数因子上的改进。

    另外，如果只需要计算最长公共子序列的长度，则算法的空间需求还可大大减少。事实上，在计算c[i,j]时，只用到数组c的第i行和第i-1行。因此，只要用2行的数组空间就可以计算出最长公共子序列的长度。更进一步的分析还可将空间需求减至min(m, n)。

第四节、编码实现LCS问题

    动态规划的一个计算最长公共子序列的方法如下，以两个序列 X、Y 为例子：

设有二维数组 f[i][j] 表示 X 的 i 位和 Y 的 j 位之前的最长公共子序列的长度，则有：
f[1][1] = same(1,1)
f[i][j] = max{f[i − 1][j − 1] +same(i,j), f[i − 1][j] ,f[i][j − 1]}
其中，same(a,b)当 X 的第 a 位与 Y 的第 b 位完全相同时为“1”，否则为“0”。

此时，f[i][j]中最大的数便是 X 和 Y 的最长公共子序列的长度，依据该数组回溯，便可找出最长公共子序列。

该算法的空间、时间复杂度均为O(n2)，经过优化后，空间复杂度可为O(n)，时间复杂度为O(nlogn)。

以下是此算法的java代码：




01.   
02.import java.util.Random;  
03.   
04.public class LCS{  
05.    public static void main(String[] args){  
06.   
07.        //设置字符串长度  
08.        int substringLength1 = 20;  
09.        int substringLength2 = 20;  //具体大小可自行设置  
10.   
11.        // 随机生成字符串  
12.        String x = GetRandomStrings(substringLength1);  
13.        String y = GetRandomStrings(substringLength2);  
14.   
15.        Long startTime = System.nanoTime();  
16.        // 构造二维数组记录子问题x[i]和y[i]的LCS的长度  
17.        int[][] opt = new int[substringLength1 + 1][substringLength2 + 1];  
18.   
19.        // 动态规划计算所有子问题  
20.        for (int i = substringLength1 - 1; i >= 0; i--){  
21.            for (int j = substringLength2 - 1; j >= 0; j--){  
22.                if (x.charAt(i) == y.charAt(j))  
23.                    opt[i][j] = opt[i + 1][j + 1] + 1;                                 //参考上文我给的公式。  
24.                else  
25.                    opt[i][j] = Math.max(opt[i + 1][j], opt[i][j + 1]);        //参考上文我给的公式。  
26.            }  
27.        }  
28.   
29.        -------------------------------------------------------------------------------------  
30.   
31.        理解上段，参考上文我给的公式：  
32.   
33.        根据上述结论，可得到以下公式，  
34.   
35.        如果我们记字符串Xi和Yj的LCS的长度为c[i,j]，我们可以递归地求c[i,j]：  
36.   
37.                  /      0                               if i<0 or j<0  
38.        c[i,j]=          c[i-1,j-1]+1                    if i,j>=0 and xi=xj  
39.                 /       max(c[i,j-1],c[i-1,j]           if i,j>=0 and xi≠xj  
40.   
41.        -------------------------------------------------------------------------------------  
42.   
43.        System.out.println("substring1:"+x);  
44.        System.out.println("substring2:"+y);  
45.        System.out.print("LCS:");  
46.   
47.        int i = 0, j = 0;  
48.        while (i < substringLength1 && j < substringLength2){  
49.            if (x.charAt(i) == y.charAt(j)){  
50.                System.out.print(x.charAt(i));  
51.                i++;  
52.                j++;  
53.            } else if (opt[i + 1][j] >= opt[i][j + 1])  
54.                i++;  
55.            else  
56.                j++;  
57.        }  
58.        Long endTime = System.nanoTime();  
59.        System.out.println(" Totle time is " + (endTime - startTime) + " ns");  
60.    }  
61.   
62.    //取得定长随机字符串  
63.    public static String GetRandomStrings(int length){  
64.        StringBuffer buffer = new StringBuffer("abcdefghijklmnopqrstuvwxyz");  
65.        StringBuffer sb = new StringBuffer();  
66.        Random r = new Random();  
67.        int range = buffer.length();  
68.        for (int i = 0; i < length; i++){  
69.            sb.append(buffer.charAt(r.nextInt(range)));  
70.        }  
71.        return sb.toString();  
72.    }  
73.}  

第五节、改进的算法

    下面咱们来了解一种不同于动态规划法的一种新的求解最长公共子序列问题的方法,该算法主要是把求解公共字符串问题转化为求解矩阵L(p,m)的问题，在利用定理求解矩阵的元素过程中（1）while(i<k),L(k,i)=null，
                  （2）while(L(k,i)=k),L(k,i+1)=L(k,i+2)=…L(k,m)=k；

    求出每列元素，一直到发现第p+1 行都为null 时退出循环，得出矩阵L(k,m)后，B[L(1,m-p+1)]B[L(2,m-p+2)]…B[L(p,m)]即为A 和B 的LCS，其中p 为LCS 的长度。

6.1 主要定义及定理
•定义 1 子序列(Subsequence)：给定字符串A=A[1]A[2]…A[m]，(A[i]是A 的第i 个字母，A[i]∈字符集Σ，l<= i<m = A ， A 表示字符串A 的长度)，字符串B 是A 的子序列是指B=A[ 1 i ]A[ 2 i ]…A[ k i ],其中1 i < 2 i <…< k i 且k<=m.
•
定义2 公共子序列(Common Subsequence)：给定字符串A、B、C，C 称为A 和B 的公共子序列是指C 既是A 的子序列，又是B 的子序列。

•
定义3 最长公共子序列(Longest Common Subsequence 简称LCS)：给定字符串A、B、C，C 称为A 和B 的最长公共子序列是指C 是A 和B 的公共子序列，且对于A 和B 的任意公共子序列D，都有D <= C 。给定字符串A 和B，A =m，B =n，不妨设m<=n，LCS 问题就是要求出A 和B 的LCS。

•
定义4 给定字符串A=A[1]A[2]…A[m]和字符串B=B[1]B[2]…[n]，A( 1:i)表示A 的连续子序列A[1]A[2]…A[i]，同样B(1:j)表示B 的连续子序列B[1]B[2]…[j]。Li(k)表示所有与字符串A(1:i) 有长度为k 的LCS 的字符串B(l:j) 中j 的最小值。用公式表示就是Li(k)=Minj(LCS(A(1:i)，B(l:j))=k) [3]。




定理1 ∀ i∈[1，m]，有Li(l)<Li(2)<Li(3)<…<Li(m) .
定理2 ∀i∈[l，m-1]，∀k∈[l，m]，有i 1 L + (k)<= i L (k).
定理3 ∀ i∈[l，m-1]， ∀ k∈[l，m-l]，有i L (k)< i 1 L + (k+l).
以上三个定理都不考虑Li(k)无定义的情况。
定理4[3] i 1 L + (k)如果存在，那么它的取值必为: i 1 L + (k)=Min(j, i L (k))。这里j 是满足以下条件的最小整数:A[i+l]=B[j]且j> i L (k-1)。




    矩阵中元素L(k，i)=Li(k)，这里(1<i<=m，1<k<=m)，null 表示L(k,i)不存在。当i<k 时，显然L(k，i)不存在。
    设p=Maxk(L(k ， m) ≠ null) ， 可以证明L 矩阵中L(p,m) 所在的对角线,L(1,m-p+1),L(2,m-p+2)…L(p-1,m-1),L(p,m) 所对应的子序列B[L(1,m-p+1)]B[L(2,m-p+2)]…B[L(p,m)]即为A 和B 的LCS，p 为该LCS 的长度。这样，LCS 问题的求解就转化为对m m L × 矩阵的求解。

6.2 算法思想
    根据定理,第一步求出第一行元素,L(1,1),L(1,2),…L(1,m),第二步求第二行,一直到发现第p+1 行都为null 为止。在计算过程中遇到i<k 时,L(k,i)=null, 及L(k,i)=k时,L(k,i+1)=L(k,i+2)=…L(k,m)=k。这样,计算每行的时间复杂度为O(n),则整个时间复杂度为O(pn)。在求L 矩阵的过程中不用存储整个矩阵,只需存储当前行和上一行即可。空间复杂度为O(m+n)。

    下面给出一个例子来说明:给定字符串A 和B，A=acdabbc，B=cddbacaba，(m= A =7，n= B =9)。按照定理给出的递推公式，求出A 和B 的L 矩阵如图2，其中的$表示NULL。



    则A 和B 的LCS 为B[1]B[2]B[4]B[6]=cdbc,LCS 的长度为4。

6.3 算法伪代码
算法 L(A,B,L)
输入 长度分别为m,n 的字符串A,B
输出 A,B 的最长公共子序列LCS




01.L(A,B,L){//字符串A，B，所求矩阵L  
02.  for(k=1;k<=m;k++){ //m 为A 的长度  
03.    for(i=1;i<=m;i++){  
04.      if(i<k) L[k][i]=N;//i<k 时,L(k,i)=null，N 代表无穷大  
05.      if(L[k][i]==k)//L(k,i)=k 时,L(k,i+1)=L(k,i+2)=…L(k,m)=k  
06.      for(l=i+1;l<=m;l++)  
07.       { L[k][l]=k;  
08.         Break;}  
09.      for(j=1;j<=n;j++){//定理4 的实现  
10.       if(A[i+1]==B[j]&&j>L[k-1][i]){  
11.        L[k][i+1]=(j<L[k][i]?j:L[k][i]);  
12.        break;  
13.      }  
14.      if(L[k][i+1]==0)  
15.        L[k][i]=N;  
16.     }  
17.     if(L[k][m]==N)  
18.      {p=k-1;break;}  
19.  }  
20.  p=k-1;  
21.}  

6.4 结语
    本节主要描述区别于动态规划法的一种新的求解最长公共子序列问题的方法，在不影响精确度的前提下，提高序列匹配的速度，根据定理i 1 L + (k)=Min(j, i L (k))得出矩阵，在求解矩阵的过程中对最耗时的L(p,m)进行条件约束优化。我们在Intel(R) Core(TM)2 Quad 双核处理器、1G 内存，软件环境：windows xp 下试验结果证明，本文算法与其他经典的比对算法相比,不但能够取得准确的结果,而且速度有了较大的提高（本节参考了刘佳梅女士的论文）。

    若有任何问题，恳请不吝指正。谢谢各位。完。
 
分享到： 

上一篇：从几幅架构图中偷得半点海量数据处理经验
 下一篇：重启开源，分享无限--微软面试187题精选
 . 
顶 25 踩 3 . 


查看评论
 
22楼 linxi729778865 2012-11-14 20:31发表 [回复] 感觉前面大半部分都是《算法导论》上的内容~~~21楼 GuominVicky 2012-11-07 22:33发表 [回复] i 1 L + (k)<= i L (k) 这是啥意思啊，符号愣是没看懂啊20楼 GuominVicky 2012-11-07 22:17发表 [回复] 判断c[i,j]的值是由c[i-1,j-1]，c[i-1,j]和c[i,j-1]中哪一个数值元素所确定，代价是Ο(1)时间 这个如何确定啊~~能否说的清楚些19楼 v_JULY_v 2012-09-08 06:43发表 [回复] 发件人：xcoolcc
时间：2012-09-05 19:48:38
您好，我没学过算法和C，表示您关于该问题的分析文章几乎完全看不懂....强烈希望有人能把您文章中的解答翻译成php版本代码。顺便请您指导一下我自己写的php解法是否有问题，文章评论写不下....所以pm您
[code=php]
<?php
/**
* 作者: 朱亚杰
* Date: 12-9-3
* Time: 下午6:48
*/
$start = microtime();
$arr1 = array('k','s','b','c','d','c','a','b','a' ); //i循环
$arr2 = array('t','q','a','b','c','m','n','e','d','a','b' ); //j循环
function max_child_chars( $arr1, $arr2)
{
$result = array() ;
$len1 = count( $arr1 );
$len2 = count( $arr2 );
for ( $i = $len1-1, $j = $len2-1; $i>=0 && $j>=0; $i--, $j-- ) {
if ( $i==0 && in_array( $arr1[0], $arr2 ) ) {
array_unshift( $result, $arr1[0] );
break;
} elseif ( $j==0 && in_array( $arr2[0], $arr1 ) ) {
array_unshift( $result, $arr2[0] );
break;
} elseif ( $i==0 && !in_array( $arr1[0], $arr2 ) ) {
break;
} elseif ( $j==0 && !in_array( $arr2[0], $arr1 ) ) {
break;
}Re: v_JULY_v 2012-09-08 06:44发表 [回复] 回复v_JULY_v：if ( $arr1[$i]==$arr2[$j] ) {
array_unshift( $result, $arr1[$i] );
array_pop( $arr1 );
array_pop( $arr2 );
} elseif ( $j>0 && $i>0 && $arr1[$i]==$arr2[$j-1] && $arr1[$i-1]!=$arr2[$j] ) {
//此区块为优化性能增加,没有此区块代码,下面的通用条件代码也可以完成计算
array_unshift( $result, $arr1[$i] );
array_pop( $arr1 );
array_pop( $arr2 );
array_pop( $arr2 );
$j--;
} elseif ( $i>0 && $j>0 && $arr1[$i-1]==$arr2[$j] && $arr1[$i]!=$arr2[$j-1] ) {
//此区块为优化性能增加,没有此区块代码,下面的通用条件代码也可以完成计算
array_unshift( $result, $arr2[$j] );
array_pop( $arr2 );
array_pop( $arr1 );
array_pop( $arr1 );
$i--;
} else {
//通用条件区块
$ret1=array();//保留arr1末元素的分支
while( true && $i>=0){
if ( $pos = array_keys( $arr2, $arr1[$i] ) ) {
$p = array_pop( $pos );
$tmp1 = array_splice( $arr2, $p+1 );
$ret1 = max_child_chars( $arr1, $arr2 );
$arr2 = array_merge( $arr2, $tmp1 );
break;
}elseif(!$arr1){
break;
} else {
array_pop( $arr1 );
$i--;
}
}Re: v_JULY_v 2012-09-08 06:45发表 [回复] 回复v_JULY_v：$ret2=array();//保留arr2末元素的分支
while(true && $j>=0 ){
if ( $pos = array_keys( $arr1, $arr2[$j] ) ) {
$p = array_pop( $pos );//获得删除位置
$tmp2 = array_splice( $arr1, $p+1 );//删除arr1中多余的搜索元素
$ret2 = max_child_chars( $arr1, $arr2 );//迭代获取最长公共子串
break;
}elseif(!$arr1){
break;
}else {
array_pop( $arr2 );
$j--;
}
}
//比较两个分支的返回结果,选择最长的结果
if ( count( $ret1 )-count( $ret2 )>=0 ) {
$max = $ret1;
} else {
$max = $ret2;
}
//保存更长的
$result=array_merge($max,$result);
break;
}
}
return $result;
}
$list = max_child_chars( $arr1, $arr2 );
echo microtime()-$start;
print_r( $list );
[/code]18楼 titer1 2012-08-20 12:42发表 [回复] 第四节、编码实现LCS问题中说道：
该算法的空间、时间复杂度均为O(n2)，经过优化后，空间复杂度可为O(n)，时间复杂度为O(nlogn)。

请问一下第四节的代码是n^2,还是n*logn.

我看了下，怎么看都是 n^2? 是不是贴出的代码就是没有优化的。??17楼 juvenfan 2012-08-17 21:21发表 [回复] 提个小毛病，有个错别字，不是修善而是修缮，两者意义是不一样的哦Re: v_JULY_v 2012-08-17 22:11发表 [回复] 回复juvenfan：thank you，已改正16楼 titer1 2012-08-15 08:24发表 [回复] 后来优化方法：求解公共字符串问题转化为求解矩阵L(p,m)的问题，这个方法不是很好懂。

对了，他的复杂度是多少啊？15楼 luoqing123654 2012-07-28 16:51发表 [回复] 



01.// x数组取1...m;y数组取1....n  
02.int LCS(Seq x, Seq y, Seq subSeq, int m, int n, int count)  
03.{  
04.    if (m<1||n<1)  
05.    {     
06.        return count; // count 为0基索引  
07.    }  
08.  
09.    if (x[m]==y[n])  
10.    {  
11.        subSeq[count]=x[m];  
12.        count ++;  
13.         return LCS(x,y,subSeq,m-1,n-1,count);  
14.    }  
15.    else  
16.    {     
17.        if (LCS(x,y,subSeq,m,n-1,count) > LCS(x,y,subSeq,m-1,n,count) )   
18.            return LCS(x,y,subSeq,m,n-1,count);  
19.        else  
20.            return LCS(x,y,subSeq,m-1,n,count);  
21.    }  
22.}  
Re: titer1 2012-08-19 13:34发表 [回复] 回复luoqing123654：lcs使用的递归方法这么简化14楼 luoqing123654 2012-07-28 16:49发表 [回复] 



01.// A数组取1...m;B数组取1....n  
02.// L为(m+1)*(m+1)矩阵，L(k,i)表示A子序列(A[1]~A[i])与B子序列(B[1]~B[j])的最长公共序列长度为k的j值。  
03.int LCS2( Seq A,Seq B,Seq* L, int m, int n)  
04.{  
05.    int p;  
06.    // A、B都是从1开始的L(k,i)  
07.    for (int i = 0; i <= m; i ++)  
08.    {  
09.        L[0][i]=0;  
10.        L[i][0]=0;  
11.    }  
12.    for (int k = 1; k <= m; k ++)  
13.    {  
14.        for (int i = 1; i <= m; i ++)  
15.        {     
16.            L[k][i] = L[k][i-1];  
17.            if (i < k)  
18.            {     
19.                L[k][i] = N; // 无效值 //i<k 时,L(k,i)=null，N 代表无穷大    
20.                continue;  
21.            }  
22.            if (L[k][i]==k && i < m)  
23.            {  
24.                L[k][i+1]=k; //L(k,i)=k 时,L(k,i+1)=L(k,i+2)=…L(k,m)=k     
25.                continue;  
26.            }  
27.            for (int j = 1; j <= n; j ++)  
28.            {   //定理4 的实现   递增的方式  
29.                if (A[i]==B[j] && j > L[k-1][i-1])  
30.                {  
31.                    if (L[k][i-1]>0)  
32.                        L[k][i]=(j<L[k][i-1]?j:L[k][i-1]);  
33.                    else  
34.                    {  
35.                        L[k][i]=j;  
36.                    }  
37.                    p = k;  
38.                    break;  
39.                } // if  
40.            } // for j  
41.        } // for i  
42.    } // for k  
43.    for (i = 1; i <= p; i ++)  
44.    {  
45.        cout << B[L[i][m-p+i]] << "\t";  
46.    }  
47.    cout << endl << "LCS的长度为：" << p << endl;  
48.    return p;  
49.}  
13楼 mu399 2012-07-05 17:27发表 [回复] 公式对我完全没有帮助,但根据图片和伪代码还是搞清了最后的最长公共子序列问题改进算法，这里是

我的actionscript 3 代码




01.public function construct_LCS_Matrix(str1:String,str2:String):Array  
02.        {  
03.            const INT_MAX:int = 999999;  
04.            var matrix:Array=[[]];  
05.            var m:int = str1.length;  
06.            var n:int = str2.length;  
07.            var k:int;  
08.            for(k=0;k<=m;k++)  
09.            {  
10.                matrix[0][k]=-1;  
11.            }  
12.            for(k=1;k<=m;k++)  
13.            {  
14.                matrix[k]=[];  
15.                for(var i:int=0;i<=m;i++)  
16.                {  
17.                    matrix[k][i] = INT_MAX;  
18.                    if(i<k)  
19.                    {  
20.                        continue;  
21.                    }  
22.                    if(matrix[k][i-1]==k)  
23.                    {  
24.                        matrix[k][i] = k;  
25.                        continue;  
26.                    }  
27.                    for(var j:int=0;j<n;j++)  
28.                    {  
29.                        if(str1.charAt(i-1)==str2.charAt(j)  
30.                            && j > matrix[k-1][i-1])  
31.                        {  
32.                            if(matrix[k][i-1]>-1)  
33.                            {  
34.                                matrix[k][i] = (j<matrix[k][i-1] ? j : matrix[k][i-1]);  
35.                            }  
36.                            else  
37.                            {  
38.                                matrix[k][i] = j;  
39.                            }  
40.                            break;  
41.                        }  
42.                    }  
43.                }  
44.                if(matrix[k][m]==INT_MAX)  
45.                {  
46.                    break;  
47.                }  
48.            }  
49.            return matrix;  
50.        }  
Re: v_JULY_v 2012-07-06 23:17发表 [回复] 回复mu399：Good Job12楼 mu399 2012-07-05 17:21发表 [回复] 谢谢分享。
公式看着真费劲，始终不懂这些公式
i L (k)< i 1 L + (k+l)
i 1 L + (k)=Min(j, i L (k))
请教一下，要怎么做才能让这些公式看起来顺眼些呢？11楼 lostman250 2011-12-12 17:47发表 [回复] 突然觉得跟编辑距离的算法很像啊！10楼 renq_654321 2011-12-10 23:40发表 [回复] 虽然不是什么关键问题：
但Subsequence是子序列，Substring才是子串。

ps：膜拜楼主，O(∩_∩)O~9楼 AgeThirteen 2011-11-26 17:27发表 [回复] 学习了。膜拜啊，正在自学算法，求指教啊8楼 缘来是妳 2011-08-23 15:48发表 [回复] 学习了，当初这些都学了，忘完了，就要找工作了，咋办捏？从头再学？7楼 caislabs 2011-08-23 10:21发表 [回复] 正好做过一些文本比较的程序，其中核心算法需要找到两个文本文件的最大公共子序列。动态规划算法的最大问题是效率太低，基本没有实用价值。一个比较好的算法是 “AnO(NP) Sequence Comparison Algorithm Sun Wu, Udi Manber, Gene Myers", 这里可以找到原文： http://research.janelia.org/myers/Papers/np_diff.pdf。subversion 和 git 这两个软件的文本比较都采用了这个算法（以前是，不知现在的情况）。两者的速度可以相差几十倍。Re: titer1 2012-08-20 12:27发表 [回复] 回复caislabs：这里才知道 lcs还有更好的解法。我有空得好好研究Re: v_JULY_v 2011-08-23 11:29发表 [回复] 回复caislabs：恩，有空后一定看下你说的这个算法。多谢。6楼 pccq_2002 2011-08-22 19:47发表 [回复] 05. for i:=1 to m do c[i,j]:=0; 应该是下面的这样吧：
============================
05. for i:=1 to m do c[i,0]:=0;Re: v_JULY_v 2011-08-22 19:53发表 [回复] 回复pccq_2002：已经修正过来了阿。5楼 oarer 2011-08-22 15:16发表 [回复] 还有3.3中算法描述也有点问题
4：for i:=1 to m do c[i,j]:=0; 应该是for i:=1 to m do c[i,0]:=0; 
很多书上都是这样描述的，其实还有一个漏洞这两个for循环没有考虑c[0][0]的情况，当x[1]=y[1]时容易造成没赋初值的错误Re: v_JULY_v 2011-08-22 15:33发表 [回复] 回复oarer：恩，多谢朋友的指正，已经改正。4楼 oarer 2011-08-22 15:13发表 [回复] ”事实上，在计算c[i,j]时，只用到数组c的第i行和第i-1行。因此，只要用2行的数组空间就可以计算出最长公共子序列的长度。更进一步的分析还可将空间需求减至min(m, n)。“这些已经详解中的内容其它书上也是这样讲的，但是到底怎么实现？ 不明白3楼 flasherfffff 2011-08-21 23:09发表 [回复] 对这句话不大理解：
“若xm=yn，则zk=xm=yn且Zk-1是Xm-1和Yn-1的最长公共子序列；”
比如，x是 1233345
 y是 xy333a5
 z就是333
这时，xm=yn。但是zk !=xm或yn。而且zk-1 即33也不是xm-1和yn-1的最长公共子序列。
比较迷惑。Re: v_JULY_v 2011-08-22 11:33发表 [回复] 回复flasherfffff：你看，这是xm=yn?2楼 kissthefuture 2011-08-17 21:04发表 [回复] lz怎么是java的呢,上c/c++代码

支持Re: v_JULY_v 2011-08-18 08:42发表 [回复] 回复kissthefuture：只要阐述了算法的思想和原理即可，至于是何种语言，相信干系不大吧。1楼 EUYUIL 2011-08-17 18:44发表 [回复] 请教一下，优化之后时间复杂度是 O(nlogn) 是怎么来的？以前听说 LCS 可以优化到 O(nlogn) 但是我一直没有好方法。Re: v_JULY_v 2011-08-17 18:45发表 [回复] 回复euyuil：恩，文章正在增改。稍等会儿，待补齐之后，再次来查看。Re: lgm277531070 2011-08-22 21:45发表 [回复] 回复v_JULY_v：支持楼主
 


您还没有登录,请[登录]或[注册]
 
* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场
 








个人资料 

v_JULY_v 






访问：4195706次
 积分：25982分
 排名：第50名
 . 原创：134篇
 转载：0篇
 译文：5篇
 评论：10137条
 . 
博客公告 ①.本blog开通于2010年10月11日，高级C /Algorithms交流群：149977547；北京程序员联盟：172727781。②.狂热算法，热爱数据挖掘，关注机器学习、统计分析，爱好文学数学。③.微博：研究者July，邮箱：zhoulei0907@yahoo.cn，July，二零一三年三月二十九日。 
我的微博 
文章分类 03.Algorithms（实现）(9) 
01.Algorithms（研究）(27) 
02.Algorithms（后续）(22) 
04.Algorithms（讨论）(1) 
05.MS 100' original(7) 
06.MS 100' answers(13) 
07.MS 100' classify(4) 
08.MS 100' one Keys(6) 
09.MS 100' follow-up(3) 
10.MS 100' comments(4) 
11.TAOPP（编程艺术）(26) 
12.TAOPP string(6) 
13.TAOPP array(10) 
14.TAOPP list(2) 
15.stack/heap/queue(0) 
16.TAOPP tree(1) 
17.TAOPP c/c++(2) 
18.TAOPP function(2) 
19.TAOPP algorithms(7) 
20.number operations(1) 
21.Essays(8) 
22.Big Data Processing(5) 
23.Redis/MongoDB(0) 
24.data structures(12) 
25.Red-black tree(7) 
26.Image Processing(3) 
27.Architecture design(4) 
28.Source analysis(3) 
29.Recommend&Search(4) 
30.Machine L&Data Mining(5) 

博客专栏 




微软面试100题系列 
文章：17篇
 阅读：1246112 





程序员编程艺术 
文章：24篇
 阅读：859726 





经典算法研究 
文章：32篇
 阅读：1110619 

阅读排行 程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦(186260) 
九月十月百度人搜，阿里巴巴，腾讯华为笔试面试八十题(第331-410题)(141609) 
教你如何迅速秒杀掉：99%的海量数据处理面试题(137438) 
横空出世，席卷互联网--评微软等公司数据结构+算法面试100题(127653) 
从B树、B+树、B*树谈到R 树(122026) 
十道海量数据处理面试题与十个方法大总结(101549) 
九月腾讯，创新工场，淘宝等公司最新面试三十题（第171-200题）(87330) 
十一、从头到尾彻底解析Hash表算法(78387) 
微软公司等数据结构+算法面试100题(第1-100题)全部出炉(75912) 
支持向量机通俗导论（理解SVM的三层境界）(74609) 

评论排行 程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦(371) 
九月十月百度人搜，阿里巴巴，腾讯华为笔试面试八十题(第331-410题)(361) 
九月腾讯，创新工场，淘宝等公司最新面试三十题（第171-200题）(331) 
当今世界最为经典的十大算法--投票进行时(320) 
从B树、B+树、B*树谈到R 树(264) 
横空出世，席卷互联网--评微软等公司数据结构+算法面试100题(263) 
十三个经典算法研究与总结、目录+索引(216) 
我的大学生涯(214) 
程序员编程艺术第一章、左旋转字符串(203) 
三五杆枪，可干革命，三五个人，可以创业(198) 

最新评论 程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦 
v_JULY_v: @q1w2ok11:替我感谢你的同事:-) 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦 
q1w2ok11: 同事推荐，太给力了，必须好好学习，楼主辛苦 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦 
kiritor: 谢谢博主的分享,先收藏了 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦 
v_JULY_v: @zhouqinxiong:哪个学校呢？替我谢谢你的老师:-) 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦 
zhouqinxiong: 老师推荐的，lz，你的博客非常给力 

快速排序算法 
康天崽: 太给力了，我喜欢，爱死你了 

我的大学生涯 
msjcool: 看完楼主的经历，感觉自己弱爆了 

B树的C实现 
hao138548: 好贴 

教你如何迅速秒杀掉：99%的海量数据处理面试题 
xiyandeng: 虽然看得不是很懂，以后可以慢慢消化！感谢博主啊 

程序员编程艺术第一章、左旋转字符串 
dusx1981: void RightShift4(string &str, int k){ int len = st... 


01、本blog索引 3、微软100题维护地址
1、微软100题横空出世
5、经典算法研究系列
7、红黑树系列集锦
6、程序员编程艺术系列
2、微软面试全部100题
0、经典4大原创系列集锦
4、微软100题下载地址
 
02、Google or baidu? Google搜--"结构之法"（My BLOG）
baidu 搜--"结构之法"（My BLOG）
 
03、个人标签 本BLOG RSS订阅
zhoulei0907@yahoo.cn
csdn blog订阅排行榜
TAOPP修订wiki
julymsn@live.cn
电子工程网专家VIP
 博客园blog-成为推荐博客
 ITpub-代码优化专家
 
04、我的驻点 01. 为学论坛-万物皆数 终生为学
 02、Harry
 03、NoSQLFan
 04、酷勤网
 05、52nlp
 06、北大朋友的挖掘乐园
 07、跟Sophia_qing一起读硕士
 08、面试问答社区51nod
 09、韩寒
 10、我的有鱼
 11、曾经的叛逆与年少
 12、老D之MongoDB源码分析
 14、code4app:iOS代码示例
 17、斯坦福机器学习公开课
 18、TheItHome算法版块版主
 19、36氪--关注互联网创业
 20、德问--编程是一种艺术创作
 21、善科网
 22、百度搜索研发部
 23、淘宝搜索技术博客
 24、interviewstreet
 25、LeetCode
 26、Team_Algorithms人人小组
 
文章存档 
2013年03月(1).
2012年12月(1).
2012年11月(1).
2012年09月(1).
2012年06月(1).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

展开.
 

. 
公司简介|招贤纳士|广告服务|银行汇款帐号|联系方式|版权声明|法律顾问|问题报告QQ客服 微博客服 论坛反馈 联系邮箱：webmaster@csdn.net 服务热线：400-600-2320京 ICP 证 070598 号北京创新乐知信息技术有限公司 版权所有世纪乐知(北京)网络技术有限公司 提供技术支持江苏乐知网络技术有限公司 提供商务支持Copyright © 1999-2012, CSDN.NET, All Rights Reserved  
