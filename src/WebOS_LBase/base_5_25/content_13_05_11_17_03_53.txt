
您还未登录！|登录|注册|帮助
 首页
 业界
 移动
 云计算
 研发
 论坛
 博客
 下载
 
更多
 







结构之法 算法之道
 
Google或baidu搜索：“结构之法”，进入本博客
 




目录视图
 摘要视图
 订阅
 . 



【免费有礼】欧美最新网络营销技巧分享        博客导入工具      【限时优惠】第五届云计算大会社区门票抢购 
探究云计算数据中心节能增效之道      专访邓凡平：Android开发路上的快速学习之道      CSDN博客第二期最佳移动开发博主评选 



程序员编程艺术：第四章、现场编写类似strstr/strcpy/strpbrk的函数 
. 
分类： 11.TAOPP（编程艺术） 18.TAOPP function 2011-05-13 16:05 19372人阅读 评论(124) 收藏 举报 

编程null面试dststringc
 

               第四章、现场编写类似strstr/strcpy/strpbrk的函数    

 

作者：July。
    说明： 如果在博客中代码使用了\n，csdn blog系统将会自动回给我变成/n。据后续验证，可能是原来旧blog版本的bug，新版已不存在此问题。至于，本文代码，日后统一修正。July、2012.05.02。  
    微博：http://weibo.com/julyweibo  。
    出处：http://blog.csdn.net/v_JULY_v 。
    wiki：http://tctop.wikispaces.com/。
----------------------------------------------


前奏

    有网友向我反应，之前三章（http://t.cn/hgVPmH）的面试题目，是否有点太难了。诚如他所说，绝大部分公司的面试题不会像微软等公司的面试题目出的那么变态，或复杂。

    面试考察的是你对基础知识的掌握程度，及编程能力是否过硬的一种检测，所以，扎实基础知识，提高编程能力，比去看什么所谓的面经，或去背面试题目的答案强多了。

    很多中、小型公司自己的创造能力，包括人力，物力资源都有限，所以，他们的面试题目除了copy一些大公司的题库之外（当然，考察你对基础知识的掌握情况，是肯定不会放过的），还有一个途径就是让你在限定时间内（如十分钟），当场实现一些类似strcpy/strcat/strpbrk等库函数，这个主要看你对细节的把握，以及编程能力是否之扎实了。

    同时，本章里出现的代码（除了第4节的c标准库部分源码）都是个人限定在短时间内（正好，突出现场感）编写的，很多问题，难免有所考虑不周。所以，如果你发现本章任何一段代码有任何问题，恳请不吝指正。


第一节、字符串查找
1.1题目描述：
给定一个字符串A，要求在A中查找一个子串B。
如A="ABCDF"，要你在A中查找子串B=“CD”。

分析：比较简单，相当于实现strstr库函数，主体代码如下：





01.//在字符串中查找指定字符串的第一次出现，不能找到则返回-1      
02.int strstr(char *string, char *substring)      
03.{     
04.    if (string == NULL || substring == NULL)        
05.        return -1;        
06.      
07.    int lenstr = strlen(string);     
08.    int lensub = strlen(substring);     
09.      
10.    if (lenstr < lensub)        
11.        return -1;         
12.      
13.    int len = lenstr - lensub;  
14.    for (int i = 0; i <= len; i++)   //复杂度为O(m*n)     
15.    {     
16.        for (int j = 0; j < lensub; j++)     
17.        {     
18.            if (string[i+j] != substring[j])     
19.                break;     
20.        }     
21.        if (j == lensub)     
22.            return i + 1;     
23.    }     
24.    return -1;     
25.}    
 

    读者反馈@xiaohui5319：楼主啊，对于你那个strstr的函数，我觉得有点小问题。我查了一下C标准库的源码，它给的声明是这样的，两个参数都有const。



char *

STRSTR (const char *haystack_start, const char *needle_start)

    而且标准库中没有调用strlen函数，因为假如你是标准库的设计者，strlen()函数还没设计出来，你怎么去计算两个字符串的长度？是不是只能通过指针移动来实现，我觉得这些都是微软要考察的地方。

    此外：还有int lenstr=strlen(string);这是不安全的？
    strlen函数的返回类型是size_t型，也就是无符号整型，假如我的数组长度很长（假如是用堆分配的，可以很大很大），长过2的31次方减1的话，会发生一处，你这lenstr就会变成负值了
    用size_t类型最保险。

    以后，本编程艺术系列中有任何问题，暂未来得及及时修正，请读者多加思考，多加辨明。

    上述程序已经实现了在字符串中查找第一个子串的功能，时间复杂度为O（n*m），也可以用KMP算法，复杂度为O(m+n)。为人打通思路，提高他人创造力，我想，这是狂想曲与其它的面试解答所不同的地方，也是我们写狂想曲系列文章的意义与价值之所在。

1.2、题目描述

在一个字符串中找到第一个只出现一次的字符。如输入abaccdeff，则输出b。 

代码则可以如下编写：





01.//查找第一个只出现一次的字符，     
02.//copyright@ yansha     
03.//July、updated，2011.04.24.     
04.char FirstNotRepeatChar(char* pString)     
05.{     
06.    if(!pString)     
07.        return '/0';     
08.      
09.    const int tableSize = 256;    
10.    //有点要提醒各位注意，一般常数的空间消耗，如这里的256，我们也认为此空间复杂度为O（1）。  
11.    int hashTable[tableSize] = {0}; //存入数组，并初始化为0     
12.      
13.    char* pHashKey = pString;     
14.    while(*(pHashKey) != '/0')     
15.        hashTable[*(pHashKey++)]++;     
16.      
17.    while(*pString != '/0')     
18.    {     
19.        if(hashTable[*pString] == 1)     
20.            return *pString;     
21.          
22.        pString++;     
23.    }     
24.    return '/0';  //没有找到满足条件的字符，退出     
25.}    


代码二，bitmap：





01.# include<stdio.h>  
02.# include<string.h>  
03.  
04.const int N = 26;  
05.int bit_map[N];  
06.  
07.void findNoRepeat(char *src)  
08.{  
09.    int pos;  
10.    char *str = src;  
11.    int i ,len = strlen(src);  
12.      
13.    //统计  
14.    for(i = 0 ; i < len ;i ++)  
15.        bit_map[str[i]-'a'] ++;  
16.      
17.    //从字符串开始遍历 其bit_map==1 那么就是结果  
18.    for(i = 0 ; i < len ; i ++)  
19.    {  
20.        if(bit_map[str[i]-'a'] == 1)  
21.        {  
22.            printf("%c",str[i]);  
23.            return ;  
24.        }  
25.    }  
26.}  
27.  
28.int main()  
29.{     
30.    char *src = "abaccdeff";  
31.    findNoRepeat(src);  
32.    printf("/n");  
33.    return 0;  
34.}  
  

第二节、字符串拷贝
题目描述：
要求实现库函数strcpy，
原型声明：extern char *strcpy(char *dest,char *src); 
功能：把src所指由NULL结束的字符串复制到dest所指的数组中。 　
说明：src和dest所指内存区域不可以重叠且dest必须有足够的空间来容纳src的字符串。 　
返回指向dest的指针。

    分析：如果编写一个标准strcpy函数的总分值为10，下面给出几个不同得分的答案：



01.//得2分     
02.void strcpy( char *strDest, char *strSrc )     
03.{     
04.    while( (*strDest++ = * strSrc++) != '/0' );     
05.}      
06.  
07.//得4分     
08.void strcpy( char *strDest, const char *strSrc )      
09.{     
10.    //将源字符串加const，表明其为输入参数，加2分     
11.    while( (*strDest++ = * strSrc++) != '/0' );     
12.}      
13.  
14.//得7分     
15.void strcpy(char *strDest, const char *strSrc)      
16.{     
17.    //对源地址和目的地址加非0断言，加3分     
18.    assert( (strDest != NULL) && (strSrc != NULL) );     
19.    while( (*strDest++ = * strSrc++) != '/0' );     
20.}      
21.  
22.//得9分     
23.//为了实现链式操作，将目的地址返回，加2分！     
24.char * strcpy( char *strDest, const char *strSrc )      
25.{     
26.    assert( (strDest != NULL) && (strSrc != NULL) );     
27.    char *address = strDest;      
28.    while( (*strDest++ = * strSrc++) != '/0' );      
29.    return address;     
30.}    
31.  
32.//得10分，基本上所有的情况，都考虑到了  
33.//如果有考虑到源目所指区域有重叠的情况，加1分！     
34.char * strcpy( char *strDest, const char *strSrc )      
35.{     
36.    if(strDest == strSrc) { return strDest; }  
37.    assert( (strDest != NULL) && (strSrc != NULL) );     
38.    char *address = strDest;      
39.    while( (*strDest++ = * strSrc++) != '/0' );      
40.    return address;     
41.}    



第三节、小部分库函数的实现
    考察此类编写同库函数一样功能的函数经常见于大大小小的IT公司的面试题目中，以下是常见的字符串库函数的实现，希望，对你有所帮助，有任何问题，欢迎不吝指正：





01.//@yansha:字串末尾要加结束符'/0'，不然输出错位结果  
02.char *strncpy(char *strDes, const char *strSrc, unsigned int count)      
03.{      
04.    assert(strDes != NULL && strSrc != NULL);      
05.    char *address = strDes;      
06.    while (count-- && *strSrc != '/0')      
07.        *strDes++ = *strSrc++;   
08.    *strDes = '/0';  
09.    return address;      
10.}   
11.  
12.//查找字符串s中首次出现字符c的位置   
13.char *strchr(const char *str, int c)   
14.{   
15.    assert(str != NULL);   
16.    for (; *str != (char)c; ++ str)   
17.        if (*str == '/0')   
18.            return NULL;   
19.        return str;   
20.}   
21.  
22.int strcmp(const char *s, const char *t)   
23.{   
24.    assert(s != NULL && t != NULL);   
25.    while (*s && *t && *s == *t)   
26.    {   
27.        ++ s;   
28.        ++ t;   
29.    }   
30.    return (*s - *t);   
31.}   
32.  
33.char *strcat(char *strDes, const char *strSrc)   
34.{   
35.    assert((strDes != NULL) && (strSrc != NULL));   
36.    char *address = strDes;   
37.    while (*strDes != '/0')   
38.        ++ strDes;   
39.    while ((*strDes ++ = *strSrc ++) != '/0')   
40.        NULL;   
41.    return address;   
42.}   
43.  
44.int strlen(const char *str)   
45.{   
46.    assert(str != NULL);   
47.    int len = 0;   
48.    while (*str ++ != '/0')   
49.        ++ len;   
50.    return len;   
51.}   
52.  
53.//此函数，梦修改如下     
54.char *strdup_(char *strSrc)     
55.//将字符串拷贝到新的位置     
56.{     
57.    if(strSrc!=NULL)     
58.    {     
59.        char *start=strSrc;     
60.        int len=0;     
61.        while(*strSrc++!='/0')     
62.            len++;     
63.          
64.        char *address=(char *)malloc(len+1);     
65.        assert(address != NULL);  
66.          
67.        while((*address++=*start++)!='/0');      
68.        return address-(len+1);      
69.    }     
70.    return NULL;     
71.}     
72.  
73.//多谢laoyi19861011指正  
74.char *strstr(const char *strSrc, const char *str)   
75.{   
76.    assert(strSrc != NULL && str != NULL);   
77.    const char *s = strSrc;   
78.    const char *t = str;   
79.    for (; *strSrc != '/0'; ++ strSrc)   
80.    {   
81.        for (s = strSrc, t = str; *t != '/0' && *s == *t; ++s, ++t)   
82.            NULL;   
83.        if (*t == '/0')   
84.            return (char *) strSrc;   
85.    }   
86.    return NULL;   
87.}   
88.  
89.char *strncat(char *strDes, const char *strSrc, unsigned int count)   
90.{   
91.    assert((strDes != NULL) && (strSrc != NULL));   
92.    char *address = strDes;   
93.    while (*strDes != '/0')   
94.        ++ strDes;   
95.    while (count -- && *strSrc != '/0' )   
96.        *strDes ++ = *strSrc ++;   
97.    *strDes = '/0';   
98.    return address;   
99.}   
100.  
101.int strncmp(const char *s, const char *t, unsigned int count)   
102.{   
103.    assert((s != NULL) && (t != NULL));   
104.    while (*s && *t && *s == *t && count --)   
105.    {   
106.        ++ s;   
107.        ++ t;   
108.    }   
109.    return (*s - *t);   
110.}   
111.  
112.char *strpbrk(const char *strSrc, const char *str)   
113.{   
114.    assert((strSrc != NULL) && (str != NULL));   
115.    const char *s;   
116.    while (*strSrc != '/0')   
117.    {   
118.        s = str;   
119.        while (*s != '/0')   
120.        {   
121.            if (*strSrc == *s)   
122.                return (char *) strSrc;   
123.            ++ s;   
124.        }   
125.        ++ strSrc;   
126.    }   
127.    return NULL;   
128.}   
129.  
130.int strcspn(const char *strSrc, const char *str)   
131.{   
132.    assert((strSrc != NULL) && (str != NULL));   
133.    const char *s;   
134.    const char *t = strSrc;   
135.    while (*t != '/0')   
136.    {   
137.        s = str;   
138.        while (*s != '/0')   
139.        {   
140.            if (*t == *s)   
141.                return t - strSrc;   
142.            ++ s;   
143.        }   
144.        ++ t;   
145.    }   
146.    return 0;   
147.}   
148.  
149.int strspn(const char *strSrc, const char *str)   
150.{   
151.    assert((strSrc != NULL) && (str != NULL));   
152.    const char *s;   
153.    const char *t = strSrc;   
154.    while (*t != '/0')   
155.    {   
156.        s = str;   
157.        while (*s != '/0')   
158.        {   
159.            if (*t == *s)   
160.                break;   
161.            ++ s;   
162.        }   
163.        if (*s == '/0')   
164.            return t - strSrc;   
165.        ++ t;   
166.    }   
167.    return 0;   
168.}   
169.  
170.char *strrchr(const char *str, int c)   
171.{   
172.    assert(str != NULL);   
173.    const char *s = str;   
174.    while (*s != '/0')   
175.        ++ s;   
176.    for (-- s; *s != (char) c; -- s)   
177.        if (s == str)   
178.            return NULL;   
179.        return (char *) s;   
180.}   
181.  
182.char* strrev(char *str)   
183.{   
184.    assert(str != NULL);   
185.    char *s = str, *t = str, c;   
186.    while (*t != '/0')   
187.        ++ t;   
188.    for (-- t; s < t; ++ s, -- t)   
189.    {   
190.        c = *s;   
191.        *s = *t;   
192.        *t = c;   
193.    }   
194.    return str;   
195.}   
196.  
197.char *strnset(char *str, int c, unsigned int count)   
198.{   
199.    assert(str != NULL);   
200.    char *s = str;   
201.    for (; *s != '/0' && s - str < count; ++ s)   
202.        *s = (char) c;   
203.    return str;   
204.}   
205.  
206.char *strset(char *str, int c)   
207.{   
208.    assert(str != NULL);   
209.    char *s = str;   
210.    for (; *s != '/0'; ++ s)   
211.        *s = (char) c;   
212.    return str;   
213.}   
214.  
215.//@heyaming  
216.//对原 strtok 的修改，根据MSDN,strToken可以为NULL.实际上第一次call strtok给定一字串，  
217.//再call strtok时可以输入NULL代表要接着处理给定字串。  
218.//所以需要用一 static 保存没有处理完的字串。同时也需要处理多个分隔符在一起的情况。  
219.char *strtok(char *strToken, const char *str)  
220.{  
221.    assert(str != NULL);  
222.    static char *last;  
223.      
224.    if (strToken == NULL && (strToken = last) == NULL)  
225.        return (NULL);  
226.      
227.    char *s = strToken;  
228.    const char *t = str;  
229.    while (*s != '/0')  
230.    {  
231.        t = str;  
232.        while (*t != '/0')  
233.        {  
234.            if (*s == *t)  
235.            {  
236.                last = s + 1;  
237.                if (s - strToken == 0) {  
238.                    strToken = last;  
239.                    break;  
240.                }  
241.                *(strToken + (s - strToken)) = '/0';  
242.                return strToken;  
243.            }  
244.            ++ t;  
245.        }  
246.        ++ s;  
247.    }  
248.    return NULL;  
249.}  
250.  
251.char *strupr(char *str)   
252.{   
253.    assert(str != NULL);   
254.    char *s = str;   
255.    while (*s != '/0')   
256.    {   
257.        if (*s >= 'a' && *s <= 'z')   
258.            *s -= 0x20;   
259.        s ++;   
260.    }   
261.    return str;   
262.}   
263.  
264.char *strlwr(char *str)   
265.{   
266.    assert(str != NULL);   
267.    char *s = str;   
268.    while (*s != '/0')   
269.    {   
270.        if (*s >= 'A' && *s <= 'Z')   
271.            *s += 0x20;   
272.        s ++;   
273.    }   
274.    return str;   
275.}   
276.  
277.void *memcpy(void *dest, const void *src, unsigned int count)   
278.{   
279.    assert((dest != NULL) && (src != NULL));   
280.    void *address = dest;   
281.    while (count --)   
282.    {   
283.        *(char *) dest = *(char *) src;   
284.        dest = (char *) dest + 1;   
285.        src = (char *) src + 1;   
286.    }   
287.    return address;   
288.}   
289.  
290.void *memccpy(void *dest, const void *src, int c, unsigned int count)   
291.{   
292.    assert((dest != NULL) && (src != NULL));   
293.    while (count --)   
294.    {   
295.        *(char *) dest = *(char *) src;   
296.        if (* (char *) src == (char) c)   
297.            return ((char *)dest + 1);   
298.        dest = (char *) dest + 1;   
299.        src = (char *) src + 1;   
300.    }   
301.    return NULL;   
302.}   
303.  
304.void *memchr(const void *buf, int c, unsigned int count)   
305.{   
306.    assert(buf != NULL);   
307.    while (count --)   
308.    {   
309.        if (*(char *) buf == c)   
310.            return (void *) buf;   
311.        buf = (char *) buf + 1;   
312.    }   
313.    return NULL;   
314.}   
315.  
316.int memcmp(const void *s, const void *t, unsigned int count)   
317.{   
318.    assert((s != NULL) && (t != NULL));   
319.    while (*(char *) s && *(char *) t && *(char *) s == *(char *) t && count --)   
320.    {   
321.        s = (char *) s + 1;   
322.        t = (char *) t + 1;   
323.    }   
324.    return (*(char *) s - *(char *) t);   
325.}   
326.  
327.//@big：  
328.//要处理src和dest有重叠的情况，不是从尾巴开始移动就没问题了。  
329.//一种情况是dest小于src有重叠，这个时候要从头开始移动，  
330.//另一种是dest大于src有重叠，这个时候要从尾开始移动。  
331.void *memmove(void *dest, const void *src, unsigned int count)   
332.{  
333.    assert(dest != NULL && src != NULL);  
334.    char* pdest = (char*) dest;  
335.    char* psrc = (char*) src;  
336.      
337.    //pdest在psrc后面，且两者距离小于count时，从尾部开始移动. 其他情况从头部开始移动  
338.    if (pdest > psrc && pdest - psrc < count)   
339.    {  
340.        while (count--)   
341.        {  
342.            *(pdest + count) = *(psrc + count);  
343.        }  
344.    } else   
345.    {  
346.        while (count--)   
347.        {  
348.            *pdest++ = *psrc++;  
349.        }  
350.    }  
351.    return dest;  
352.}  
353.  
354.void *memset(void *str, int c, unsigned int count)   
355.{   
356.    assert(str != NULL);   
357.    void *s = str;   
358.    while (count --)   
359.    {   
360.        *(char *) s = (char) c;   
361.        s = (char *) s + 1;   
362.    }   
363.    return str;   
364.}  
          
  测试：以上所有的函数，都待进一步测试，有任何问题，欢迎任何人随时不吝指出。

第四节、c标准库部分源代码

    为了给各位一个可靠的参考，以下，我摘取一些c标准框里的源代码，以飨各位：





01.char * __cdecl strcat (char * dst,const char * src)  
02.{  
03.    char * cp = dst;  
04.      
05.    while( *cp )  
06.        cp++;                   /* find end of dst */  
07.      
08.    while( *cp++ = *src++ ) ;       /* Copy src to end of dst */  
09.      
10.    return( dst );                  /* return dst */  
11.      
12.}  
13.  
14.int __cdecl strcmp (const char * src,const char * dst)  
15.{  
16.    int ret = 0 ;  
17.      
18.    while( ! (ret = *(unsigned char *)src - *(unsigned char *)dst) && *dst)  
19.        ++src, ++dst;  
20.      
21.    if ( ret < 0 )  
22.        ret = -1 ;  
23.    else if ( ret > 0 )  
24.        ret = 1 ;  
25.      
26.    return( ret );  
27.}  
28.  
29.size_t __cdecl strlen (const char * str)  
30.{  
31.    const char *eos = str;  
32.      
33.    while( *eos++ ) ;  
34.      
35.    return( (int)(eos - str - 1) );  
36.}  
37.  
38.char * __cdecl strncat (char * front,const char * back,size_t count)  
39.{  
40.    char *start = front;  
41.      
42.    while (*front++)  
43.        ;  
44.    front--;  
45.      
46.    while (count--)  
47.        if (!(*front++ = *back++))  
48.            return(start);  
49.          
50.        *front = '/0';  
51.        return(start);  
52.}  
53.  
54.int __cdecl strncmp (const char * first,const char * last,size_t count)  
55.{  
56.    if (!count)  
57.        return(0);  
58.      
59.    while (--count && *first && *first == *last)  
60.    {  
61.        first++;  
62.        last++;  
63.    }  
64.      
65.    return( *(unsigned char *)first - *(unsigned char *)last );  
66.}  
67.  
68./* Copy SRC to DEST.  */  
69.char *  
70.strcpy (dest, src)  
71.char *dest;  
72.const char *src;  
73.{  
74.    reg_char c;  
75.    char *__unbounded s = (char *__unbounded) CHECK_BOUNDS_LOW (src);  
76.    const ptrdiff_t off = CHECK_BOUNDS_LOW (dest) - s - 1;  
77.    size_t n;  
78.      
79.    do  
80.    {  
81.        c = *s++;  
82.        s[off] = c;  
83.    }  
84.    while (c != '/0');  
85.      
86.    n = s - src;  
87.    (void) CHECK_BOUNDS_HIGH (src + n);  
88.    (void) CHECK_BOUNDS_HIGH (dest + n);  
89.      
90.    return dest;  
91.}  
92.  
93.char * __cdecl strncpy (char * dest,const char * source,size_t count)  
94.{  
95.    char *start = dest;  
96.      
97.    while (count && (*dest++ = *source++))    /* copy string */  
98.        count--;  
99.      
100.    if (count)                              /* pad out with zeroes */  
101.        while (--count)  
102.            *dest++ = '/0';  
103.          
104.        return(start);  
105.}  
 

有关狂想曲的修订


程序员面试题狂想曲-tctop（the crazy thinking of programers）的修订wiki（http://tctop.wikispaces.com/）已于今天建立，我们急切的想得到读者的反馈，意见，建议，以及更好的思路，算法，和代码优化的建议。所以，
•如果你发现了狂想曲系列中的任何一题，任何一章（http://t.cn/hgVPmH）中的错误，问题，与漏洞，欢迎告知给我们，我们将感激不尽，同时，免费赠送本blog内的全部博文集锦的CHM文件1期；
•如果你能对狂想曲系列的创作提供任何建设性意见，或指导，欢迎反馈给我们，并真诚邀请您加入到狂想曲的wiki修订工作中；
•如果你是编程高手，对狂想曲的任何一章有自己更好的思路，或算法，欢迎加入狂想曲的创作组，以为千千万万的读者创造更多的价值，更好的服务。
Ps：狂想曲tctop的wiki修订地址为：http://tctop.wikispaces.com/。欢迎围观，更欢迎您加入到狂想曲的创作或wiki修订中。

--------------------------------------------------------------------------------

版权所有，本人对本blog内所有任何内容享有版权及著作权。实要转载，请以链接形式注明出处。
 
分享到： 

上一篇：程序员编程艺术：第三章续、Top K算法问题的实现
 下一篇：程序员编程艺术：第五章、寻找满足和为定值的两个或多个数
 . 


查看评论
 
80楼 zhschhan 前天 09:41发表 [回复] strstr的实现，if(lenstr < lensub) return -1;应该不需要吧，因为此时 len = lenstr - lensub为负数，后面的if语句不能执行。79楼 solotzg 2013-04-25 16:09发表 [回复] 请问博主，在做strcpy等带有拷贝性质的函数时是不是还要考虑目的字符串包含在源字符串内的情况。。。Re: zhschhan 前天 09:48发表 [回复] 回复solotzg：我觉得不用（个人看法），因为memcpy这个函数也没考虑这么多，strcpy其实也没考虑这么多，而且连目的地址内存大小是不是够都没考虑进去。保险起见还是 strncpy可靠些78楼 SuperKiller009 2012-12-07 17:14发表 [回复] strtok函数实现有问题，最后一个分隔符后面的部分会取不到，建议增加：
 if (*strToken && strToken == last)
 {
 last = NULL;
 return strToken;
 }77楼 随意随心 2012-11-20 20:58发表 [回复] 看了这么多，我也想研究算法了，本来对于编程的兴趣就没算法大，还有一年毕业的，不知道该不该朝着算法方向发展？另外，我的邮箱1026961500@qq.com76楼 juvenfan 2012-10-08 08:48发表 [回复] 



01.char* strchr(const char *str, int c)  
02.{  
03.    assert(str != NULL);  
04.    for (; *str != (char)c; ++str)  
05.    {  
06.        if ('\0' == *str)  
07.        {  
08.            return NULL;  
09.        }  
10.  
11.    }  
12.    return (char*)str;  
13.}  
Re: juvenfan 2012-10-08 08:50发表 [回复] 回复juvenfan：第三节的第二个函数
char* strchr(const char* str, int c)
的实现有点小问题，测试环境gcc75楼 chenyuminggoodboy 2012-10-06 19:48发表 [回复] 真的大牛是分享的，所以你就分享了，呵呵74楼 lifu119 2012-04-27 16:27发表 [回复] strstr中 *s == 0是否应该直接返回NULL? 主串剩余字符长度不够73楼 wojiushi3344 2012-04-18 21:04发表 [回复] 很好，以前零零散散看过。这次终于找了个比较全的。太感谢了。72楼 xiaohui5319 2012-04-18 10:39发表 [回复] 对了，还有int lenstr=strlen(string);这是不安全的吧？
strlen函数的返回类型是size_t型，也就是无符号整型，假如我的数组长度很长（假如是用堆分配的，可以很大很大），长过2的31次方减1的话，会发生一处，你这lenstr就会变成负值了。。。

我觉得还是用size_t类型最保险Re: v_JULY_v 2012-04-18 10:43发表 [回复] 回复xiaohui5319：谢谢71楼 xiaohui5319 2012-04-18 10:35发表 [回复] 楼主啊，对于你那个strstr的函数，我觉得有点小问题。
我查了一下C标准库的源码，它给的声明是这样的，两个参数都有const。
char *
STRSTR (const char *haystack_start, const char *needle_start)

而且标准库中没有调用strlen函数，因为假如你是标准库的设计者，strlen()函数还没设计出来，你怎么去计算两个字符串的长度？是不是只能通过指针移动来实现，我觉得这些都是微软要考察的地方。Re: v_JULY_v 2012-04-18 10:39发表 [回复] 回复xiaohui5319：是的，非常感谢，已经反馈到原文中，thanks70楼 mickel917 2012-03-14 14:04发表 [回复] 楼主是不是字符串结尾的'/0'都弄反了呢？应该改成'\0'吧~Re: whateverwhat 2012-03-22 22:08发表 [回复] 回复mickel917：是啊，应该是‘\0’而不是‘/0’吧69楼 fresh840 2012-01-05 14:25发表 [回复] 楼主果然有时间哈，学习总是要花费大量时间的~68楼 liuq6987 2011-10-21 10:22发表 [回复] 很全，很感谢楼主67楼 a5401103a 2011-10-10 10:17发表 [回复] void *memcpy(void *dest, const void *src, unsigned int count) 
{ 
assert((dest != NULL) && (src != NULL)); 
void *address = dest; 
while (count --) 
{ 
*(char *) dest = *(char *) src; 
dest = (char *) dest + 1; 
src = (char *) src + 1; 
} 
return address; 
} 
您好我是初学者，不知道这里为什么用return语句，void不是不能有返回值么？66楼 xiaolomg 2011-08-31 17:24发表 [回复] 纳闷的是为什么博主写那么多东西，函数至少来一句实现功能注释吧，so many lib fuctions 谁知道都是什么作用呢?65楼 GODCUPID 2011-08-22 11:09发表 [回复] 最近要毕业找工作，啥也不说了，就看你博客了64楼 pwei007 2011-08-21 16:00发表 [回复] 博主的正反斜杠是不是都搞反了呢......Re: v_JULY_v 2011-08-22 08:18发表 [回复] 回复pwei007：恩?63楼 wohu1104 2011-07-18 21:25发表 [回复] 楼主，能否给我也发一份，我是菜鸟找不出什么bug，但是很想学习下 感激不尽！！ wohu1104@163.com62楼 henuwujun 2011-07-14 10:02发表 [回复] strcspn好像不对吧，都不在str中的情况呢？61楼 漠漠兔八哥 2011-07-04 09:40发表 [回复] july，我有一个问题，strcat函数，当你将strSrc的内容拷到strDes的时候，strDes其实已经越界了，所以strcat的代码应该是有些问题的，你再看一下~60楼 shizhy 2011-06-18 16:15发表 [回复] 马上找工作了，lz的博客太有用了，留下我邮箱，希望得到lz的博文呀，shizhy1986@qq.com59楼 neil_zhhyu 2011-06-17 16:21发表 [回复] 这几天专心看你写的文章，概括的挺全的，主要是具有启发性，挺好，支持你哦。发我一份呗，谢谢了呢！neil_y@126.com58楼 luuillu 2011-06-12 10:37发表 [回复] 算法导论中认为，函数strstr的时间复杂度为O（（n-m+1）*m）. 对于确定的n，查找时间t先随m的增加而增大，当m=(n+1)/2时达到最大值，然后t随m的增大而减小。（n-m+1）*m=-m^2+(n+1)m,是关于m的二次函数，而不是线性函数。Re: v_JULY_v 2011-06-12 10:41发表 [回复] 回复 luuillu：恩，这篇文章的问题最多，日后做同一修改。thanks，[e10]Re: luuillu 2011-06-12 10:41发表 [回复] 回复 luuillu：在算法导论中“第三十二章 字符串匹配”中的“朴素字符串匹配算法”。57楼 qq312873977 2011-06-07 11:08发表 [回复] 1.2可以用一个数组arr，元素初始化为-1，当扫描到一个字符ch时，如果arr[ch-'a']！=-1，arr[ch-'a']=-1，否组arr[ch-'a']=ch在数组里的下标，最后扫描arr数组，第一个不等于-1的元素即为所找，这样当原字符串很长的时候，只需扫描最多26次Re: v_JULY_v 2011-06-07 11:22发表 [回复] 回复 qq312873977：[e03]，[e10]，谢谢。日后统一修改添补。56楼 iealien 2011-06-05 01:01发表 [回复] 下面的标准库中要强制转换的，因为strcmp是按Ascii比较的，而ascii是的范围为0-255， char 的范围为-127-127，输入为负值时候会返回错误，顺便支持下LZRe: v_JULY_v 2011-06-05 18:04发表 [回复] 回复 iealien：非常感谢，有任何问题，欢迎随时指正，在以后的勘误修订中会统一修正。谢谢你，[e10]55楼 iealien 2011-06-05 01:01发表 [回复] strcmp函数返回值，应该要强制转换的：
return *(const unsigned char *)s-*(const unsigned char *)s54楼 v_JULY_v 2011-06-02 19:28发表 [回复] 接下来，还想要的文件，先找出本blog中的一个bug，再考虑吧。53楼 ruizeng88 2011-06-02 16:16发表 [回复] 一直在关注lz的博客，收益颇多！希望也能收到一份十三个经典算法研究系列+红黑树系列！谢谢～我的邮箱是ruizeng88@gmail.com52楼 burellow 2011-06-02 13:22发表 [回复] [e01]51楼 jinjiating 2011-06-01 23:58发表 [回复] 抄在本上，笔试时带上Re: v_JULY_v 2011-06-02 19:30发表 [回复] 回复 jinjiating：本章中有些代码，仍残留着bug，千万勿全信，friends。[e10]50楼 huang12315 2011-05-30 23:31发表 [回复] 楼主你好，本人水平有限也不能指出有什么问题，能不能也将您的那些系列发给我额？想把它打印出来……
如果可以的话，我邮箱是 394674525@qq.com
谢谢……49楼 v_JULY_v 2011-05-29 15:36发表 [回复] blog上留言的朋友，十三个经典算法研究系列+红黑树系列。已经全部发送。注意保护好本人版权相关利益。谢谢大家。48楼 zzbatluzhou 2011-05-28 21:44发表 [回复] 哦，忘了留邮箱了。
go123321-01@yahoo.com.cn47楼 zzbatluzhou 2011-05-28 21:42发表 [回复] 膜拜，学习中......[e03]46楼 joyelly 2011-05-27 11:13发表 [回复] 支持！自己也应该多写写这些函数！
邮箱 xx_lizzie_x@hotmail.com
楼主别忘了发送pdf哦~多谢~45楼 erazy0 2011-05-25 00:47发表 [回复] strcat函数里的NULL不需要吧，分号直接放在上一句while后面44楼 erazy0 2011-05-25 00:41发表 [回复] //查找字符串s中首次出现字符c的位置
最后的return str缩进应该和for循环一样吧Re: v_JULY_v 2011-05-25 00:47发表 [回复] 回复 erazy0：朋友，加入狂想曲的wiki吧：http://tctop.wikispaces.com/。谢谢你。43楼 奋斗小子 2011-05-24 16:14发表 [回复] 虽然是一些简单的函数,但是大公司经常会考的啊.....42楼 yaminghe 2011-05-24 02:12发表 [回复] strtok's implementation is wrong. strToken can be NULL for a sequence calling of strtok. I will post my implementation to your wiki.41楼 mo_guang 2011-05-21 22:48发表 [回复] 我有个疑问：
char *strcat(char *strDes, const char *strSrc) 
{ 
//...... 
return address; 
} 
对于两个字符指针指向同一指针的情况，是否应该要考虑判断一下？Re: v_JULY_v 2011-05-22 15:02发表 [回复] 回复 moxiaomomo：恩，是的，下周返回时，统一修正。40楼 mo_guang 2011-05-21 22:40发表 [回复] 还有我，别落下我了~~809444138@qq.com。我以后常来撑你Re: v_JULY_v 2011-05-22 15:02发表 [回复] 回复 moxiaomomo：[e10]Re: v_JULY_v 2011-05-25 14:07发表 [回复] 回复 v_JULY_v：已经发送，请查收。39楼 Ever_lover 2011-05-20 13:33发表 [回复] 大牛，我的邮箱499032662@qq.com，祈祷ing.......Re: v_JULY_v 2011-05-21 10:31发表 [回复] 回复 Ever_lover：好的，会有的，都会有的，[e10]Re: Ever_lover 2011-05-21 22:21发表 [回复] 回复 v_JULY_v：谢谢38楼 Ever_lover 2011-05-20 13:31发表 [回复] 关于字符串的函数能写出来个%70.但是做到这么好，还有很远距离37楼 wohu1104 2011-05-19 23:34发表 [回复] [e01][e01][e01][e01]36楼 Linday 2011-05-19 20:22发表 [回复] 看不懂35楼 chenjelly 2011-05-19 10:36发表 [回复] 第三部分的strrev，也可以用^进行交换呢[e04]Re: v_JULY_v 2011-05-19 16:40发表 [回复] 回复 chenjelly：恩，非常感谢你，我晚点都修正下。[e10]34楼 chenjelly 2011-05-19 10:18发表 [回复] 第三部分的strchr，返回的是const char*，而定义要求的是 char*？33楼 lieye_leaves 2011-05-18 21:58发表 [回复] hehe 好文32楼 butter0000 2011-05-18 16:06发表 [回复] strtok函数，当str为多个字符的时候，是不是有问题呢？我测的有问题呀，比如 3234，str为23，输出为空Re: v_JULY_v 2011-05-25 13:23发表 [回复] 回复 butter0000：已经修改，您再测试下?[e10]Re: v_JULY_v 2011-05-18 17:10发表 [回复] 回复 butter0000：恩，看下，可能是有问题，谢谢Re: v_JULY_v 2011-05-18 17:13发表 [回复] 回复 v_JULY_v：晚点，再修正。31楼 butter0000 2011-05-18 15:50发表 [回复] 大牛，可以将STL中的类似vector等容器的也写下么Re: Ever_lover 2011-05-20 13:32发表 [回复] 回复 butter0000：
如果能写下stl，太好了30楼 juneafternoon 2011-05-18 14:00发表 [回复] [e01]29楼 wxcllb20100 2011-05-18 13:28发表 [回复] 看了你的细节感觉以前自己是眼高手低了，静下心来将一些库函数自己实现下发现还是收获良多，谢谢！！ 我的邮箱wxcllb@163.com，感谢您的无私分享！！！Re: v_JULY_v 2011-05-18 13:31发表 [回复] 回复 wxcllb20100：眼高手低，每个人都有点，我也是，相互学习。28楼 langcai1981 2011-05-18 13:15发表 [回复] 关注中27楼 xj_20110101 2011-05-18 10:00发表 [回复] 好东西啊！这些库函数，不常写，经常忘。偏偏笔试、面试有经常考。囧[e01]26楼 lwx496 2011-05-18 09:52发表 [回复] 回复 v_JULY_v：麻烦发我一份啊。lwx496@qq.com。谢了[e01]Re: v_JULY_v 2011-05-18 11:10发表 [回复] 回复 lwx496：ok，都没问题，以后统一传送。25楼 wentao308 2011-05-18 09:30发表 [回复] 回复 v_JULY_v：[e03], 哈哈，我想要，wentao1988@126.com, tks!!24楼 v_JULY_v 2011-05-17 22:13发表 [回复] 凡是现在以后，支持或批评本篇文章的，全都免费赠送一份十三个经典算法研究系列+红黑树系列的，带标签+目录的PDF文档（346页），想要的，评论后，留下邮箱。23楼 Forrest0579 2011-05-17 21:00发表 [回复] [e01]22楼 v_JULY_v 2011-05-17 20:15发表 [回复] 多谢以上所有的朋友，唯一的这篇不能丢掉推荐阿，各位多多支持，多多支持，[e10]21楼 zhengjiaxiang135 2011-05-17 20:14发表 [回复] 十分钟要写出健壮的代码，确实是有难度。20楼 chenzhen1801 2011-05-17 12:20发表 [回复] [e01][e02][e03][e04]19楼 ThinkArt 2011-05-17 11:16发表 [回复] [e03]十分钟完美写出还是有难度的18楼 yanshazi 2011-05-17 11:03发表 [回复] 十分钟写好一个库函数还是蛮有压力啊17楼 zhang19890830 2011-05-17 10:57发表 [回复] [e03][e01]16楼 sinoghy 2011-05-16 16:51发表 [回复] [e01]15楼 chen__1 2011-05-16 16:45发表 [回复] [e01]14楼 yoyooooo 2011-05-16 10:58发表 [回复] [e01]13楼 nehc 2011-05-15 23:32发表 [回复] 大量的断言，release下么有了断言是不是就一定没有了非法参数？

我还是觉得不太靠谱...(个人想法）Re: v_JULY_v 2011-05-16 00:18发表 [回复] 回复 cenziboy：恩，会酌情考虑你的想法，或许日后会去掉断言，全部改写下。Re: nehc 2011-05-16 00:24发表 [回复] 回复 v_JULY_v： 这只是我个人的想法，前几天笔试，考官只看assert(),有assert()的就可以面试，没的直接kill...觉得愤愤...Re: v_JULY_v 2011-05-16 00:27发表 [回复] 回复 cenziboy：考官的一面之词，一家之言。哥们，放宽心。12楼 漠漠兔八哥 2011-05-15 10:58发表 [回复] [e01]11楼 FanTasyCC 2011-05-14 18:20发表 [回复] 这些细节确实能说明一个人的技术内力，但是不能作为唯一，鉴定完毕Re: v_JULY_v 2011-05-14 20:15发表 [回复] 回复 chollima：[e03]10楼 十一文 2011-05-14 11:32发表 [回复] 一个不注意 落后了 jiongRe: v_JULY_v 2011-05-14 12:08发表 [回复] 回复 xming4321：内部消息，第五章，一分钟后发布，[e04]9楼 nnnnyyyy 2011-05-14 11:05发表 [回复] 比较讨厌这种手写代码的面试Re: v_JULY_v 2011-05-14 11:09发表 [回复] 回复 nnnnyyyy：[e04]8楼 iicup 2011-05-14 07:52发表 [回复] 第一节、字符串查找
除非题目已经给出函数原型，作为亚洲人，最好认为“字符”是
‘/u0000’~‘/uffff’而不是0x00~0xff，
西方人士的此种默认实现已经给我们带来无尽烦恼。
说实话，0x00~0xff的字符串函数对中国人来说只是“字节”处理函数，而非“字符”处理函数。Re: v_JULY_v 2011-05-14 09:54发表 [回复] 回复 iicup：what?7楼 lanboyj 2011-05-13 22:25发表 [回复] 学习了，原来在处理void*时，把它当作char*来处理了啊
还有，这些内存的操作中，int count是不是改为unsigned int 更好 ？Re: v_JULY_v 2011-05-13 22:28发表 [回复] 回复 lanboyj：en，好的，这就听从你的建议6楼 Kewpie_007 2011-05-13 19:54发表 [回复] 楼主的memmove函数貌似并没有处理内存重叠问题，看起来是memcpy，还是我理解有误？Re: v_JULY_v 2011-05-13 20:09发表 [回复] 回复 Kewpie_007：您再 看一下?5楼 laoyi19861011 2011-05-13 19:25发表 [回复] strstr函数中 for (; *t != '/0'; ++ strSrc) 这条语句应该是 for (; *strSrc != '/0'; ++ strSrc) 吧，是否应该添加长度的比较，这样就可以少循环一些Re: v_JULY_v 2011-05-13 19:33发表 [回复] 回复 laoyi19861011：en，是4楼 xwc_hdu 2011-05-13 17:15发表 [回复] [e01]发现个错别字，the crazy thingking of programers.---thinking.Re: v_JULY_v 2011-05-13 17:24发表 [回复] 回复 xwc_hdu：恩，谢谢，这就修改下3楼 lwx496 2011-05-13 17:00发表 [回复] 还有，用assert好吗？上次被问到这个题，我也用了assert
debug下assert是可以；但release时assert不管用。Re: cwh5635 2011-05-14 20:57发表 [回复] 回复 lwx496：我这样理解assert的，它只是为了验证调用方是否会传非法参数进来，也就是检查调用方式不是有逻辑错误，而在debug版本测试完毕之后，同样的逻辑足够强壮，已经不会出现非法参数了。：）Re: lwx496 2011-05-16 08:25发表 [回复] 回复 cwh5635：那保险的做法是不是写成assert( (strDest != NULL) &amp;&amp; (strSrc != NULL) ); if( NULL == strDest || NULL == strSrc ) return NULL; assert可以在release时直接去掉Re: cwh5635 2011-06-02 13:28发表 [回复] 回复 lwx496：多此一举了。。。。if是为了保证代码的适用条件的，assert是为了让你知道这个时候传递了一个非法参数。2个的作用其实是一样的，如果每个函数都要用if判断的话，效率就慢了，事实上你如果在assert调试时候没有出错，基本上就能保证上层没错。好吧，其实我没见过2个都写的代码2楼 lwx496 2011-05-13 17:00发表 [回复] strcpy
如果源目所指区域有重叠的话是不是要在函数一开始加上
if(strDest == strSrc)
{
 return strDest;
}Re: wentao308 2011-05-18 09:31发表 [回复] 回复 lwx496：检查 strDest == strSrc ， 就能判断是否有重叠？Re: lwx496 2011-05-19 08:16发表 [回复] 回复 wentao308：只用检查首地址即可，首地址相同，就无需拷贝，直接返回。我觉得不管怎么样，这样都不能保证绝对的安全。标准库里的要实现安全的字符串拷贝，需用strncpy，把字符串个数传进去。而strcpy是把更多的自由留给程序员。Re: v_JULY_v 2011-05-13 17:02发表 [回复] 回复 lwx496：en，这就 改写。谢谢1楼 jiankangshiye 2011-05-13 16:47发表 [回复] 建议楼主用递归实现部分函数。Re: v_JULY_v 2011-05-13 16:52发表 [回复] 回复 jiankangshiye：递归?比如实现哪些函数?...Re: jiankangshiye 2011-05-13 17:39发表 [回复] 回复 v_JULY_v：strlen, strcmp,这两个以前实现过，或许其它的也可以用递归实现。Re: 源远流长 2011-06-10 09:58发表 [回复] 回复 jiankangshiye：为啥要用递归，递归性能不好。。
 


您还没有登录,请[登录]或[注册]
 
* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场
 








个人资料 

v_JULY_v 






访问：4195666次
 积分：25982分
 排名：第50名
 . 原创：134篇
 转载：0篇
 译文：5篇
 评论：10137条
 . 
博客公告 ①.本blog开通于2010年10月11日，高级C /Algorithms交流群：149977547；北京程序员联盟：172727781。②.狂热算法，热爱数据挖掘，关注机器学习、统计分析，爱好文学数学。③.微博：研究者July，邮箱：zhoulei0907@yahoo.cn，July，二零一三年三月二十九日。 
我的微博 
文章分类 03.Algorithms（实现）(9) 
01.Algorithms（研究）(27) 
02.Algorithms（后续）(22) 
04.Algorithms（讨论）(1) 
05.MS 100' original(7) 
06.MS 100' answers(13) 
07.MS 100' classify(4) 
08.MS 100' one Keys(6) 
09.MS 100' follow-up(3) 
10.MS 100' comments(4) 
11.TAOPP（编程艺术）(26) 
12.TAOPP string(6) 
13.TAOPP array(10) 
14.TAOPP list(2) 
15.stack/heap/queue(0) 
16.TAOPP tree(1) 
17.TAOPP c/c++(2) 
18.TAOPP function(2) 
19.TAOPP algorithms(7) 
20.number operations(1) 
21.Essays(8) 
22.Big Data Processing(5) 
23.Redis/MongoDB(0) 
24.data structures(12) 
25.Red-black tree(7) 
26.Image Processing(3) 
27.Architecture design(4) 
28.Source analysis(3) 
29.Recommend&Search(4) 
30.Machine L&Data Mining(5) 

博客专栏 




微软面试100题系列 
文章：17篇
 阅读：1246089 





程序员编程艺术 
文章：24篇
 阅读：859706 





经典算法研究 
文章：32篇
 阅读：1110608 

阅读排行 程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦(186260) 
九月十月百度人搜，阿里巴巴，腾讯华为笔试面试八十题(第331-410题)(141609) 
教你如何迅速秒杀掉：99%的海量数据处理面试题(137438) 
横空出世，席卷互联网--评微软等公司数据结构+算法面试100题(127653) 
从B树、B+树、B*树谈到R 树(122026) 
十道海量数据处理面试题与十个方法大总结(101549) 
九月腾讯，创新工场，淘宝等公司最新面试三十题（第171-200题）(87330) 
十一、从头到尾彻底解析Hash表算法(78387) 
微软公司等数据结构+算法面试100题(第1-100题)全部出炉(75912) 
支持向量机通俗导论（理解SVM的三层境界）(74609) 

评论排行 程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦(371) 
九月十月百度人搜，阿里巴巴，腾讯华为笔试面试八十题(第331-410题)(361) 
九月腾讯，创新工场，淘宝等公司最新面试三十题（第171-200题）(331) 
当今世界最为经典的十大算法--投票进行时(320) 
从B树、B+树、B*树谈到R 树(264) 
横空出世，席卷互联网--评微软等公司数据结构+算法面试100题(263) 
十三个经典算法研究与总结、目录+索引(216) 
我的大学生涯(214) 
程序员编程艺术第一章、左旋转字符串(203) 
三五杆枪，可干革命，三五个人，可以创业(198) 

最新评论 程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦 
v_JULY_v: @q1w2ok11:替我感谢你的同事:-) 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦 
q1w2ok11: 同事推荐，太给力了，必须好好学习，楼主辛苦 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦 
kiritor: 谢谢博主的分享,先收藏了 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦 
v_JULY_v: @zhouqinxiong:哪个学校呢？替我谢谢你的老师:-) 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦 
zhouqinxiong: 老师推荐的，lz，你的博客非常给力 

快速排序算法 
康天崽: 太给力了，我喜欢，爱死你了 

我的大学生涯 
msjcool: 看完楼主的经历，感觉自己弱爆了 

B树的C实现 
hao138548: 好贴 

教你如何迅速秒杀掉：99%的海量数据处理面试题 
xiyandeng: 虽然看得不是很懂，以后可以慢慢消化！感谢博主啊 

程序员编程艺术第一章、左旋转字符串 
dusx1981: void RightShift4(string &str, int k){ int len = st... 


01、本blog索引 3、微软100题维护地址
1、微软100题横空出世
5、经典算法研究系列
7、红黑树系列集锦
6、程序员编程艺术系列
2、微软面试全部100题
0、经典4大原创系列集锦
4、微软100题下载地址
 
02、Google or baidu? Google搜--"结构之法"（My BLOG）
baidu 搜--"结构之法"（My BLOG）
 
03、个人标签 本BLOG RSS订阅
zhoulei0907@yahoo.cn
csdn blog订阅排行榜
TAOPP修订wiki
julymsn@live.cn
电子工程网专家VIP
 博客园blog-成为推荐博客
 ITpub-代码优化专家
 
04、我的驻点 01. 为学论坛-万物皆数 终生为学
 02、Harry
 03、NoSQLFan
 04、酷勤网
 05、52nlp
 06、北大朋友的挖掘乐园
 07、跟Sophia_qing一起读硕士
 08、面试问答社区51nod
 09、韩寒
 10、我的有鱼
 11、曾经的叛逆与年少
 12、老D之MongoDB源码分析
 14、code4app:iOS代码示例
 17、斯坦福机器学习公开课
 18、TheItHome算法版块版主
 19、36氪--关注互联网创业
 20、德问--编程是一种艺术创作
 21、善科网
 22、百度搜索研发部
 23、淘宝搜索技术博客
 24、interviewstreet
 25、LeetCode
 26、Team_Algorithms人人小组
 
文章存档 
2013年03月(1).
2012年12月(1).
2012年11月(1).
2012年09月(1).
2012年06月(1).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

展开.
 

. 
公司简介|招贤纳士|广告服务|银行汇款帐号|联系方式|版权声明|法律顾问|问题报告QQ客服 微博客服 论坛反馈 联系邮箱：webmaster@csdn.net 服务热线：400-600-2320京 ICP 证 070598 号北京创新乐知信息技术有限公司 版权所有世纪乐知(北京)网络技术有限公司 提供技术支持江苏乐知网络技术有限公司 提供商务支持Copyright © 1999-2012, CSDN.NET, All Rights Reserved  
