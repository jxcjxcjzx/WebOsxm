
您还未登录！|登录|注册|帮助
 首页
 业界
 移动
 云计算
 研发
 论坛
 博客
 下载
 
更多
 







结构之法 算法之道

Google或baidu搜索：“结构之法”，进入本博客


 


目录视图
摘要视图
订阅
 . 



【免费有礼】欧美最新网络营销技巧分享        博客导入工具      【限时优惠】第五届云计算大会社区门票抢购 
探究云计算数据中心节能增效之道      专访邓凡平：Android开发路上的快速学习之道      CSDN博客第二期最佳移动开发博主评选 



程序员编程艺术：第五章、寻找满足和为定值的两个或多个数 
.
 分类： 13.TAOPP array11.TAOPP（编程艺术）2011-05-14 12:1323154人阅读评论(85)收藏举报
 
listListnumberssearchSearch算法编程

 
                      程序员编程艺术：第五章、寻找和为定值的两个或多个数
 

    作者：July，yansha，zhouzhenren。
    致谢：微软100题实现组，编程艺术室。
    微博：http://weibo.com/julyweibo   。
    出处：http://blog.csdn.net/v_JULY_v  。
    wiki：http://tctop.wikispaces.com/。
------------------------------

前奏

    希望此编程艺术系列能给各位带来的是一种方法，一种创造力，一种举一反三的能力。本章依然同第四章一样，选取比较简单的面试题，恭祝各位旅途愉快。同样，有任何问题，欢迎不吝指正。谢谢。


第一节、寻找和为定值的两个数
第14题（数组）：
题目：输入一个数组和一个数字，在数组中查找两个数，使得它们的和正好是输入的那个数字。
要求时间复杂度是O(n)。如果有多对数字的和等于输入的数字，输出任意一对即可。
例如输入数组1、2、4、7、11、15和数字15。由于4+11=15，因此输出4和11。

分析：

咱们试着一步一步解决这个问题（注意阐述中数列有序无序的区别）：
1.直接穷举，从数组中任意选取两个数，判定它们的和是否为输入的那个数字。此举复杂度为O（N^2）。很显然，我们要寻找效率更高的解法。
2.题目相当于，对每个a[i]，然后查找判断sum-a[i]是否也在原始序列中，每一次要查找的时间都要花费为O（N），这样下来，最终找到两个数还是需要O（N^2）的复杂度。那如何提高查找判断的速度列?对了，二分查找，将原来O（N）的查找时间提高到O（logN），这样对于N个a[i]，都要花logN的时间去查找相对应的sum-a[i]是否在原始序列中，总的时间复杂度已降为O（N*logN），且空间复杂度为O（1）。（如果有序，直接二分O（N*logN），如果无序，先排序后二分，复杂度同样为O（N*logN+N*logN）=O（N*logN），空间总为O（1））。
3.有没有更好的办法列?咱们可以依据上述思路2的思想，a[i]在序列中，如果a[i]+a[k]=sum的话，那么sum-a[i]（a[k]）也必然在序列中，，举个例子，如下：
原始序列：1、 2、 4、 7、11、15     用输入数字15减一下各个数，得到对应的序列为：
对应序列：14、13、11、8、4、 0      
第一个数组以一指针i 从数组最左端开始向右扫描，第二个数组以一指针j 从数组最右端开始向左扫描，如果下面出现了和上面一样的数，即a[*i]=a[*j]，就找出这俩个数来了。如上，i，j最终在第一个，和第二个序列中找到了相同的数4和11，，所以符合条件的两个数，即为4+11=15。怎么样，两端同时查找，时间复杂度瞬间缩短到了O（N），但却同时需要O（N）的空间存储第二个数组（@飞羽：要达到O(N)的复杂度，第一个数组以一指针i 从数组最左端开始向右扫描，第二个数组以一指针j 从数组最右端开始向左扫描，首先初始i指向元素1，j指向元素0，谁指的元素小，谁先移动，由于1（i）>0（j），所以i不动，j向左移动。然后j移动到元素4发现大于元素1，故而停止移动j，开始移动i，直到i指向4，这时,i指向的元素与j指向的元素相等，故而判断4是满足条件的第一个数；然后同时移动i,j再进行判断，直到它们到达边界）。
4.当然，你还可以构造hash表，正如编程之美上的所述，给定一个数字，根据hash映射查找另一个数字是否也在数组中，只需用O（1）的时间，这样的话，总体的算法通上述思路3 一样，也能降到O（N），但有个缺陷，就是构造hash额外增加了O（N）的空间，此点同上述思路 3。不过，空间换时间，仍不失为在时间要求较严格的情况下的一种好办法。
5.如果数组是无序的，先排序（n*logn），然后用两个指针i，j，各自指向数组的首尾两端，令i=0，j=n-1，然后i++，j--，逐次判断a[i]+a[j]?=sum，如果某一刻a[i]+a[j]>sum，则要想办法让sum的值减小，所以此刻i不动，j--，如果某一刻a[i]+a[j]<sum，则要想办法让sum的值增大，所以此刻i++，j不动。所以，数组无序的时候，时间复杂度最终为O（n*logn+n）=O（n*logn），若原数组是有序的，则不需要事先的排序，直接O（n）搞定，且空间复杂度还是O（1），此思路是相对于上述所有思路的一种改进。（如果有序，直接两个指针两端扫描，时间O（N），如果无序，先排序后两端扫描，时间O（N*logN+N）=O（N*logN），空间始终都为O（1））。（与上述思路2相比，排序后的时间开销由之前的二分的n*logn降到了扫描的O（N））。

总结：
•不论原序列是有序还是无序，解决这类题有以下三种办法：1、二分（若无序，先排序后二分），时间复杂度总为O（n*logn），空间复杂度为O（1）；2、扫描一遍X-S[i]  映射到一个数组或构造hash表，时间复杂度为O（n），空间复杂度为O（n）；3、两个指针两端扫描（若无序，先排序后扫描），时间复杂度最后为：有序O（n），无序O（n*logn+n）=O（n*logn），空间复杂度都为O（1）。
•所以，要想达到时间O（N），空间O（1）的目标，除非原数组是有序的（指针扫描法），不然，当数组无序的话，就只能先排序，后指针扫描法或二分（时间n*logn，空间O（1）），或映射或hash（时间O（n），空间O（n））。时间或空间，必须牺牲一个，自个权衡吧。
•综上，若是数组有序的情况下，优先考虑两个指针两端扫描法，以达到最佳的时（O（N）），空（O（1））效应。否则，如果要排序的话，时间复杂度最快当然是只能达到N*logN，空间O（1）则是不在话下。

代码：

ok，在进入第二节之前，咱们先来实现思路5（这里假定数组已经是有序的），代码可以如下编写（两段代码实现）：



01.//代码一  
02.//O（N）  
03.Pair findSum(int *s,int n,int x)     
04.{     
05.    //sort(s,s+n);   如果数组非有序的，那就事先排好序O（N*logN）     
06.      
07.    int *begin=s;     
08.    int *end=s+n-1;     
09.      
10.    while(begin<end)    //俩头夹逼，或称两个指针两端扫描法，很经典的方法，O（N）    
11.    {     
12.        if(*begin+*end>x)     
13.        {     
14.            --end;     
15.        }     
16.        else if(*begin+*end<x)     
17.        {     
18.            ++begin;     
19.        }     
20.        else    
21.        {     
22.            return Pair(*begin,*end);     
23.        }     
24.    }     
25.      
26.    return Pair(-1,-1);     
27.}     
28.  
29.//或者如下编写，  
30.//代码二  
31.//copyright@ zhedahht && yansha  
32.//July、updated，2011.05.14。  
33.bool find_num(int data[], unsigned int length, int sum, int& first_num, int& second_num)  
34.{     
35.    if(length < 1)  
36.        return true;  
37.      
38.    int begin = 0;  
39.    int end = length - 1;  
40.      
41.    while(end > begin)  
42.    {  
43.        long current_sum = data[begin] + data[end];  
44.          
45.        if(current_sum == sum)  
46.        {  
47.            first_num = data[begin];  
48.            second_num = data[end];  
49.            return true;  
50.        }  
51.        else if(current_sum > sum)  
52.            end--;  
53.        else  
54.            begin++;  
55.    }  
56.    return false;  
57.}  
 

 

扩展：
1、如果在返回找到的两个数的同时，还要求你返回这两个数的位置列?
2、如果把题目中的要你寻找的两个数改为“多个数”，或任意个数列?（请看下面第二节）
3、二分查找时： left <= right，right = middle - 1;left < right，right = middle; 

 


//算法所操作的区间,是左闭右开区间,还是左闭右闭区间,这个区间,需要在循环初始化,
//循环体是否终止的判断中,以及每次修改left,right区间值这三个地方保持一致,否则就可能出错.

//二分查找实现一
int search(int array[], int n, int v)
{
    int left, right, middle;
 
    left = 0, right = n - 1;
 
    while (left <= right)
    {
        middle = left + (right-left)/2;   
        if (array[middle] > v)
        {
            right = middle - 1;
        }
        else if (array[middle] < v)
        {
            left = middle + 1;
        }
        else
        {
            return middle;
        }
    }
 
    return -1;
}

//二分查找实现二
int search(int array[], int n, int v)
{
    int left, right, middle;
 
    left = 0, right = n;
 
    while (left < right)
    {
        middle = left + (right-left)/2;    
  
        if (array[middle] > v)
        {
            right = middle;
        }
        else if (array[middle] < v)
        {
            left = middle + 1;
        }
        else
        {
            return middle;
        }
    }
 
    return -1;
}


第二节、寻找和为定值的多个数
第21题（数组）
2010年中兴面试题
编程求解：
输入两个整数 n 和 m，从数列1，2，3.......n 中 随意取几个数,
使其和等于 m ,要求将其中所有的可能组合列出来。

解法一
我想，稍后给出的程序已经足够清楚了，就是要注意到放n，和不放n个区别，即可，代码如下：





01.// 21题递归方法  
02.//copyright@ July && yansha  
03.//July、yansha，updated。  
04.#include<list>  
05.#include<iostream>  
06.using namespace std;  
07.  
08.list<int>list1;  
09.void find_factor(int sum, int n)   
10.{  
11.    // 递归出口  
12.    if(n <= 0 || sum <= 0)  
13.        return;  
14.      
15.    // 输出找到的结果  
16.    if(sum == n)  
17.    {  
18.        // 反转list  
19.        list1.reverse();  
20.        for(list<int>::iterator iter = list1.begin(); iter != list1.end(); iter++)  
21.            cout << *iter << " + ";  
22.        cout << n << endl;  
23.        list1.reverse();      
24.    }  
25.      
26.    list1.push_front(n);      //典型的01背包问题  
27.    find_factor(sum-n, n-1);   //放n，n-1个数填满sum-n  
28.    list1.pop_front();  
29.    find_factor(sum, n-1);     //不放n，n-1个数填满sum   
30.}  
31.  
32.int main()  
33.{  
34.    int sum, n;  
35.    cout << "请输入你要等于多少的数值sum:" << endl;  
36.    cin >> sum;  
37.    cout << "请输入你要从1.....n数列中取值的n：" << endl;  
38.    cin >> n;  
39.    cout << "所有可能的序列，如下：" << endl;  
40.    find_factor(sum,n);  
41.    return 0;  
42.}  


解法二
@zhouzhenren：
这个问题属于子集和问题（也是背包问题）。本程序采用 回溯法+剪枝
X数组是解向量，t=∑(1,..,k-1)Wi*Xi, r=∑(k,..,n)Wi
若t+Wk+W(k+1)<=M,则Xk=true，递归左儿子(X1,X2,..,X(k-1),1)；否则剪枝；
若t+r-Wk>=M && t+W(k+1)<=M,则置Xk=0，递归右儿子(X1,X2,..,X(k-1),0)；否则剪枝；
本题中W数组就是(1,2,..,n),所以直接用k代替WK值。

代码编写如下：





01.//copyright@ 2011 zhouzhenren  
02.  
03.//输入两个整数 n 和 m，从数列1，2，3.......n 中 随意取几个数,  
04.//使其和等于 m ,要求将其中所有的可能组合列出来。  
05.  
06.#include <stdio.h>  
07.#include <stdlib.h>  
08.#include <memory.h>  
09.  
10./**  
11. * 输入t， r， 尝试Wk 
12. */  
13.void sumofsub(int t, int k ,int r, int& M, bool& flag, bool* X)  
14.{  
15.    X[k] = true;   // 选第k个数  
16.    if (t + k == M) // 若找到一个和为M，则设置解向量的标志位，输出解  
17.    {  
18.        flag = true;  
19.        for (int i = 1; i <= k; ++i)  
20.        {  
21.            if (X[i] == 1)  
22.            {  
23.                printf("%d ", i);  
24.            }  
25.        }  
26.        printf("/n");  
27.    }  
28.    else  
29.    {   // 若第k+1个数满足条件，则递归左子树  
30.        if (t + k + (k+1) <= M)  
31.        {  
32.            sumofsub(t + k, k + 1, r - k, M, flag, X);  
33.        }  
34.        // 若不选第k个数，选第k+1个数满足条件，则递归右子树  
35.        if ((t + r - k >= M) && (t + (k+1) <= M))  
36.        {  
37.            X[k] = false;  
38.            sumofsub(t, k + 1, r - k, M, flag, X);  
39.        }  
40.    }  
41.}  
42.  
43.void search(int& N, int& M)  
44.{  
45.    // 初始化解空间  
46.    bool* X = (bool*)malloc(sizeof(bool) * (N+1));  
47.    memset(X, false, sizeof(bool) * (N+1));  
48.    int sum = (N + 1) * N * 0.5f;  
49.    if (1 > M || sum < M) // 预先排除无解情况  
50.    {  
51.        printf("not found/n");  
52.        return;  
53.    }  
54.    bool f = false;  
55.    sumofsub(0, 1, sum, M, f, X);  
56.    if (!f)  
57.    {  
58.        printf("not found/n");  
59.    }  
60.    free(X);  
61.}  
62.  
63.int main()  
64.{  
65.    int N, M;  
66.    printf("请输入整数N和M/n");  
67.    scanf("%d%d", &N, &M);  
68.    search(N, M);  
69.    return 0;  
70.}  
 

扩展：

1、从一列数中筛除尽可能少的数使得从左往右看，这些数是从小到大再从大到小的（网易）。

2、有两个序列a,b，大小都为n,序列元素的值任意整数，无序；
要求：通过交换a,b中的元素，使[序列a元素的和]与[序列b元素的和]之间的差最小。
例如:  
var a=[100,99,98,1,2, 3];
var b=[1, 2, 3, 4,5,40];（微软100题第32题）。


    @well：[fairywell]:
给出扩展问题 1 的一个解法：
1、从一列数中筛除尽可能少的数使得从左往右看，这些数是从小到大再从大到小的（网易）。
双端 LIS 问题，用 DP 的思想可解，目标规划函数 max{ b[i] + c[i] - 1 }, 其中 b[i] 为从左到右， 0 ~ i 个数之间满足递增的数字个数； c[i] 为从右到左， n-1 ~ i 个数之间满足递增的数字个数。最后结果为 n - max + 1。其中 DP 的时候，可以维护一个 inc[] 数组表示递增数字序列，inc[i] 为从小到大第 i 大的数字，然后在计算 b[i] c[i] 的时候使用二分查找在 inc[] 中找出区间 inc[0] ~ inc[i-1] 中小于 a[i] 的元素个数（low）。
源代码如下：




01./** 
02.* The problem: 
03.* 从一列数中筛除尽可能少的数使得从左往右看，这些数是从小到大再从大到小的（网易）。 
04.* use binary search, perhaps you should compile it with -std=c99 
05.* fairywell 2011 
06.*/  
07.#include <stdio.h>  
08.  
09.#define MAX_NUM    (1U<<31)  
10.  
11.int  
12.main()  
13.{  
14.    int i, n, low, high, mid, max;  
15.      
16.    printf("Input how many numbers there are: ");  
17.    scanf("%d/n", &n);  
18.    /* a[] holds the numbers, b[i] holds the number of increasing numbers 
19.    * from a[0] to a[i], c[i] holds the number of increasing numbers 
20.    * from a[n-1] to a[i] 
21.    * inc[] holds the increasing numbers 
22.    * VLA needs c99 features, compile with -stc=c99 
23.    */  
24.    double a[n], b[n], c[n], inc[n];  
25.      
26.    printf("Please input the numbers:/n");  
27.    for (i = 0; i < n; ++i) scanf("%lf", &a[i]);  
28.      
29.    // update array b from left to right  
30.    for (i = 0; i < n; ++i) inc[i] = (unsigned) MAX_NUM;  
31.    //b[0] = 0;  
32.    for (i = 0; i < n; ++i) {  
33.        low = 0; high = i;  
34.        while (low < high) {  
35.            mid = low + (high-low)*0.5;  
36.            if (inc[mid] < a[i]) low = mid + 1;  
37.            else high = mid;  
38.        }  
39.        b[i] = low + 1;  
40.        inc[low] = a[i];  
41.    }  
42.      
43.    // update array c from right to left  
44.    for (i = 0; i < n; ++i) inc[i] = (unsigned) MAX_NUM;  
45.    //c[0] = 0;  
46.    for (i = n-1; i >= 0; --i) {  
47.        low = 0; high = i;  
48.        while (low < high) {  
49.            mid = low + (high-low)*0.5;  
50.            if (inc[mid] < a[i]) low = mid + 1;  
51.            else high = mid;  
52.        }  
53.        c[i] = low + 1;  
54.        inc[low] = a[i];  
55.    }  
56.      
57.    max = 0;  
58.    for (i = 0; i < n; ++i )  
59.        if (b[i]+c[i] > max) max = b[i] + c[i];  
60.        printf("%d number(s) should be erased at least./n", n+1-max);  
61.        return 0;  
62.}  
 

@yansha：fairywell的程序很赞，时间复杂度O(nlogn)，这也是我能想到的时间复杂度最优值了。不知能不能达到O(n)。


扩展题第2题

当前数组a和数组b的和之差为
    A = sum(a) - sum(b)

a的第i个元素和b的第j个元素交换后，a和b的和之差为
    A' = sum(a) - a[i] + b[j] - （sum(b) - b[j] + a[i])
           = sum(a) - sum(b) - 2 (a[i] - b[j])
           = A - 2 (a[i] - b[j])

设x = a[i] - b[j]，得
    |A| - |A'| = |A| - |A-2x|

    假设A > 0,

    当x 在 (0,A)之间时，做这样的交换才能使得交换后的a和b的和之差变小，x越接近A/2效果越好,
    如果找不到在(0,A)之间的x，则当前的a和b就是答案。

所以算法大概如下：
    在a和b中寻找使得x在(0,A)之间并且最接近A/2的i和j，交换相应的i和j元素，重新计算A后，重复前面的步骤直至找不到(0,A)之间的x为止。 

接上，@yuan：
a[i]-b[j]要接近A/2，则可以这样想，
我们可以对于a数组的任意一个a[k],在数组b中找出与a[k]-C最接近的数（C就是常数，也就是0.5*A）
这个数要么就是a[k]-C，要么就是比他稍大，要么比他稍小，所以可以要二分查找。

查找最后一个小于等于a[k]-C的数和第一个大于等于a[k]-C的数，
然后看哪一个与a[k]-C更加接近，所以T(n) = nlogn。

除此之外，受本文读者xiafei1987128启示，有朋友在stacoverflow上也问过一个类似的题，:-)，见此：http://stackoverflow.com/questions/9047908/swap-the-elements-of-two-sequences-such-that-the-difference-of-the-element-sums。感兴趣的可以看看。

本章完。

--------------------------------------------------------------------------------

 


程序员面试题狂想曲-tctop（the crazy thinking of programers）的修订wiki（http://tctop.wikispaces.com/）已建立，我们急切的想得到读者的反馈，意见，建议，以及更好的思路，算法，和代码优化的建议。所以，

•如果你发现了狂想曲系列中的任何一题，任何一章（http://t.cn/hgVPmH）中的错误，问题，与漏洞，欢迎告知给我们，我们将感激不尽，同时，免费赠送本blog内的全部博文集锦的CHM文件1期；
•如果你能对狂想曲系列的创作提供任何建设性意见，或指导，欢迎反馈给我们，并真诚邀请您加入到狂想曲的wiki修订工作中；
•如果你是编程高手，对狂想曲的任何一章有自己更好的思路，或算法，欢迎加入狂想曲的创作组，以为千千万万的读者创造更多的价值，更好的服务。
Ps：狂想曲tctop的wiki修订地址为：http://tctop.wikispaces.com/。欢迎围观，更欢迎您加入到狂想曲的创作或wiki修订中。 

版权所有，本人对本blog内所有任何内容享有版权及著作权。实要转载，请以链接形式注明出处。
 
分享到： 

上一篇：程序员编程艺术：第四章、现场编写类似strstr/strcpy/strpbrk的函数
下一篇：十四、第三章再续：快速选择SELECT算法的深入分析与实现
 . 


查看评论
 
54楼 wm3418925 2013-04-15 15:42发表[回复] 扩展第一题理解了
第二题, 我自己推敲了下
A,B 两个集合可以互换元素. 其实就相当于A,B集合从2N个数里面各抽取N个数, 使得集合所有元素和相差最小. 使用某种算法求得差值最小的一个组合. 然后根据这个结果来确定怎么交换53楼 hepper 2013-04-01 18:17发表[回复] 扩展一的代码有问题啊，运行结果出现负数。而且单独看b[i]的计算结果也不对52楼 toyakoyopxf 2013-03-26 17:27发表[回复] 首先看你的博客学到了很多东西，在此表示感谢！
关于14题无序无法达到O（n）的复杂度，在下无法苟同
1 .对数组进行预处理，即用哈希的方法去重复，再输出，还未无序数列，O(n)
2.遍历处理过的数组，仍用哈希的方法，一次将该数和sum减去该数放入哈希表，就是一次放两个数入表 O(n)
3.若插入时该数已经存在，说明已经找到了和为SUM的两个数，直接输出
综上，能以O（n）的复杂度解决问题Re: zhschhan 前天 10:13发表[回复] 回复toyakoyopxf：你这空间复杂度也是o(n)了，博主已经提到了。51楼 programming_hard 2013-03-09 02:18发表[回复] 在实际中碰到一个本题目的进一步扩展：在给定的N个数的数据集中，寻找和小于或等于M的数的组合，且按照他们的和与M的差的大小排序，找到前L个组合。
题目的复杂度突然又增加了不少。正在思考解法。用什么数据结构存储前L个组合？每个组合的数字个数通常是不同的。

大家有什么思路？50楼 liuxiaobin_bluegiant 2013-03-08 21:15发表[回复] void sumofsub(int t, int k ,int r, int& M, bool& flag, bool* X) 
方法尾部的 if ((t + r - k >= M) && (t + (k+1) <= M)) 判定条件，前一个条件即(t + r - k >= M)其实是在断定是否为最后一个元素，什么时候出现<M情况呢？
看下能否把该方法改成如下：
void sumofsub2(int t,int k,int& N,int& M,bool& flag,bool* X){
 
X[k]=true;//选k
 if(t+k==M){
 flag=true;
 for(int i=1;i<=k;i++)
 {
 if(X[i])
 printf("%d ",i);
 }
 printf("^^^^^ %d\n",++num2);
 }else{

 if(t+k+(k+1)<=M){
 sumofsub2(t+k,k+1,N,M,flag,X);
 }
 if(k<N&&(t+(k+1)<=M)){
 X[k]=false;
 sumofsub2(t,k+1,N,M,flag,X);
 }
 }

}

其中N为数目，不会变化，大家测试下。49楼 striveth 2013-03-05 17:23发表[回复] 扩展1中计算c[i]的结果不对，high = i 应该改为 high = n-1-i48楼 nciaebupt 2012-12-26 23:14发表[回复] 扩展1的代码博主运行了么？代码貌似不对吧？对于数列1,4,3,5,6,7,2,0我的运行结果为什么是-3?望请指教！47楼 ailunfeisite1 2012-11-30 23:54发表[回复] 谢谢，网易那道题很有意思。
最后一题的greedy解法，似乎不对，因为没有考虑同时交换多个元素的效应。46楼 kmarkkk 2012-10-21 00:26发表[回复] 你好, 读了你的博客真的是受益匪浅.不过最后一题我有点疑问

a[i]-b[j]要接近A/2，则可以这样想，
我们可以对于a数组的任意一个a[k],在数组b中找出与a[k]-C最接近的数（C就是常数，也就是0.5*A）
这个数要么就是a[k]-C，要么就是比他稍大，要么比他稍小，所以可以要二分查找。

这两个数组都没有排序,为什么可以二分查找? 是不是还是得先排序啊?45楼 baseball11 2012-09-17 11:26发表[回复] 思路3中 双数组同时扫描，在未排序时能达到0(N)?如果数组为8，1，7，4，9，对应数组为7，14，8，11，6，扫描时就出不了结果。一直觉得很困惑44楼 jay063409 2012-09-16 21:07发表[回复] 1、从一列数中筛除尽可能少的数使得从左往右看，这些数是从小到大再从大到小的(编译后结果没问题，不知道代码有没有问题，请楼主看看)
#include <stdio.h>
#include <stdlib.h>

#define MAX_NUM (1U << 31)
int checkSeq(int *num, int n)
{
 int i, max, start = 0;
 int *b = (int *)malloc(sizeof(int)*n);
 int *c = (int *)malloc(sizeof(int)*n);

 b[0] = 1;
 for(i = 1; i < n; i++)
 {
 if(num[i - 1] < num[i])
 b[i] = b[i-1] + 1;
 else
 b[i] = 1;
 }

 c[n-1] = 1;
 for(i = n - 2; i >= 0; i--)
 {
if(num[i+1] < num[i])
 c[i] = c[i+1] + 1;
 else
 c[i] = 1;
 }

 max = 0;
 for(i = 0; i < n; i++)
 {
 if(b[i] + c[i] > max)
 {
 max = b[i] + c[i];
 start = i - b[i];
 }
 }
 printf("the sequence is :\n");
 for(i = start+1; i < start + max; i++)
 printf("%d ", num[i]);
 printf("\n");

 free(b);
 free(c);

 return (n - max + 1);
}


int main()
{
 int num[] = {3,2,4,3,7,2,3,4,5,6,4,3,2,1,6,7,8,2};
 printf("%d numbers should be erased at least\n", checkSeq(num, 18));
}43楼 waytofall 2012-09-10 10:19发表[回复] 原题方法3是不是要先排序啊？？先排序然后相当于查找两个表中是否有相同的元素？？不排序好像复杂度会高，或者结果不对。。。个人意见42楼 v_JULY_v 2012-09-08 06:42发表[回复] 一位朋友对此21题的解答：http://blog.csdn.net/daxiamit/article/details/795706741楼 xiafei1987128 2012-07-31 15:15发表[回复] 扩展2是一个等价于背包的NP问题，你的贪心法是不对的http://stackoverflow.com/questions/9047908/swap-the-elements-of-two-sequences-such-that-the-difference-of-the-element-sumsRe: ailunfeisite1 2012-11-30 23:56发表[回复] 回复xiafei1987128：stackoverflow这道题是 差值而July的题是差值的绝对值，不一样。40楼 paranoid2006 2012-07-05 10:45发表[回复] 中兴那题，用sum=3500，n=3500测试就栈溢出(VS2008)。这个有点太脆弱了，对递归越来越担心。Re: v_JULY_v 2012-07-05 17:17发表[回复] 回复paranoid2006：你觉得，该如何解决避免？39楼 ellaqi 2012-07-02 19:46发表[回复] 伤了，为什么你这里的评论字体是细斜体的，看着太费劲了Re: v_JULY_v 2012-07-02 19:52发表[回复] 回复ellaqi：csdn 博客系统本身的显示问题，sorry，偶也没办法..38楼 v_JULY_v 2012-06-27 01:18发表[回复] from 李爽：
Hi, July,
首先，感谢你编出了这么好的电子书，如你所言，真是世上最靠谱的中文算法blog喔！我最近正在研读，思维之巧，态度之诚真是令人钦佩！谢谢！
 
我在书中发现了一处bug：
第五章，寻找满足条件的两个数或多个数，扩展问题1：
从一列数中删除尽可能少的数使得从左往右看，这些数是从小到大再从大到小的。
首先，我很佩服fairywell的思路，我自己尝试解了一下，跟他的做法相比，就笨到不好意思告诉别人了……
但是其中c[i]数组的计算是有bug的
以a[10] = {2,3,5,1,0,9,7,8,4,6}为例，
计算出相应的c[i]是：1232132211
c[i]的含义是：从右向左，n-1到i个数之间满足递增的数字的个数
那么直观来看，c[0]不该是1，而该是3。因为012是增序的
（PS：为了验证，我还将a[10]倒序为a'[10]，求出b'[]，证实了c[]有bug）
 
我的修改方案：
在c[i] = low+1;一句之前，加上：while (inc[low]<a[i]) low++;
这样出来的结果就对啦！
 
祝一切顺利，心情好好喔！37楼 liuweiweiwei 2012-05-11 21:42发表[回复] printf("Input how many numbers there are: "); 
scanf("%d/n", &n); 
double a[n], b[n], c[n], inc[n]；能这么写吗？数组中的数必须是常数啊。Re: waytofall 2012-09-10 10:46发表[回复] 回复liuweiweiwei：我刚刚也看了下，ls应该说的是数组的范围吧。我觉得应该是一个常数，如果不是常数的话在函数分配栈空间的时候就不知道该分配多少大小了。36楼 YUkLin 2012-05-08 22:23发表[回复] Hi,解法一中list可以从尾部开始迭代，不需要先反转再迭代再反转回去，具体代码修改如下
#include <iostream>
#include <list>
using namespace std;
void Print(int sum, int n)
{
 static list<int> flag;

 if ((sum <= 0) || (n <= 0))
 {
 return;
 }

 if (sum == n)
 {
 list<int>::reverse_iterator begin = flag.rbegin();
 list<int>::reverse_iterator end = flag.rend();

 while(begin != end)
 {
 cout << *begin++ << "+";
 }

 cout << n << endl;
 }

 flag.push_front(n);
 Print(sum - n, n - 1);
 flag.pop_front();
 Print(sum, n - 1);
}
void main()
{
 Print(15, 10);
 system("pause");
}Re: v_JULY_v 2012-05-08 22:48发表[回复] 回复YUkLin：list<int>::reverse_iterator begin = flag.rbegin();
list<int>::reverse_iterator end = flag.rend();

谢谢，日后统一修正下改善下，:-)35楼 奋斗小子 2012-03-30 09:39发表[回复] // 若不选第k个数，选第k+1个数满足条件，则递归右子树 
if ((t + r - k >= M) && (t + (k+1) <= M)) 
能不能解释一下为什么选择k+1个数的条件是这样的?34楼 chenzulong198867 2012-03-28 10:51发表[回复] 楼主解一运行有问题...例如10 10Re: v_JULY_v 2012-03-28 11:28发表[回复] 回复chenzulong198867：第一节，还是第二节，具体哪一段?33楼 qzwxecrvfdsa 2012-02-09 19:54发表[回复] 这题好像也可以用素数替代的方法解决，比如有数组a[n]，两数之和为sum，然后用第a[i]个素数代替a[i]（第0个素数的问题稍加改动即可解决），将这n个素数相乘得到一个积product。然后令A+B=sum （A<=sum)，用product依次除以第A（A从0依次递增到n)个素数和第B个素数的积，若余数为0，则输出A和B，A和B即为所求。当然当数组中的数字比较大时素数的获取又成一个问题Re: v_JULY_v 2012-02-10 10:10发表[回复] 回复qzwxecrvfdsa：思路不错，举个例子就更好了..Re: qzwxecrvfdsa 2012-02-10 16:28发表[回复] 回复v_JULY_v：比方说有个数组a[],其中元素为{3，4，9，1，2，6}，我们要求和为9的数对。第1个素数到第10个素数依次为{2，3，5，7，11，13，17，19，23，29}，数组a[]对应的素数数组为{5，7，23，2，3，13}，处理9=1+8，1对应的素数为2，8对应的素数为23，然后5*7*23*2*3*13%（2*23）！=0，再处理9=2+7，依次类推直到处理9=3+6，3对应5，6对应13，
5*7*23*2*3*13%（5*13）==0，即输出3和632楼 wangyangkobe 2011-11-18 13:05发表[回复] 



01.list<int> l;  
02.void Part(int n, int sum)  
03.{  
04.    if (n<=0 || sum <=0)  
05.        return;  
06.  
07.    if (n == sum)  
08.    {  
09.        copy(l.begin(), l.end(), ostream_iterator<int>(cout, " "));  
10.        cout<<n<<endl;  
11.    }  
12.    else  
13.    {  
14.        l.push_back(n);  
15.        Part(n-1, sum-n);  
16.        l.pop_back();  
17.        Part(n-1, sum);  
18.    }  
19.}  
31楼 wangyangkobe 2011-11-18 13:05发表[回复] list<int> l;
void Part(int n, int sum)
{
 if (n<=0 || sum <=0)
 return;

 if (n == sum)
 {
 copy(l.begin(), l.end(), ostream_iterator<int>(cout, " "));
 cout<<n<<endl;
 }
 else
 {
 l.push_back(n);
 Part(n-1, sum-n);
 l.pop_back();
 Part(n-1, sum);
 }
}30楼 xingfu9966 2011-10-28 17:01发表[回复] 当然差值最小的是 34/2 = 17, 也就是 17+ 17，其次是16+18，。。。。依此类推。不过这样，貌似时间复杂度也不低。29楼 xingfu9966 2011-10-28 17:00发表[回复] 2、有两个序列a,b，大小都为n,序列元素的值任意整数，无序；
要求：通过交换a,b中的元素，使[序列a元素的和]与[序列b元素的和]之间的差最小。
例如: 
var a=[100,99,98,1,2, 3];
var b=[1, 2, 3, 4,5,40];（微软100题第32题）。这道题我是这样想的，这相当于将一批数字分成2组，使这2组的和的差值最小。比如一个数组【1 ，3,4,6,8，10】这个6个数字的数据，如何分成2组，是2组的差值最小。假设分成A,B2组。A+B就是这6个数字之和，A+B=34，所以问题转化为如何使得34的2个分解数差值最小。34的分解数有:17+17,16+18,15+19......在这6个数中查找能凑成这些分解数的组合就可以了。我的思路对吗？？28楼 yongjiyu 2011-10-17 15:48发表[回复] 21题的程序1貌似不够完整，m=100,n=8 就不会得到正确结果27楼 leeleslie7 2011-06-29 22:19发表[回复] （@飞羽：要达到O(N)的复杂度，第一个数组以一指针i 从数组最左端开始向右扫描，第二个数组以一指针j 从数组最右端开始向左扫描，
感觉这种做法也需要这个序列是有序的，否则就会出现漏掉的情况
例如： 1，2，6，5 sum=8
数字2在查找的过程中就被漏掉了26楼 simple_blue 2011-06-24 11:08发表[回复] 巧妙的方法[e01][e01][e01][e01]25楼 yangshuo17166 2011-06-08 09:52发表[回复] 您好！想问个很菜的问题。
我从算法书上看到有些作者，用&quot;leftPtr&quot;和&quot;rightPtr&quot;定义类似游标的变量，想问一下，这个“Ptr”是什么单词的缩写？感谢！Re: roadtang 2011-06-28 16:27发表[回复] 回复 yangshuo17166：

多数是Pointer -&gt; Ptr. 我是不是多嘴了? :P24楼 zeng1990822 2011-05-25 07:53发表[回复] [e01]23楼 cena_jin 2011-05-20 17:58发表[回复] [e01][e01]22楼 ljsspace 2011-05-20 15:26发表[回复] 关于微软100题第32题，我的解法在这里：http://blog.csdn.net/ljsspace/archive/2011/05/20/6434621.aspxRe: v_JULY_v 2011-05-21 10:37发表[回复] 回复 ljsspace：非常棒，加入我们的top修订组吧，http://tctop.wikispaces.com/。[e10]21楼 sherrylgl 2011-05-20 13:29发表[回复] [e01]20楼 yvhkfei 2011-05-19 16:34发表[回复] [e01][e02][e03]19楼 erazy0 2011-05-18 23:34发表[回复] //代码一 
//O（N） 
Pair findSum(int *s,int n,int x) 
{ 
...
} 

第一行Pair findSum(int *s,int n,int x) 后面调用又直接Pair加2个参数，是不是写错了Re: v_JULY_v 2011-05-19 01:14发表[回复] 回复 erazy0：是的，的确错了，晚点修正下，谢谢，[e10]18楼 GNMXD 2011-05-18 07:59发表[回复] 哈哈 细读17楼 longzhi89727 2011-05-17 15:44发表[回复] 呼呼，能人16楼 eaglex 2011-05-17 12:10发表[回复] “其中 b[i] 为从左到右， 0 ~ i 个数之间满足递增的数字个数；&quot;
b[i]存的其实是以a中第i个数为顶峰的满足递增的个数 
比如 a = {3,4,2} b = {1,2,1} inc = {2,4}Re: v_JULY_v 2011-05-17 16:17发表[回复] 回复 eaglex：朋友，如果你有更多好的意见，欢迎加入我们的wiki：http://tctop.wikispaces.com/，对狂想曲进行修订工作，非常感谢。Re: eaglex 2011-05-17 18:24发表[回复] 回复 v_JULY_v：已经加入，并且我对这个算法的建议都已经写到那个章节下面了[e04]Re: v_JULY_v 2011-05-17 18:26发表[回复] 回复 eaglex：非常非常之感谢，希望您提供更多好的意见，[e10]Re: eaglex 2011-05-17 19:04发表[回复] 回复 v_JULY_v：互相学习而已 [e03]15楼 yanshazi 2011-05-17 11:07发表[回复] 楼主勤奋啊，两天没看文章又这么长了14楼 fairywell 2011-05-16 18:13发表[回复] middle = (left + right) / 2;
最好改为
middle = left + (right-left)/2;
以避免某些晦涩的问题Re: v_JULY_v 2011-05-16 20:08发表[回复] 回复 fairywell：有道理，13楼 wentao308 2011-05-16 17:26发表[回复] &quot; 第一个数组以一指针i 向右扫描，第二个数组以一指针j 向左扫描，如果下面出现了和上面一样的数，即a[*i]=a[*j]，就找出这俩个数来了。&quot;这个是如何找的，为什么会是O(N)Re: v_JULY_v 2011-05-17 09:59发表[回复] 回复 wentao308：思路 3我已经改写了下，您再看看?看是否已经看的懂了?Re: lwx496 2011-05-17 08:16发表[回复] 回复 wentao308：这个是不是建立在有序的前提下，复杂度才会是O(n)啊Re: v_JULY_v 2011-05-17 10:00发表[回复] 回复 lwx496：再看下，已经改写了。Re: v_JULY_v 2011-05-17 09:43发表[回复] 回复 lwx496：不是，不用有序Re: Bit_bbtt 2011-06-03 16:16发表[回复] 回复 v_JULY_v：思路的这句话确实有问题，比如：3,8,4,6，输入的和是10，则相减得到串是：7,2,6,4，按你那个思路3中“@飞翔”说的就错了。Re: roadtang 2011-06-28 16:21发表[回复] 回复 Bit_bbtt：

恩, 如果是有序的,意味着两个序列都是有序的, 同时从小端步进,最好情况是1步,最坏情况是2N-1步,O(n), 

但如果是无序的,问题就等同于找出两个无序序列的相等的数来,好像很难保证O(n),一般是O(nlogn)Re: v_JULY_v 2011-05-16 20:10发表[回复] 回复 wentao308：恩，对的，我改写下12楼 v_JULY_v 2011-05-16 13:42发表[回复] 还有一个问题值得自个好好想想，怎么让 没上过大学的朋友 也能看懂我的文章。11楼 v_JULY_v 2011-05-16 13:31发表[回复] 文章，已更新。10楼 lwx496 2011-05-16 08:27发表[回复] 看你的文章，慢慢喜欢上算法了，通俗易懂Re: v_JULY_v 2011-05-16 09:09发表[回复] 回复 lwx496：恩，thanks9楼 tornodo 2011-05-15 21:05发表[回复] [e03]Re: v_JULY_v 2011-05-15 21:47发表[回复] 回复 tornodo：[e10]8楼 十一文 2011-05-15 17:57发表[回复] [e06]还是 来玩了 内部消息 我今天才看到 囧
先抢位置后看！Re: v_JULY_v 2011-05-15 21:47发表[回复] 回复 xming4321：下次，要动作快点o7楼 飞跃颠峰 2011-05-14 20:24发表[回复] 如此，复杂度为O（Log2（N））～Ｏ（Ｎ），主要原因是它没有浪费二分查找的副产品：一个排序数组中小于X的最大元素下标。Re: v_JULY_v 2011-05-14 20:28发表[回复] 回复 alexandertech：[e10]6楼 飞跃颠峰 2011-05-14 20:24发表[回复] 第14题：

用给定数减去数组元素1得到数值假定为X, 在数组中用2分法查找为X的元素。若有，输出。

若没有，且小于X的最大元素下标为y，产生新数组，由原数组下标从2到y的元素构成。

对新数组，递归调用上述动作。5楼 eaglex 2011-05-14 17:05发表[回复] find_factor(sum - n, n - 1); //放n，n-1个数填满sum-n 

应该可以替换成

find_factor(sum - n, sum - n);//放n，sum - n个数填满sum - n

貌似背包问题选n的时候是直接从sum - n中再选的Re: v_JULY_v 2011-05-14 20:12发表[回复] 回复 eaglex：测试过了的，应该没有问题的。4楼 eaglex 2011-05-14 16:38发表[回复] 如果题目并没有指定是要你找出两个数列?而是从这些数中找出两个，或多个，只要这些数加起来的和为输入的sum就行列?

----
为啥你这么喜欢“列” 
[e04]Re: v_JULY_v 2011-05-14 20:11发表[回复] 回复 eaglex：阿?[e04]3楼 gbb21 2011-05-14 13:38发表[回复] Just curious, who is yansha ?Re: v_JULY_v 2011-05-14 13:55发表[回复] 回复 gbb21：如有兴趣，也欢迎你加入（看文末勘误部分）。Re: v_JULY_v 2011-05-14 13:54发表[回复] 回复 gbb21：狂想曲创作组成员之一。2楼 v_JULY_v 2011-05-14 12:54发表[回复] 有任何问题，欢迎不吝指正。如果，各位对上面第二节的扩展问题有什么好的思路，欢迎在评论中告知我，下一篇文章可能会援引你的思路或方案进行阐述。1楼 v_JULY_v 2011-05-14 12:53发表[回复] 基本上，每一篇文章，或多或少，都为编程之美打了点广告。
 


您还没有登录,请[登录]或[注册]
 
* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场
 








个人资料 

v_JULY_v 






访问：4195670次
积分：25982分
排名：第50名
 . 原创：134篇
转载：0篇
译文：5篇
评论：10137条
 . 
博客公告 ①.本blog开通于2010年10月11日，高级C /Algorithms交流群：149977547；北京程序员联盟：172727781。②.狂热算法，热爱数据挖掘，关注机器学习、统计分析，爱好文学数学。③.微博：研究者July，邮箱：zhoulei0907@yahoo.cn，July，二零一三年三月二十九日。 
我的微博 
文章分类 03.Algorithms（实现）(9) 
01.Algorithms（研究）(27) 
02.Algorithms（后续）(22) 
04.Algorithms（讨论）(1) 
05.MS 100' original(7) 
06.MS 100' answers(13) 
07.MS 100' classify(4) 
08.MS 100' one Keys(6) 
09.MS 100' follow-up(3) 
10.MS 100' comments(4) 
11.TAOPP（编程艺术）(26) 
12.TAOPP string(6) 
13.TAOPP array(10) 
14.TAOPP list(2) 
15.stack/heap/queue(0) 
16.TAOPP tree(1) 
17.TAOPP c/c++(2) 
18.TAOPP function(2) 
19.TAOPP algorithms(7) 
20.number operations(1) 
21.Essays(8) 
22.Big Data Processing(5) 
23.Redis/MongoDB(0) 
24.data structures(12) 
25.Red-black tree(7) 
26.Image Processing(3) 
27.Architecture design(4) 
28.Source analysis(3) 
29.Recommend&Search(4) 
30.Machine L&Data Mining(5) 

博客专栏




微软面试100题系列
文章：17篇
阅读：1246112 





程序员编程艺术
文章：24篇
阅读：859706 





经典算法研究
文章：32篇
阅读：1110608 

阅读排行 程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦(186260) 
九月十月百度人搜，阿里巴巴，腾讯华为笔试面试八十题(第331-410题)(141609) 
教你如何迅速秒杀掉：99%的海量数据处理面试题(137438) 
横空出世，席卷互联网--评微软等公司数据结构+算法面试100题(127653) 
从B树、B+树、B*树谈到R 树(122026) 
十道海量数据处理面试题与十个方法大总结(101549) 
九月腾讯，创新工场，淘宝等公司最新面试三十题（第171-200题）(87330) 
十一、从头到尾彻底解析Hash表算法(78387) 
微软公司等数据结构+算法面试100题(第1-100题)全部出炉(75912) 
支持向量机通俗导论（理解SVM的三层境界）(74609) 

评论排行 程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦(371) 
九月十月百度人搜，阿里巴巴，腾讯华为笔试面试八十题(第331-410题)(361) 
九月腾讯，创新工场，淘宝等公司最新面试三十题（第171-200题）(331) 
当今世界最为经典的十大算法--投票进行时(320) 
从B树、B+树、B*树谈到R 树(264) 
横空出世，席卷互联网--评微软等公司数据结构+算法面试100题(263) 
十三个经典算法研究与总结、目录+索引(216) 
我的大学生涯(214) 
程序员编程艺术第一章、左旋转字符串(203) 
三五杆枪，可干革命，三五个人，可以创业(198) 

最新评论 程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦
v_JULY_v: @q1w2ok11:替我感谢你的同事:-) 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦
q1w2ok11: 同事推荐，太给力了，必须好好学习，楼主辛苦 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦
kiritor: 谢谢博主的分享,先收藏了 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦
v_JULY_v: @zhouqinxiong:哪个学校呢？替我谢谢你的老师:-) 

程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦
zhouqinxiong: 老师推荐的，lz，你的博客非常给力 

快速排序算法
康天崽: 太给力了，我喜欢，爱死你了 

我的大学生涯
msjcool: 看完楼主的经历，感觉自己弱爆了 

B树的C实现
hao138548: 好贴 

教你如何迅速秒杀掉：99%的海量数据处理面试题
xiyandeng: 虽然看得不是很懂，以后可以慢慢消化！感谢博主啊 

程序员编程艺术第一章、左旋转字符串
dusx1981: void RightShift4(string &str, int k){ int len = st... 


01、本blog索引 3、微软100题维护地址
1、微软100题横空出世
5、经典算法研究系列
7、红黑树系列集锦
6、程序员编程艺术系列
2、微软面试全部100题
0、经典4大原创系列集锦
4、微软100题下载地址
 
02、Google or baidu? Google搜--"结构之法"（My BLOG）
baidu 搜--"结构之法"（My BLOG）
 
03、个人标签 本BLOG RSS订阅
zhoulei0907@yahoo.cn
csdn blog订阅排行榜
TAOPP修订wiki
julymsn@live.cn
电子工程网专家VIP
 博客园blog-成为推荐博客
 ITpub-代码优化专家
 
04、我的驻点 01. 为学论坛-万物皆数 终生为学
 02、Harry
 03、NoSQLFan
 04、酷勤网
 05、52nlp
 06、北大朋友的挖掘乐园
 07、跟Sophia_qing一起读硕士
 08、面试问答社区51nod
 09、韩寒
 10、我的有鱼
 11、曾经的叛逆与年少
 12、老D之MongoDB源码分析
 14、code4app:iOS代码示例
 17、斯坦福机器学习公开课
 18、TheItHome算法版块版主
 19、36氪--关注互联网创业
 20、德问--编程是一种艺术创作
 21、善科网
 22、百度搜索研发部
 23、淘宝搜索技术博客
 24、interviewstreet
 25、LeetCode
 26、Team_Algorithms人人小组
 
文章存档 
2013年03月(1).
2012年12月(1).
2012年11月(1).
2012年09月(1).
2012年06月(1).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

展开.
 

. 
公司简介|招贤纳士|广告服务|银行汇款帐号|联系方式|版权声明|法律顾问|问题报告QQ客服 微博客服 论坛反馈 联系邮箱：webmaster@csdn.net 服务热线：400-600-2320京 ICP 证 070598 号北京创新乐知信息技术有限公司 版权所有世纪乐知(北京)网络技术有限公司 提供技术支持江苏乐知网络技术有限公司 提供商务支持Copyright © 1999-2012, CSDN.NET, All Rights Reserved  
