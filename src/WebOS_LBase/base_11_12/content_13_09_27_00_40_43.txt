




您还未登录！|登录|注册|帮助
 首页
 业界
 移动
 云计算
 研发
 论坛
 博客
 下载
 
更多
 




首页论坛帮助论坛牛人论坛地图




CSDN >CSDN论坛 >C/C++ >C语言 





管理菜单








结帖
发帖
回复
 .



请教操作系统高手一个题目,关于进程调度的(稍微详细一点) [问题点数：10分，结帖人DDOS1989] 

不显示删除回复显示所有回复显示星级回复显示得分回复只显示楼主收藏
 . 






DDOS1989DDOS1989等级：结帖率：92.86% 

楼主 发表于： 2008-10-19 22:35:15 

假设初始状态为：有n个进程处于就绪状态，有M个进程处于阻塞状态。采用轮转法进程调度算法进行调度（调度过程中，假设处于执行状态的进程不会阻塞），切每过T个时间片系统释放资源，唤醒处于阻塞队列对首的进程。 
 程序要求如下：1.输出系统中进程的调度次序； 
 2.计算CPU利用率 
 实验提示： 
 请用C语言实现提示： 
 1。程序中进程可用PCB表示，其类型描述如下； 
 STRUCT PCB-TYPE{ 
 CHAR NAME； //进程名 
 INT STATE； //进程状态 
 2表示执行状态 
 1 表示就绪状态 
 0表示阻塞状态 
 INT CPU-TIME；运行需要的CPU时间（需运行的时间片个数） 
 } 
 2 摄制个队列，将处于就绪状态的进程PCB挂在队列READY中；将处于阻塞状态的进程PCB挂在队列BLOCKED中。 
 3 设计子程序； 
 START-STATE（）；//读入假设的数据，设置系统初始状态 
 DISPATH（）； // 模拟调度 
 CALCULATE（）；//计算CPU利用率 
 请高手帮忙用C语言编个程序完成个实验，小弟感激不近 

.

分享到：
 




对我有用[0]丢个板砖[0]引用 | 举报 | 

管理 回复次数：6 






pla_007pla_007等级： 

#1得分：0 回复于： 2008-10-19 22:55:35 

1、所有进程都共享除了CPU之外的其他资源吗？
 2、要考虑互斥吗？
 3、每个进程所需的执行时间都一样的吗？
 






华为云计算有奖问答活动火热进行中

对我有用[0]丢个板砖[0]引用 | 举报 | 

管理 






wolflionwolflion等级： 

#2得分：0 回复于： 2008-10-20 00:31:23 

支持一下 





关注CSDN论坛微博 送CSDN积分大礼包

对我有用[0]丢个板砖[0]引用 | 举报 | 

管理 






jillnickyjillnicky等级：


2
 

#3得分：0 回复于： 2008-10-20 12:50:04 

进来学习的…… 





2014年1月微软MVP申请开始啦

对我有用[0]丢个板砖[0]引用 | 举报 | 

管理 






shinefree2004shinefree2004等级： 

#4得分：0 回复于： 2008-10-20 15:11:21 

看上去蛮难的吗？不是学生了，没时间研究。。。 







对我有用[0]丢个板砖[0]引用 | 举报 | 

管理 






fetag独孤过儿等级：

 

#5得分：10 回复于： 2008-10-20 15:30:56 

2005/11/8
 时间片轮转调度的模拟程序
 /**********************************************************************
                                schedule.c
 程序说明:该程序模拟操作系统内多个进程的时间片轮转法调度。
 编 译 器: Borland C/C++ Compiler 5.5
  
 版权声明:这份代码来自于长春工业大学2003级的操作系统原理课程实验部
              分。本人只是对代码的变量命名方法，代码格式等进行了整理，
              并加注了详细的注释，并且这些活动完全出自于本人的自愿，所
              以这份代码的版权并不属于本人，而完全属于长春工业大学。
              如果您对这份代码有任何意见或建议，请联系我:
              casm@163.com    
 **********************************************************************/
 


C/C++ code
?


123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170 

#include <stdio.h>#include <conio.h>#include <string.h>/* 定义宏 */#define PCB_NUM 10  /* 该程序包含十个PCB */#define EXAMPLES 3  /* 该程序最多可模拟三个运行着的进程 *//* 定义进程控制块 */typedef struct pcb{    struct pcb *next; /* 进程的下一个进程 */    char name[20];  /* 进程的名字 */    int time;   /* 进程运行的时间 */}PCB;/* 定义全局变量 */PCB pcbTable[PCB_NUM];  /* 进程控制表 */PCB *pcbCurrent = NULL;  /* 当前运行的进程 */PCB *pcbFree = NULL;  /* 空闲进程 */PCB *pcbReady = NULL;  /* 就绪进程 */PCB *pcbReadyRear = NULL;int currentProcesses = 0; /* 当前进程数 *//* 函数声明 */void InitPcbTable();  /* 初始化进程表 */void DisplayIdle();   /* 显示空闲队列 */int  CreateProcesses();  /* 创建进程 */void DisplayReadys();  /* 显示就绪进程 */void Run();PCB* Schedule();/* 主函数 */void main(){    InitPcbTable();   /* 初始化进程表 */    DisplayIdle();   /* 显示空闲进程队列 */    CreateProcesses();  /* 创建一个进程 */    DisplayIdle();    DisplayReadys();  /* 显示就绪进程 */    while(pcbReady != NULL)    {         pcbCurrent = Schedule();         printf("current process is:%s\n",pcbCurrent->name);         Run();         DisplayIdle();         getch();         DisplayReadys();         getch();    }}/*********************************************************************** 函数名: InitPcbTable 用  途: 初始化进程表函数************************************************************************/void InitPcbTable(){     int i = 0;     pcbFree = &pcbTable[0];  /* pcbFree是一个指向进程表表头的指针 */       pcbTable[PCB_NUM-1].next = NULL; /* 处理进程表中表尾位置的PCB */     pcbTable[PCB_NUM-1].time = 0;      strcpy(pcbTable[PCB_NUM-1].name,"idle");       for(i = 0; i < PCB_NUM-1; i++)  /* 处理进程表中除表尾PCB的其余PCB*/     {          pcbTable[i].next = &pcbTable[i+1];          pcbTable[i].time = 0;          strcpy(pcbTable[i].name,"idle");     }}/*********************************************************************** 函数名: DisplayIdle 用  途: 显示空闲进程队列函数************************************************************************/void DisplayIdle(){     PCB *p = pcbFree; /* p来搜索空闲进程队列 */     printf("number of idles:%d\n", PCB_NUM - currentProcesses);     while(p != NULL)     {         printf("%s   ", p->name);         p = p->next;     }     printf("\n");}/************************************************************************ 函数名: CreateProcesses 用  途: 创建进程函数*************************************************************************/int CreateProcesses(){     PCB *p;     int i = 0;     for(i = 0; i < EXAMPLES; i++) /* EXAMPLE为最大可模拟的进程数目 */     {          if(pcbFree == NULL)  /* 当前没有空闲进程，则返回错误信息 */               return(-1);          p = pcbFree;           pcbFree = pcbFree->next ;          printf("enter p %d's name:\n", i);          scanf("%s", p->name);          printf("enter p %d's time:(1~5)\n", i);          scanf("%d", &p->time);          currentProcesses++;          p->next = NULL;            if(pcbReady == NULL) /* 判断当前状态是否有就绪进程 */         {              pcbReadyRear = p;              pcbReady = pcbReadyRear;         }         else         {              pcbReadyRear->next = p;              pcbReadyRear = p;         }    }    return(currentProcesses);}/*********************************************************************** 函数名: DisplayReadys 用  途: 显示就绪队列函数************************************************************************/void DisplayReadys(){     PCB *p;     p = pcbReady;     printf("name    time\n");     while(p != NULL)     {          printf("%s      %d\n",p->name, p->time);          p = p->next ;           }}/************************************************************************ 函数名: Schedule 用  途: 进程调度函数 返回值: PCB类型的指针。该指针指向就绪进程的下一个进程。需要说明一下，如      果在当前状态，没有一个正在运行着的进程，则就绪进程队列中的第一个      进程将被执行，其状态也由就绪转化为运行，而其next域指向的进程则转      化为就绪进程队列中的第一个进程。**************************************************************************/PCB *Schedule(){     PCB *p;     if(pcbReady != NULL)     {          p = pcbReady;          pcbReady = pcbReady->next ;          return  (p);     }     else          return(NULL);}/************************************************************************** 函数名: Run 用  途: 运行函数***************************************************************************/void Run(){     pcbCurrent->time--;     if(pcbCurrent->time == 0)     {          pcbCurrent->next = pcbFree;          pcbFree = pcbCurrent;          currentProcesses--;     }     else     {          pcbReadyRear->next = pcbCurrent;          pcbReadyRear = pcbCurrent;          pcbReadyRear->next = NULL;     }} 







对我有用[0]丢个板砖[0]引用 | 举报 | 

管理 






DDOS1989DDOS1989等级： 

#6得分：0 回复于： 2008-10-20 15:48:19 


引用 1 楼 pla_007 的回复:
1、所有进程都共享除了CPU之外的其他资源吗？ 
 2、要考虑互斥吗？ 
 3、每个进程所需的执行时间都一样的吗？ 
 

不用考虑互斥吧,假设处于执行状态的的进程不会阻塞...执行时间不一定相同... 






对我有用[0]丢个板砖[0]引用 | 举报 | 

管理 



管理菜单








结帖
发帖
回复
 .


【招】应届生,入职年薪5-10万
晒出LBS应用 赢取给力大奖
下载最热手游开发工具集CocoStudio
将家庭娱乐升级到移动时代
CSDN版主团队火热招募啦
与联想horizon合影 赢联想U盘
传递正能量 赢微软鼠标
台湾程序员游戏开发经历




关注CSDN论坛微博送可用分

CSDN论坛微博主要发布程序员职场经验,生活指南，IT八卦等内容，关注就有积分相送噢！


本帖子已过去太久远了，不再提供回复功能。
 . 
[关闭] 

[关闭] 

公司简介|招贤纳士|广告服务|银行汇款帐号|联系方式|版权声明|法律顾问|问题报告QQ客服 微博客服 论坛反馈 联系邮箱：webmaster@csdn.net 服务热线：400-600-2320京 ICP 证 070598 号北京创新乐知信息技术有限公司 版权所有世纪乐知(北京)网络技术有限公司 提供技术支持江苏乐知网络技术有限公司 提供商务支持Copyright © 1999-2012, CSDN.NET, All Rights Reserved 
 















