djdhbjqdbwhjb0我的：收件箱资源博客空间设置|帮助|退出首页业界移动云计算研发论坛博客下载
更多

首页论坛帮助论坛牛人论坛地图

 
CSDN > CSDN论坛 > C/C++ > 新手乐园
1 2 3 下一页 第   页
管理菜单 结帖发帖回复
[推荐] 教你透彻了解红黑树（修订版） [问题点数：60分，结帖人v_JULY_v]   收藏

v_JULY_v  
v_JULY_v
等级：
结帖率：94.87%
楼主 发表于： 2010-12-30 00:37:18
本帖最后由 v_JULY_v 于 2010-12-30 00:40:44 编辑
教你透彻了解红黑树  


作者 July 2010年12月29日
------------------
本文参考：Google、算法导论、STL源码剖析、计算机程序设计艺术。
本人声明：个人原创，转载请注明出处。

更多请参考：
http://blog.csdn.net/v_JULY_v/archive/2010/12/29/6105630.aspx
详情，参见My BLog：
http://blog.csdn.net/v_JULY_v

一、红黑树的介绍
先来看下算法导论对R-B Tree的介绍：
红黑树，一种二叉查找树，但在每个结点上增加一个存储位表示结点的颜色，可以是Red或Black。
通过对任何一条从根到叶子的路径上各个结点着色方式的限制，红黑树确保没有一条路径会比其他路径长出俩倍，因而是接近平衡的。  

前面说了，红黑树，是一种二叉查找树，既然是二叉查找树，那么它必满足二叉查找树的一般性质。
下面，再具体介绍红黑树之前，咱们先来了解下 二叉查找树的一般性质：
1.在一棵二叉查找树上，执行查找、插入、删除等操作，的时间复杂度为O（lgn）。
因为，一棵由n个结点，随机构造的二叉查找树的高度为O（lgn），所以顺理成章，一般操作的执行时间为O（lgn）。
（至于n个结点的二叉树高度为O（lgn）的证明，可参考算法导论 第12章 二叉查找树。）
2.但若是一棵具有n个结点的线性链，则此些操作最坏情况运行时间为O（n）。

而红黑树，能保证在最坏情况下，基本的动态几何操作的时间均为O（lgn）。
ok，我们知道，红黑树上每个结点内含五个域，color，key，left，right。如果相应的指针域没有，则设为NIL。

一般的，红黑树，满足一下性质，即只有满足一下性质的树，我们才称之为红黑树：
1）每个结点要么是红的，要么是黑的。
2）根结点是黑的。
3）每个叶结点，即空结点（NIL）是黑的。
4）如果一个结点是红的，那么它的俩个儿子都是黑的。
5）对每个结点，从该结点到其子孙结点的所有路径上包含相同数目的黑结点。

下图所示，即是一颗红黑树：

此图忽略了叶子和根部的父结点。总之，可以这样表示，就对了。:D。

二、树的旋转知识
当我们在对红黑树进行插入和删除等操作时，对树做了修改，那么可能会违背红黑树的性质。
为了保持红黑树的性质，我们可以通过对树进行旋转，即修改树种某些结点的颜色及指针结构，以达到对红黑树进行
插入、删除结点等操作时，红黑树依然能保持它特有的性质（如上文所述的，五点性质）。

树的旋转，分为左旋和右旋，以下借助图来做形象的解释和介绍：
1.左旋


如上图所示：
当在某个结点pivot上，做左旋操作时，我们假设它的右孩子y不是NIL[T]，pivot可以为树内任意右孩子而不是NIL[T]的结点。
左旋以pivot到y之间的链为“支轴”进行，它使y成为该孩子树新的根，而y的左孩子b则成为pivot的右孩子。
 
来看算法导论对此操作的算法实现（以x代替上述的pivot）：
C/C++ code
?
1
2
3
4
5
6
7
8
9
10
11
12
13
 LEFT-ROTATE(T, x)
1  y ← right[x] ▹ Set y.
2  right[x] ← left[y]      ▹ Turn y's left subtree into x's right subtree.
 
3  p[left[y]] ← x
4  p[y] ← p[x]             ▹ Link x's parent to y.
5  if p[x] = nil[T]
6     then root[T] ← y
7     else if x = left[p[x]]
8             then left[p[x]] ← y
9             else right[p[x]] ← y
10  left[y] ← x             ▹ Put x on y's left.
11  p[x] ← y

 

2.右旋
右旋与左旋差不多，再此不做详细介绍。


对于树的旋转，能保持不变的只有原树的搜索性质，而原树的红黑性质则不能保持，
在红黑树的数据插入和删除后可利用旋转和颜色重涂来恢复树的红黑性质。

至于有些书如 STL源码剖析有对双旋的描述，其实双旋只是单旋的两次应用，并无新的内容，
因此这里就不再介绍了，而且左右旋也是相互对称的，只要理解其中一种旋转就可以了。


三、红黑树插入、删除操作的具体实现
ok，接下来，咱们来具体了解红黑树的插入操作。
向一棵含有n个结点的红黑树插入一个新结点的操作可以在O（lgn）时间内完成。

算法导论：
C/C++ code
?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
RB-INSERT(T, z)
 1  y ← nil[T]
 2  x ← root[T]
 3  while x ≠ nil[T]
 4      do y ← x
 5         if key[z] < key[x]
 6            then x ← left[x]
 7            else x ← right[x]
 8  p[z] ← y
 9  if y = nil[T]
10     then root[T] ← z
11     else if key[z] < key[y]
12             then left[y] ← z
13             else right[y] ← z
14  left[z] ← nil[T]
15  right[z] ← nil[T]
16  color[z] ← RED
17  RB-INSERT-FIXUP(T, z)

咱们来具体分析下，此段代码：
RB-INSERT(T, z)，将z插入红黑树T 之内。

为保证红黑性质在插入操作后依然保持，上述代码调用了一个辅助程序RB-INSERT-FIXUP
来对结点进行重新着色，并旋转。

14  left[z] ← nil[T]
15  right[z] ← nil[T]  //保持正确的树结构
第16行，将z着为红色，由于将z着为红色可能会违背某一条红黑树的性质，
所以，在第17行，调用RB-INSERT-FIXUP（T,z）来保持红黑树的性质。

RB-INSERT-FIXUP(T, z)，如下所示：
C/C++ code
?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
  
1 while color[p[z]] = RED
 2     do if p[z] = left[p[p[z]]]
 3           then y ← right[p[p[z]]]
 4                if color[y] = RED
 5                   then color[p[z]] ← BLACK                    ▹ Case 1
 6                        color[y] ← BLACK                       ▹ Case 1
 7                        color[p[p[z]]] ← RED                   ▹ Case 1
 8                        z ← p[p[z]]                            ▹ Case 1
 9                   else if z = right[p[z]]
10                           then z ← p[z]                       ▹ Case 2
11                                LEFT-ROTATE(T, z)              ▹ Case 2
12                           color[p[z]] ← BLACK                 ▹ Case 3
13                           color[p[p[z]]] ← RED                ▹ Case 3
14                           RIGHT-ROTATE(T, p[p[z]])            ▹ Case 3
15           else (same as then clause
                         with "right" and "left" exchanged)
16 color[root[T]] ← BLACK

 
ok，参考一网友的言论，用自己的语言，再来具体解剖下上述俩段代码。
为了保证阐述清晰，我再写下红黑树的5个性质：

1）每个结点要么是红的，要么是黑的。
2）根结点是黑的。
3）每个叶结点，即空结点（NIL）是黑的。
4）如果一个结点是红的，那么它的俩个儿子都是黑的。
5）对每个结点，从该结点到其子孙结点的所有路径上包含相同数目的黑结点。

在对红黑树进行插入操作时，我们一般总是插入红色的结点，因为这样可以在插入过程中尽量避免对树的调整。
那么，我们插入一个结点后，可能会使原树的哪些性质改变列?
由于，我们是按照二叉树的方式进行插入，因此元素的搜索性质不会改变。

如果插入的结点是根结点，性质2会被破坏，如果插入结点的父结点是红色，则会破坏性质4。
因此，总而言之，插入一个红色结点只会破坏性质2或性质4。
我们的回复策略很简单，
其一、把出现违背红黑树性质的结点向上移，如果能移到根结点，那么很容易就能通过直接修改根结点来恢复红黑树的性质。直接通过修改根结点来恢复红黑树应满足的性质。
其二、穷举所有的可能性，之后把能归于同一类方法处理的归为同一类，不能直接处理的化归到下面的几种情况，

情况1：插入的是根结点。
原树是空树，此情况只会违反性质2。
  对策：直接把此结点涂为黑色。
情况2：插入的结点的父结点是黑色。
此不会违反性质2和性质4，红黑树没有被破坏。
  对策：什么也不做。
情况3：当前结点的父结点是红色且祖父结点的另一个子结点（叔叔结点）是红色。
此时父结点的父结点一定存在，否则插入前就已不是红黑树。
与此同时，又分为父结点是祖父结点的左子还是右子，对于对称性，我们只要解开一个方向就可以了。

在此，我们只考虑父结点为祖父左子的情况。
同时，还可以分为当前结点是其父结点的左子还是右子，但是处理方式是一样的。我们将此归为同一类。
  对策：将当前节点的父节点和叔叔节点涂黑，祖父结点涂红，把当前结点指向祖父节点，从新的当前节点重新开始算法。

针对情况3，变化前（图片来源：saturnman）：
  变化前：


变化后：


情况4：当前节点的父节点是红色,叔叔节点是黑色，当前节点是其父节点的右子
对策：当前节点的父节点做为新的当前节点，以新当前节点为支点左旋。
如下图所示，变化前：


 变化后：


情况5：当前节点的父节点是红色,叔叔节点是黑色，当前节点是其父节点的左子
解法：父节点变为黑色，祖父节点变为红色，在祖父节点为支点右旋

如下图所示


变化后：



--------------------------------
 ok，接下来，咱们最后来简单了解，红黑树的删除操作：
算法导论一书，给的算法实现： 
RB-DELETE(T, z)
 
C/C++ code
?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
1 if left[z] = nil[T] or right[z] = nil[T]
 2    then y ← z
 3    else y ← TREE-SUCCESSOR(z)
 4 if left[y] ≠ nil[T]
 5    then x ← left[y]
 6    else x ← right[y]
 7 p[x] ← p[y]
 8 if p[y] = nil[T]
 9    then root[T] ← x
10    else if y = left[p[y]]
11            then left[p[y]] ← x
12            else right[p[y]] ← x
13 if y 3≠ z
14    then key[z] ← key[y]
15         copy y's satellite data into z
16 if color[y] = BLACK
17    then RB-DELETE-FIXUP(T, x)
18 return y


C/C++ code
?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
RB-DELETE-FIXUP(T, x)
 1 while x ≠ root[T] and color[x] = BLACK
 2     do if x = left[p[x]]
 3           then w ← right[p[x]]
 4                if color[w] = RED
 5                   then color[w] ← BLACK                        ▹  Case 1
 6                        color[p[x]] ← RED                       ▹  Case 1
 7                        LEFT-ROTATE(T, p[x])                    ▹  Case 1
 8                        w ← right[p[x]]                         ▹  Case 1
 9                if color[left[w]] = BLACK and color[right[w]] = BLACK
10                   then color[w] ← RED                          ▹  Case 2
11                        x p[x]                                  ▹  Case 2
12                   else if color[right[w]] = BLACK
13                           then color[left[w]] ← BLACK          ▹  Case 3
14                                color[w] ← RED                  ▹  Case 3
15                                RIGHT-ROTATE(T, w)              ▹  Case 3
16                                w ← right[p[x]]                 ▹  Case 3
17                         color[w] ← color[p[x]]                 ▹  Case 4
18                         color[p[x]] ← BLACK                    ▹  Case 4
19                         color[right[w]] ← BLACK                ▹  Case 4
20                         LEFT-ROTATE(T, p[x])                   ▹  Case 4
21                         x ← root[T]                            ▹  Case 4
22        else (same as then clause with "right" and "left" exchanged)
23 color[x] ← BLACK

saturnman：
我们红黑树删除的几种情况：
(注：以下各种情况，不与上述算法导论之上的代码相对应。)
情况1：当前节点是红+黑色
    解法，直接把当前节点染成黑色，结束。
此时红黑树性质全部恢复。

情况2：当前节点是黑+黑且是根节点
    解法：什么都不做，结束

情况3：当前节点是黑+黑且兄弟节点为红色(此时父节点和兄弟节点的子节点分为黑)。
    解法：把父节点染成红色，把兄弟结点染成黑色，之后重新进入算法（我们只讨论当前节点是其父节点左孩子时的情况）。此变换后原红黑树性质5不变，而把问题转化为兄弟节点为黑色的情况。
               3.变化前：
..........

===========
更多请参考：
http://blog.csdn.net/v_JULY_v/archive/2010/12/29/6105630.aspx
详情，参见My BLog：
http://blog.csdn.net/v_JULY_v
     July、12.30凌晨。
分享到：  
对我有用[2] 丢个板砖[0] 引用 | 举报 | 管理 回复次数：274

matrixcl
matrixcl
等级：
#1 得分：0 回复于： 2010-12-30 01:00:29
楼主辛苦了 

这个侯杰的stl源码剖析里将得挺详细
专访谭海燕：移动互联网开发的那些事对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

sandy0066
sandy0066
等级：
#2 得分：10 回复于： 2010-12-30 02:49:34
谢谢楼主，学习学习
免积分，500+CSDN活动PPT阅读/下载 对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

dizuo
dizuo
等级：
62
更多勋章
#3 得分：10 回复于： 2010-12-30 08:00:49
不错，收藏~
关注CSDN论坛微博 送CSDN积分大礼包 对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

peige2008
PG
等级：
#4 得分：10 回复于： 2010-12-30 08:27:43
好东西，收藏~~
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

guoxuqu
guoxuqu
等级：
#5 得分：10 回复于： 2010-12-30 08:35:04
不错，收藏
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

yui
yui
等级：
#7 得分：10 回复于： 2010-12-30 09:31:36
很好，收藏了
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

ww884203
ww884203
等级：
#8 得分：10 回复于： 2010-12-30 10:12:33
mark一下收藏起来，以后再细细看
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

ouyh12345
ouyh12345
等级：
2
#9 得分：0 回复于： 2010-12-30 10:46:08

对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

hairetz
hairetz
等级：
6
更多勋章
#10 得分：0 回复于： 2010-12-30 10:56:34
很好，前排插入，收藏。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

wyfwx
wyfwx
等级：
#11 得分：0 回复于： 2010-12-30 11:25:38
很好      !
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

ForestDB
ForestDB
等级：
#12 得分：0 回复于： 2010-12-30 11:41:52
Mark之。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

Jinhao
Jinhao
等级：
#13 得分：0 回复于： 2010-12-30 12:04:10
不给力呀，把各种乱七八糟的树都写出来就给力了
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

v_JULY_v  
v_JULY_v
等级：
#14 得分：0 回复于： 2010-12-30 12:06:50
引用 13 楼 jinhao 的回复:
不给力呀，把各种乱七八糟的树都写出来就给力了

主意，不错。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

dieyingao
dieyingao
等级：
#15 得分：0 回复于： 2010-12-30 12:20:23
顶之，楼主继续努力
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

healer_kx
healer_kx
等级：
#18 得分：0 回复于： 2010-12-30 13:04:11
太给力了。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

dreamhunter_lan
dreamhunter_lan
等级：
#19 得分：0 回复于： 2010-12-30 13:11:25
LZ辛苦了~收藏
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

qjcrue
qjcrue
等级：
#20 得分：0 回复于： 2010-12-30 13:13:34
真的是不错，学习了
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

xiangchendub
xiangchendub
等级：
#21 得分：0 回复于： 2010-12-30 13:14:00
谢谢分享，收藏。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

hqin6
太乙
等级：
#22 得分：0 回复于： 2010-12-30 13:27:24
gelivable
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

quwei197874
quwei197874
等级：
#23 得分：0 回复于： 2010-12-30 13:32:31
to: 1楼;侯杰的stl源码剖析里没有红黑书删除的透彻分析
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

VisualEleven  
Eleven
等级：
2
更多勋章
#24 得分：0 回复于： 2010-12-30 13:42:36
UP。。。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

qwe13df
qwe13df
等级：
#28 得分：0 回复于： 2010-12-30 15:14:25
current+=10;
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

ilovechao1314
ilovechao1314
等级：
#30 得分：0 回复于： 2010-12-30 16:17:13
楼主辛苦了  
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

xzjxylophone
xzjxylophone
等级：
#31 得分：0 回复于： 2010-12-30 16:59:19
前排插入，果断收藏之
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

skye_ld
skye_ld
等级：
#32 得分：0 回复于： 2010-12-30 17:13:59
mark 之
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

v_JULY_v  
v_JULY_v
等级：
#33 得分：0 回复于： 2010-12-30 19:03:48

对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

v_JULY_v  
v_JULY_v
等级：
#34 得分：0 回复于： 2010-12-30 19:04:51

对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

v_JULY_v  
v_JULY_v
等级：
#35 得分：0 回复于： 2010-12-30 22:57:34
个人觉得，这个红黑树，还是比较容易懂的。不论是插入、还是删除，不论是左旋还是右旋，最终的目的只有一个：即保持红黑树的5个性质，不得违背。:D。

抓住了红黑树的那5个性质，事情就好办多了。
如，
1.红黑红黑，要么是红，要么是黑；
2.根结点是黑；
3.每个叶结点是黑；
4.一个红结点，它的俩个儿子必然都是黑的；
5.每一条路径上，黑结点的数目等同。
  五条性质，合起来，来句顺口溜就是：（1）红黑 （2）黑 （3）黑 （4&5）红->黑  黑。呵呵。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

BinQRay
BinQRay
等级：
#36 得分：0 回复于： 2010-12-30 23:12:07
引用 35 楼 v_july_v 的回复:
个人觉得，这个红黑树，还是比较容易懂的。不论是插入、还是删除，不论是左旋还是右旋，最终的目的只有一个：即保持红黑树的5个性质，不得违背。:D。

抓住了红黑树的那5个性质，事情就好办多了。
如，
1.红黑红黑，要么是红，要么是黑；
2.根结点是黑；
3.每个叶结点是黑；
4.一个红结点，它的俩个儿子必然都是黑的；
5.每一条路径上，黑结点的数目等同。
  五条性质，合起来，来句顺……

楼主搞研究么？呵呵，好啊！学习！
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

dulvtianya
dulvtianya
等级：
#37 得分：0 回复于： 2010-12-31 08:39:51
留名，以后来看看
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

ch1308
ch1308
等级：
#38 得分：0 回复于： 2010-12-31 08:46:56
果断收藏起来！立即看起来！
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

lijianli9
lijianli9
等级：
#39 得分：0 回复于： 2010-12-31 08:51:34
谢谢lz
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

vockyvocky
vockyvocky
等级：
#41 得分：0 回复于： 2010-12-31 09:34:48
STL的精髓啊
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

v_JULY_v  
v_JULY_v
等级：
#42 得分：0 回复于： 2010-12-31 09:49:42
引用 23 楼 quwei197874 的回复:
to: 1楼;侯杰的stl源码剖析里没有红黑书删除的透彻分析

Right。

引用 41 楼 vockyvocky 的回复:
STL的精髓啊

红黑树只是STL 关联容器的一部分，一种树而已，STL 精髓谈不上。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

DeathSteps
DeathSteps
等级：
#44 得分：0 回复于： 2010-12-31 09:54:17
lzV5
自我感觉红黑树的应用还是比较难
还在努力学习中。。。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

BinQRay
BinQRay
等级：
#46 得分：0 回复于： 2010-12-31 10:55:55
pf楼主。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

lclhurricane
lclhurricane
等级：
#47 得分：0 回复于： 2010-12-31 11:26:52
我就喜欢这种让人费脑子的东西
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

v_JULY_v  
v_JULY_v
等级：
#48 得分：0 回复于： 2010-12-31 11:36:14
引用楼主 v_july_v 的回复:
教你透彻了解红黑树  


作者 July 2010年12月29日
------------------
本文参考：Google、算法导论、STL源码剖析、计算机程序设计艺术。
本人声明：个人原创，转载请注明出处。

更多请参考：
http://blog.csdn.net/v_JULY_v/archive/2010/12/29/6105630.aspx
详情，参见My BLog……

红黑树算法的层层剖析与逐步实现
http://blog.csdn.net/v_JULY_v/archive/2010/12/31/6109153.aspx
       July  二零一零年十二月三十一日。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

bcj00000
bcj00000
等级：
#49 得分：0 回复于： 2010-12-31 12:00:30
 先收了他,以备后用
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

zx361939439
zx361939439
等级：
#50 得分：0 回复于： 2010-12-31 12:26:23
楼主辛苦了，收藏起来
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

AlbertBright
AlbertBright
等级：
#51 得分：0 回复于： 2010-12-31 12:41:15
呵呵，好东西啊，楼主辛苦了！
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

wangzhen47337
wangzhen47337
等级：
#52 得分：0 回复于： 2010-12-31 14:53:30
我怎么看不懂 我应该修炼算法
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

v_JULY_v  
v_JULY_v
等级：
#53 得分：0 回复于： 2010-12-31 15:41:48
引用 52 楼 wangzhen47337 的回复:
我怎么看不懂 我应该修炼算法

教你透彻了解红黑树：
http://blog.csdn.net/v_JULY_v/archive/2010/12/29/6105630.aspx

如果第一篇文章看完，还搞不懂，没关系，请看第二篇文章，
红黑树算法的层层剖析与逐步实现
http://blog.csdn.net/v_JULY_v/archive/2010/12/31/6109153.aspx

第二篇针对算法实现源码，逐层剖析，相信，更、清晰易懂。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

QustDong
董小尾
等级：
#54 得分：0 回复于： 2010-12-31 16:11:54
太感谢了~~~
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

jbz001
jbz001
等级：
#56 得分：0 回复于： 2011-01-01 15:12:03
路过，学习一下
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

xiaozhuhaoa
xiaozhuhaoa
等级：
#57 得分：0 回复于： 2011-01-01 16:23:18
想不明白，难道红黑树还需要自己去写么
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

aliwayne
aliwayne
等级：
#58 得分：0 回复于： 2011-01-01 16:48:52
这个太给力！学习中
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

v_JULY_v  
v_JULY_v
等级：
#59 得分：0 回复于： 2011-01-01 18:25:39
引用 57 楼 xiaozhuhaoa 的回复:
想不明白，难道红黑树还需要自己去写么

当然不必，只是作点研究、玩玩而已。
各位，Happy 2011 new year！
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

p569354158
p569354158
等级：
#60 得分：0 回复于： 2011-01-01 19:22:46
简直就是超人
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

shineofgod
拓跋野
等级：
#61 得分：0 回复于： 2011-01-01 21:13:46
算法导论上给的算法跟实际实现还是有不同的，光弄懂那个距离写出代码还有距离。算法导论上用了哨兵节点，实际上若不用这个，而使用NULL指针代替的话，那么书上的实现就有问题，因为NULL指针不能进行任何操作。其实红黑树的C实现，linux内核就有，那个写的很神，他的父亲指针的后四位来做颜色域，他也没有使用哨兵节点，所以修复时他就要求额外的信息（父亲节点）。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

v_JULY_v  
v_JULY_v
等级：
#63 得分：0 回复于： 2011-01-01 22:06:01
引用 61 楼 shineofgod 的回复:
算法导论上给的算法跟实际实现还是有不同的，光弄懂那个距离写出代码还有距离。算法导论上用了哨兵节点，实际上若不用这个，而使用NULL指针代替的话，那么书上的实现就有问题，因为NULL指针不能进行任何操作。其实红黑树的C实现，linux内核就有，那个写的很神，他的父亲指针的后四位来做颜色域，他也没有使用哨兵节点，所以修复时他就要求额外的信息（父亲节点）。

红黑树的C实现，linux内核就有，那个写的很神，
-------------

改天，研究下。谢谢~
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

kye_0
kye_0
等级：
#64 得分：0 回复于： 2011-01-01 22:08:23
太详细了，感谢楼主分享
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

dreamhunter_lan
dreamhunter_lan
等级：
#65 得分：0 回复于： 2011-01-01 22:20:37
引用 61 楼 shineofgod 的回复:
算法导论上给的算法跟实际实现还是有不同的，光弄懂那个距离写出代码还有距离。算法导论上用了哨兵节点，实际上若不用这个，而使用NULL指针代替的话，那么书上的实现就有问题，因为NULL指针不能进行任何操作。其实红黑树的C实现，linux内核就有，那个写的很神，他的父亲指针的后四位来做颜色域，他也没有使用哨兵节点，所以修复时他就要求额外的信息（父亲节点）。
可不可以整理一下贴出来呢？
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

lanxue_1988
碎碎念
等级：
#66 得分：0 回复于： 2011-01-01 22:52:50
收藏了....留着以后慢慢看~~~谢谢分享~~
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

BinQRay
BinQRay
等级：
#67 得分：0 回复于： 2011-01-01 23:37:02
感谢楼主！
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

v_JULY_v  
v_JULY_v
等级：
#68 得分：0 回复于： 2011-01-02 08:41:49
引用 65 楼 dreamhunter_lan 的回复:
引用 61 楼 shineofgod 的回复:

算法导论上给的算法跟实际实现还是有不同的，光弄懂那个距离写出代码还有距离。算法导论上用了哨兵节点，实际上若不用这个，而使用NULL指针代替的话，那么书上的实现就有问题，因为NULL指针不能进行任何操作。其实红黑树的C实现，linux内核就有，那个写的很神，他的父亲指针的后四位来做颜色域，他也没有使用哨兵节点，所以修复时他就要求额外的信息（父亲节……

我，会整理的。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

Player1005
Player1005
等级：
#69 得分：0 回复于： 2011-01-02 10:31:21
非常感谢LZ的精妙文章，受益非浅。
我有一点想请教的就是红黑树一般用在什么样的场合？
就说解决什么样的问题是用红黑树这种数据结构比较合适？
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

v_JULY_v  
v_JULY_v
等级：
#70 得分：0 回复于： 2011-01-02 10:51:41
引用 69 楼 player1005 的回复:
非常感谢LZ的精妙文章，受益非浅。
我有一点想请教的就是红黑树一般用在什么样的场合？
就说解决什么样的问题是用红黑树这种数据结构比较合适？

个人愚见：
1.红黑树本质上是作为一种二叉查找树而来的。
2.C++ STL中，很多部分(目前包括set, multiset, map, multimap)应用了红黑树的变体(SGI STL中的红黑树有一些变化，这些修改提供了更好的性能，以及对set操作的支持)[百科]
3.linux 内核 2.6中 把内存描述符 就是放在红黑树这结构中。
4.缓存等东西内有过应用....
5...
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

dreamhunter_lan
dreamhunter_lan
等级：
#72 得分：0 回复于： 2011-01-02 11:22:57
引用 68 楼 v_july_v 的回复:
引用 65 楼 dreamhunter_lan 的回复:
引用 61 楼 shineofgod 的回复:

算法导论上给的算法跟实际实现还是有不同的，光弄懂那个距离写出代码还有距离。算法导论上用了哨兵节点，实际上若不用这个，而使用NULL指针代替的话，那么书上的实现就有问题，因为NULL指针不能进行任何操作。其实红黑树的C实现，linux内核就有，那个写的很神，他的父亲指针的后四位来做颜色……
谢谢，会一直跟帖~
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

jixingzhong  
jixingzhong
等级：
2172
更多勋章
#73 得分：0 回复于： 2011-01-02 13:49:41
提倡共享精神。。。。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

tiantianvvs
tiantianvvs
等级：
#74 得分：0 回复于： 2011-01-02 14:59:21
6666666666666666666666666666666666666666
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

YBGIS19880928
YBGIS19880928
等级：
#75 得分：0 回复于： 2011-01-02 15:01:59
不错，好东西
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

yeyingqiongtian
yeyingqiongtian
等级：
#76 得分：0 回复于： 2011-01-02 15:19:45
这么牛逼
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

zjuwispersure
zjuwispersure
等级：
#77 得分：0 回复于： 2011-01-02 15:31:21
mark.........
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

xjbbb
xjbbb
等级：
#78 得分：0 回复于： 2011-01-02 15:48:30
谢谢分享~~
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

wangtaozijia
wangtaozijia
等级：
#79 得分：0 回复于： 2011-01-02 15:59:17
sadSDASDSA
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

comewisdom
comewisdom
等级：
#80 得分：0 回复于： 2011-01-02 16:00:02
路过路过路过.学习学习学习.............
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

qeeqee123
qeeqee123
等级：
#82 得分：0 回复于： 2011-01-02 16:24:49
Assembly code
?
1
 
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

v_JULY_v  
v_JULY_v
等级：
#83 得分：0 回复于： 2011-01-02 16:46:11
引用 73 楼 jixingzhong 的回复:
提倡共享精神。。。。

汗，帖子被移动了。。
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

tianli1123
tianli1123
等级：
#84 得分：0 回复于： 2011-01-02 16:56:31
太好了
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

dareone
dareone
等级：
#85 得分：0 回复于： 2011-01-02 16:57:17
嗯，对，就是这样
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

Ryan_cao
Ryan_cao
等级：
#86 得分：0 回复于： 2011-01-02 17:04:05
受教了，谢谢
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

dossysoft
dossysoft
等级：
#87 得分：0 回复于： 2011-01-02 17:15:33
讲的非常详细，赞一个
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

wdh8410
wdh8410
等级：
#88 得分：0 回复于： 2011-01-02 17:16:33
好复杂啊 谢谢分享
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

ytmdk
ytmdk
等级：
#89 得分：0 回复于： 2011-01-02 17:33:56
HENBUCUODEDONGXI
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

why1312
why1312
等级：
#90 得分：0 回复于： 2011-01-02 17:55:54
好东西
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

zlcp520
zlcp520
等级：
#91 得分：0 回复于： 2011-01-02 17:59:44
内容存入剪贴板
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

attop
attop
等级：
#92 得分：0 回复于： 2011-01-02 18:01:26
mark 

学习

谢谢
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

copybeethoven
copybeethoven
等级：
#93 得分：0 回复于： 2011-01-02 18:07:35
算法啊算法 这次期末考哥估计悬了  LZV5 
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

lkq2010
lkq2010
等级：
#94 得分：0 回复于： 2011-01-02 18:24:59
不错啊啊啊
好东西啊
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

lkq2010
lkq2010
等级：
#95 得分：0 回复于： 2011-01-02 18:25:25
很纠结  看不懂啊
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

hxpgongwx
hxpgongwx
等级：
#96 得分：0 回复于： 2011-01-02 18:38:11
我用下看看，积分不够哦

对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

zhzxlc_06
zhzxlc_06
等级：
#97 得分：0 回复于： 2011-01-02 18:40:08
收藏~
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理

mide_c
mide_c
等级：
#98 得分：0 回复于： 2011-01-02 19:01:18
在下艰难的从第一行开始认真的研究，一直看完了左旋右旋都没啥问题。
插入删除的还有待再仔细研究！我一定要把它弄明白！腾讯的面试我就卡在了这题上！
对我有用[0] 丢个板砖[0] 引用 | 举报 | 管理
1 2 3 下一页 第   页
管理菜单 结帖发帖回复
台湾程序员游戏开发经历
陈勇- 敏捷开发现状及发展之路
分享你的发现 赢下载积分

2013年10月微软MVP开始
CSDN与微软合作，长期为用户提供申请“微软最有价值专家”的平台，希望有兴趣的朋友能够积极参与。
回复内容
编辑预览
粗体
斜体
下划线
---------------
字体大小
字体颜色
---------------
图片
链接
---------------
左对齐
居中对齐
右对齐
---------------
引用
代码
---------------
QQ
monkey
onion
---------------
押宝
---------------
清除格式

每天回帖即可获得10分可用分！小技巧：教您如何更快获得可用分 你还可以输入10000个字符(Ctrl+Enter)
这里发言，表示您接受了CSDN论坛的用户行为准则。
请对您的言行负责，并遵守中华人民共和国有关法律法规,尊重网上道德。
转载文章请注明出自“CSDN（www.csdn.net）”。如是商业用途请联系原作者。
[关闭][关闭]
公司简介|招贤纳士|广告服务|银行汇款帐号|联系方式|版权声明|法律顾问|问题报告
QQ客服 微博客服 论坛反馈 联系邮箱：webmaster@csdn.net 服务热线：400-600-2320
京 ICP 证 070598 号
北京创新乐知信息技术有限公司 版权所有
世纪乐知(北京)网络技术有限公司 提供技术支持
江苏乐知网络技术有限公司 提供商务支持
Copyright © 1999-2012, CSDN.NET, All Rights Reserved 

