

您还未登录！|登录|注册|帮助
 首页
 业界
 移动
 云计算
 研发
 论坛
 博客
 下载
 
更多
 









业界
移动开发
云计算
软件研发
专题
程序员杂志
.























编程语言
开放平台
HTML5
前端开发
智能算法
架构
开源
数据库
.







.
订阅软件研发RSSCSDN首页>软件研发 




对话Linus Torvalds：大多黑客甚至连指针都未理解


 发表于2013-01-10 14:04| 6876次阅读| 来源CSDN| 44 条评论| 作者夏梦竹
.
编程LinusTorvaldC

摘要：Linus Torvalds坦言那些狡诈的通过文件名查找高速缓存，然后又抱怨自己能力一般的内核“恶魔”才是他欣赏的；相反，很多人连低水平的内核编程都还没学好。 


几周前， Linus Torvalds在Slashdot上回答了一些问题。其中有一条引发了开发者们的强烈关注，当被问到他心目中的内核黑客时，他说自己这些日子已经不怎么看代码了，除非是帮别人审查。他稍微暂停了一下，坦言那些“狡猾”的通过文件名查找高速缓存又抱怨自己能力一般的内核“恶魔”（黑客）才是他欣赏的。
 
他说：
 

相反，很多人连低水平的内核编程都还没学好。像lockless用名字查找（name lookup）功能即使不大也不复杂，却是指针到指针的一个简单及良好的使用方法。比如，我曾看见过许多人通过跟踪上一页条目删除一个单向链接的列表项，然后删除该条目。例如：
 1.if (prev)  2.    prev->next = entry->next;  3.else  4.    list_head = entry->next;  
每当我看到这些的代码，我会说：“此人不了解指针”。这还是一个可悲的、常见的问题。
 
如果开发者能够理解指针，只需要使用“指向该条目的指针”并初始化list_head，然后贯穿列表，此时无需使用任何条件语句即可删除该条目，只需通过 *pp = entry->next。
 
我想我理解指针，但不幸的是，如果要实现删除函数，我会一直保持跟踪前面的列表节点。这里是代码草稿：
 
不理解指针的人做法：
 1.typedef struct node  2.{  3.    struct node * next;  4.    ....  5.} node;  6. 7.typedef bool (* remove_fn)(node const * v);  8. 9.// Remove all nodes from the supplied list for which the   10.// supplied remove function returns true.  11.// Returns the new head of the list.  12.node * remove_if(node * head, remove_fn rm)  13.{  14.    for (node * prev = NULL, * curr = head; curr != NULL; )  15.    {  16.        node * next = curr->next;  17.        if (rm(curr))  18.        {  19.            if (prev)  20.                prev->next = curr->next;  21.            else  22.                head = curr->next;  23.            free(curr);  24.        }  25.        else  26.            prev = curr;  27.        curr = next;  28.    }  29.    return head;  30.}  
这个链表很简单，但可以把每个节点的指针和sentinel值构建成了一个完美的结构体，但是修改这个表的代码需要很精妙。难怪链表功能会常出现在许多面试环节中。
 
上面执行的代码是处理从列表头中删除任何节点所需的条件。
 
现在，让我们好好记住Linus Torvalds执行代码。在这种情况下，我们通过一个指针指向列表头来贯穿列表遍历修改。
 
Two star programming：
 1.void remove_if(node ** head, remove_fn rm)  2.{  3.    for (node** curr = head; *curr; )  4.    {  5.        node * entry = *curr;  6.        if (rm(entry))  7.        {  8.            *curr = entry->next;  9.            free(entry);  10.        }  11.        else  12.            curr = &entry->next;  13.    }  14.}  
好多了！最关键的部分在于：链表中的链接都是指针，因此指针到指针是修改链表的首选方案。
 
改进版的remove_if()是一个使用双重星号的例子，双重星号象征着两重间接寻址，再加一个星（third star）又会太过多余。
 
英文出自：Wordaligned

   .


顶0踩0.



推荐阅读相关主题： 面试审查nulllist


相关文章
最新报道
.

•对话Linus Torvalds：大多黑客甚至连指针都未理解
•分享9条经典的编程语录
•伍斌：自动自发的敏捷团队
•为什么应该用模块取代C/C++中的头文件？
•应用示例和对象是编程的未来吗？
•C，DennisRitchie的不朽遗产
.






.


已有44条评论


还可以再输入500个字



您还没有登录! 请 登录 或 注册 ..

最新评论
最热评论
.


duyanning1小时前
这就是不用C++的好处：一段最基本的代码可以给每个看到这段代码的新手卖弄一遍，用C++的话，这些操作指针的代码再精巧，别人也没兴趣看呀。我一下理解大王猛批C++的良苦用心了。
+1 回复 .





..

carr1234小时前
垃圾代码， Linus是个傻X，写的代码也垃圾。
+1 回复 .





..

black_eyer4小时前
让我对指针的了解又深入一层！
+1 回复 .





..

lonelyhaisong5小时前
关键还是研究了一级指针和二级指针的区别及运用，对于一级指针一般都是用来改变变量的值，对于函数参数是地址传递，可以改变调用处变量的值，而二级指针作为指针的指针，改变的是一级指针的值。
+1 回复 .





..

czxskell6小时前
多么简单直观有效啊，这不是写回字，是基础啊。
+1 回复 .





.


laozi5小时前
是的，简单直观才是高手追求的目标，有本事改这段代码，依然直观和有效，我是想不出来的
+1 回复 .





...

okgoood6小时前
** 这在C语言里面是很基础的东西。
+1 回复 .





.


loongsking1小时前
可惜啊，很少有人愿意去学，，，，
+1 回复 .





...

nevil7小时前
不错，不过驱动里写链表一直都用内核通用list,很久没自己实现链表了
+1 回复 .





..

ustb_cc9小时前
本人愚钝，花了半个多小时才看懂第二个程序。
如果把结构体改为：
typedef struct node
{
 ...
 struct node *next;
}node;
上述程序还能正确执行吗？望大神不吝赐教。
+1 回复 .





.


king_on7小时前
你把指针链表曲解了，这要是让linus看见，怕会骂你。
链表元素中的next在结构体中定义的位置是没有任何要求的，并不是“指向下一个元素的指针就得定义在结构体的最后”，也没有“指向前一个元素的指针就得定义在开始”。any where!
+1 回复 .





..

niepan12186小时前
回复@king_on:是的
+1 回复 .





..

niepan12186小时前
回复@niepan1218:顶
+1 回复 .





...

wanmeiyang10小时前
《c和指针》链表一章就有此方法
+1 回复 .





.


laozi7小时前
如果书上不是这么写，要这本书干什么
+1 回复 .





...

dovsnier10小时前
忽悠人了这又在
+1 回复 .





..

newheshe11小时前
娘的，这话也就Linus能说，要是CSDN上任何一个说出来，肯定招来一大堆有工作经验的人过来强调“奇技淫巧”、“代码是写给人看的”，说不准还会冒出谁拿出“回字几种写法”来起哄。
1票，来自hellostory+1 回复 .





.


foren_whb10小时前
+1
1票，来自hellostory+1 回复 .





..

king_on7小时前
人家级别在那儿摆着那。这就像梵高随意的乱花一气，也是名画
+1 回复 .





..

foundersg6小时前
我曾在CSDN上用“回字几种写法”来讥讽C++的“奇技淫巧”，不知道newheshe指我还是指某个与我英雄所见略同的人。特此声明绝不是起哄:) 而且Linus Torvalds也不喜欢C++。
以Torvalds提到的这个例子来说，我认同他的观点。不过我的团队里如果有人写出第一个版本，我也欣然接受，我甚至建议他们避免使用双重指针，毕竟不能以Kernel Developer的标准来要求所有的人。
+1 回复 .





...

lovecuicui1311小时前
受教了
+1 回复 .





..

bisking11小时前
噢。。。指针，我的是11:30
2票，来自carloshsdiffman+1 回复 .





..

zql198200012小时前
这个确实是很巧妙。 其实 curr记住的是 你需要删除的节点的上一个节点指向的删除节点的指针的地址。这样就变相的记住了上一个节点。所以
if (prev)  
                prev->next = curr->next;  
            else  
                head = curr->next;  
这句话确实省了。不过这样不利于理解和阅读，新手容易出错。
+1 回复 .





..

lixinnan1813小时前
指针。。。。难倒一群人
+1 回复 .





..

laozi13小时前
顺便感慨一下，现在还有多少语言能用到指针啊！哪怕是c++都习惯用引用了，唉！
可怕的指针在高手眼里可是攻城利器啊，正所谓一寸短一寸险，但是敢用短兵器的哪个不是高手啊。比如wtl的thunk技术，好比移形换影，轻轻松松解决了mfc时代冗长的代码
+1 回复 .





..

pairsfish13小时前
不错，怎么收藏文章呀。
1票，来自newheshe+1 回复 .





..

haosheng12013-01-10 22:45
另外这里高手解释一下Linus Torvalds说的是什么呀，我好像认识但是看不懂，是法文的菜谱吗。
+1 回复 .





..

ououpp2013-01-10 20:55
另外这里高手解释一下Linus Torvalds说的是什么呀，我好像认识但是看不懂，是法文的菜谱吗。
+1 回复 .





..

ououpp2013-01-10 20:54
Linus Torvalds，我的偶像，可是我现在已经不用linux了，怀念一下。
+1 回复 .





..

ououpp2013-01-10 20:53
谁买linux内核解读，买了2年了也没看，论斤麦。
+1 回复 .





..

a2742397022013-01-10 17:55
看来我也是新手，表示看不出node**的方法比第一种的好在哪里
+1 回复 .





.


q_sdfg1232013-01-10 18:14
区别是第一种方法修改当前节点指向的下一个节点的地址，第二种方法修改的是当前节点中存放的节点的地址
+1 回复 .





...

lxl8432013-01-10 17:51
应该是*curr != NULL;
+1 回复 .





.


q_sdfg1232013-01-10 17:59
和作者的意思一样，作者用的是简写
+1 回复 .





...

laozi2013-01-10 17:50
是比较巧妙，不返回新的head，而是在遍历的时候修改head值来完成。非常漂亮，若从第一个节点开始都是要删除的，通过*curr = entry->next不断刷新head的值；若有中断（不是从头开始连续节点要删除），则通过curr = &entry->next，在保留住新的head的同时，把curr自动转成中间指针
+1 回复 .





.


todd9112013-01-10 19:21
这样做的好处是什么啊？请大侠指教~
+1 回复 .





..

oqqray123124512013-01-10 21:17
第二种情况head是不变的。。。精髓在于用curr记录需要修改的next域。
+1 回复 .





..

laozi13小时前
回复@todd911:好处是不用返回新head，并且不是刻意不返回，而是在遍历过程中很自然的赋值了，同时这一个方式可以处理之后的遍历，不用再新开指针来保存中间指针。其实这段代码的可读性还是不错的，没有任何多余的代码，甚至for循环的终止条件也是用最短的代码，堪称优雅 ---- elegent。举个简单例子，王八拳能打倒人，沾衣十八跌也能弄倒人。一个吃相难看，还费力；一个借力使力，潇洒。等大家过了王八拳境界的时候，就能开始欣赏Linus了
+1 回复 .





..

todd91112小时前
回复@laozi:谢谢大侠的指点~
+1 回复 .





..

wlxf217dc9小时前
有一个问题，用第二种办法的话，如何把被删除的节点的上一节点和下一节点连接在一起呢？
+1 回复 .





..

wlxf217dc9小时前
我错了。。。无视我吧
+1 回复 .





...

lxl8432013-01-10 17:39
for (node** curr = head; *curr; )
*curr;完全是多余的啊
+1 回复 .





.


ancientlysine2013-01-10 19:07
到NULL了就要停啊
+1 回复 .





...

king_on2013-01-10 17:24
*pp = entry->next;
看来我还是不了解指针那。
但实际上没有使用linus说的那个方法的原因是“根本没有在意entry->next也是一个指针”。总之这是个高手和平庸的差距
1票，来自king_on+1 回复 .





..
共1页 首页  上一页 1 下一页  末页





.





.




.





..



.





..



.





..



.





..



.





..



.





...
请您注意 ·自觉遵守：爱国、守法、自律、真实、文明的原则
·尊重网上道德，遵守《全国人大常委会关于维护互联网安全的决定》及中华人民共和国其他各项有关法律法规
·严禁发表危害国家安全，破坏民族团结、国家宗教政策和社会稳定，含侮辱、诽谤、教唆、淫秽等内容的作品
·承担一切因您的行为而直接或间接导致的民事或刑事法律责任
·您在CSDN新闻评论发表的作品，CSDN有权在网站内保留、转载、引用或者删除
·参与本评论即表明您已经阅读并接受上述条款





CSDN官方微信
扫描二维码,向CSDN吐槽
微信号：CSDNnews

程序员杂志for iPad 免费下载 

每日资讯快速浏览 



微博关注




相关热门文章


2013年Java继续火的五大理由
Patrick Wyatt：代码没问题 程序却有bug？
Linux会是更好的游戏平台？暴雪是这么认为的！
GitHub历史上最糟糕宕机事故回放及反省
对话Linus Torvalds：大多黑客甚至连指针都未理解
TIOBE 2013年1月：不负重望 Objective-C再次赢得桂冠！
现代Objective-C七宗罪
淘宝网的技术发展史（一）——个人网站时代
iOS开发者分享在Google三个月的工作经验
构建高可扩Web架构和分布式系统实战



活动







01-23

1月23日CTO俱乐部交流会：金山云大规模存储架构及大型电商架构演化 




01-22

开源力量公开课第四期 Maven与持续集成 




01-17

TUP 第二十七期：产品与设计 




01-15

开源力量公开课第三期——2小时学会iOS应用开发 




01-08

 Go语言，一门面向连接和组合的语言 




01-06

1月6日北京交流会：当当网如何打造个性化推荐&精准营销生态系统 


.

热门专区
win8开发马拉松
2012微软技术大会
数据库构架师专区
IBM AIX学院
异构编程专区
. 
公司简介|招贤纳士|广告服务|银行汇款帐号|联系方式|版权声明|法律顾问|问题报告京 ICP 证 070598 号北京创新乐知信息技术有限公司 版权所有世纪乐知(北京)网络技术有限公司 提供技术支持江苏乐知网络技术有限公司 提供商务支持 联系邮箱：webmaster(at)csdn.netCopyright © 1999-2012, CSDN.NET, All Rights Reserved  
