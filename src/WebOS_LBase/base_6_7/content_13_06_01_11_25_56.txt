非常笑
（转）VC++多线程编程

留个纪念，不错的总结。十个例子清晰列举啦多线程编程的奥妙。 
VC中多线程使用比较广泛而且实用,在网上看到的教程.感觉写的挺好.

一、问题的提出
编写一个耗时的单线程程序：
　　新建一个基于对话框的应用程序SingleThread，在主对话框IDD_SINGLETHREAD_DIALOG添加一个按钮，ID为IDC_SLEEP_SIX_SECOND，标题为

“延时6秒”，添加按钮的响应函数，代码如下：

void CSingleThreadDlg::OnSleepSixSecond()
{
Sleep(6000); //延时6秒
}
　　编译并运行应用程序，单击“延时6秒”按钮，你就会发现在这6秒期间程序就象“死机”一样，不在响应其它消息。为了更好地处理这种

耗时的操作，我们有必要学习——多线程编程。
二、多线程概述
　　进程和线程都是操作系统的概念。进程是应用程序的执行实例，每个进程是由私有的虚拟地址空间、代码、数据和其它各种系统资源组成

，进程在运行过程中创建的资源随着进程的终止而被销毁，所使用的系统资源在进程终止时被释放或关闭。
　　线程是进程内部的一个执行单元。系统创建好进程后，实际上就启动执行了该进程的主执行线程，主执行线程以函数地址形式，比如说

main或WinMain函数，将程序的启动点提供给Windows系统。主执行线程终止了，进程也就随之终止。
　　每一个进程至少有一个主执行线程，它无需由用户去主动创建，是由系统自动创建的。用户根据需要在应用程序中创建其它线程，多个线

程并发地运行于同一个进程中。一个进程中的所有线程都在该进程的虚拟地址空间中，共同使用这些虚拟地址空间、全局变量和系统资源，所

以线程间的通讯非常方便，多线程技术的应用也较为广泛。
　　多线程可以实现并行处理，避免了某项任务长时间占用CPU时间。要说明的一点是，目前大多数的计算机都是单处理器（CPU）的，为了运

行所有这些线程，操作系统为每个独立线程安排一些CPU时间，操作系统以轮换方式向线程提供时间片，这就给人一种假象，好象这些线程都在

同时运行。由此可见，如果两个非常活跃的线程为了抢夺对CPU的控制权，在线程切换时会消耗很多的CPU资源，反而会降低系统的性能。这一

点在多线程编程时应该注意。
　　Win32 SDK函数支持进行多线程的程序设计，并提供了操作系统原理中的各种同步、互斥和临界区等操作。Visual C++
6.0中，使用MFC类库也实现了多线程的程序设计，使得多线程编程更加方便。
三、Win32 API对多线程编程的支持
　　Win32 提供了一系列的API函数来完成线程的创建、挂起、恢复、终结以及通信等工作。下面将选取其中的一些重要函数进行说明。
1、HANDLE CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes,
                 DWORD dwStackSize,
                 LPTHREAD_START_ROUTINE lpStartAddress,
                 LPVOID lpParameter,
                 DWORD dwCreationFlags,
                 LPDWORD lpThreadId);
该函数在其调用进程的进程空间里创建一个新的线程，并返回已建线程的句柄，其中各参数说明如下：
lpThreadAttributes：指向一个 SECURITY_ATTRIBUTES 结构的指针，该结构决定了线程的安全属性，一般置为 NULL；
dwStackSize：指定了线程的堆栈深度，一般都设置为0；
lpStartAddress：表示新线程开始执行时代码所在函数的地址，即线程的起始地址。一般情况为(LPTHREAD_START_ROUTINE)ThreadFunc，

ThreadFunc
是线程函数名；
lpParameter：指定了线程执行时传送给线程的32位参数，即线程函数的参数；
dwCreationFlags：控制线程创建的附加标志，可以取两种值。如果该参数为0，线程在被创建后就会立即开始执行；如果该参数为

CREATE_SUSPENDED,则系统产生线程后，该线程处于挂起状态，并不马上执行，直至函数ResumeThread被调用；

lpThreadId：该参数返回所创建线程的ID；
如果创建成功则返回线程的句柄，否则返回NULL。
2、DWORD SuspendThread(HANDLE hThread);
该函数用于挂起指定的线程，如果函数执行成功，则线程的执行被终止。 3、DWORD ResumeThread(HANDLE hThread);
该函数用于结束线程的挂起状态，执行线程。 4、VOID ExitThread(DWORD dwExitCode);
该函数用于线程终结自身的执行，主要在线程的执行函数中被调用。其中参数dwExitCode用来设置线程的退出码。 5、BOOL
TerminateThread(HANDLE hThread,DWORD dwExitCode);
　　一般情况下，线程运行结束之后，线程函数正常返回，但是应用程序可以调用TerminateThread强行终止某一线程的执行。各参数含义如下

：
hThread：将被终结的线程的句柄；
dwExitCode：用于指定线程的退出码。
　　使用TerminateThread()终止某个线程的执行是不安全的，可能会引起系统不稳定；虽然该函数立即终止线程的执行，但并不释放线程所占

用的资源。因此，一般不建议使用该函数。

6、BOOL PostThreadMessage(DWORD idThread,
   UINT Msg,
   WPARAM wParam,
   LPARAM lParam);
该函数将一条消息放入到指定线程的消息队列中，并且不等到消息被该线程处理时便返回。
idThread：将接收消息的线程的ID；
Msg：指定用来发送的消息；
wParam：同消息有关的字参数；
lParam：同消息有关的长参数；
调用该函数时，如果即将接收消息的线程没有创建消息循环，则该函数执行失败。
四、Win32 API多线程编程例程
例程1 MultiThread1
建立一个基于对话框的工程MultiThread1，在对话框IDD_MULTITHREAD1_DIALOG中加入两个按钮和一个编辑框，两个按钮的ID分别是IDC_START

，IDC_STOP
，标题分别为“启动”，“停止”，IDC_STOP的属性选中Disabled；编辑框的ID为IDC_TIME ，属性选中Read-only；
　
在MultiThread1Dlg.h文件中添加线程函数声明： void ThreadFunc();
注意，线程函数的声明应在类CMultiThread1Dlg的外部。在类CMultiThread1Dlg内部添加protected型变量： HANDLE
hThread;
DWORD ThreadID;
分别代表线程的句柄和ID。
　
在MultiThread1Dlg.cpp文件中添加全局变量m_bRun ： volatile BOOL m_bRun;
m_bRun 代表线程是否正在运行。
你要留意到全局变量 m_bRun 是使用 volatile 修饰符的，volatile
修饰符的作用是告诉编译器无需对该变量作任何的优化，即无需将它放到一个寄存器中，并且该值可被外部改变。对于多线程引用的全局变量

来说，volatile
是一个非常重要的修饰符。
编写线程函数： void ThreadFunc()
{
CTime time;
CString strTime;
m_bRun=TRUE;
while(m_bRun)
{
time=CTime::GetCurrentTime();
strTime=time.Format("%H:%M:%S");
::SetDlgItemText(AfxGetMainWnd()->m_hWnd,IDC_TIME,strTime);
Sleep(1000);
}
}
该线程函数没有参数，也不返回函数值。只要m_bRun为TRUE，线程一直运行。
双击IDC_START按钮，完成该按钮的消息函数： void CMultiThread1Dlg::OnStart()
{
// TODO: Add your control notification handler code here
hThread=CreateThread(NULL,
0,
(LPTHREAD_START_ROUTINE)ThreadFunc,
NULL,
0,
&ThreadID);
GetDlgItem(IDC_START)->EnableWindow(FALSE);
GetDlgItem(IDC_STOP)->EnableWindow(TRUE);
}
双击IDC_STOP按钮，完成该按钮的消息函数： void CMultiThread1Dlg::OnStop()
{
// TODO: Add your control notification handler code here
m_bRun=FALSE;
GetDlgItem(IDC_START)->EnableWindow(TRUE);
GetDlgItem(IDC_STOP)->EnableWindow(FALSE);
}
编译并运行该例程，体会使用Win32 API编写的多线程。

例程2 MultiThread2
　　该线程演示了如何传送一个一个整型的参数到一个线程中，以及如何等待一个线程完成处理。
建立一个基于对话框的工程MultiThread2，在对话框IDD_MULTITHREAD2_DIALOG中加入一个编辑框和一个按钮，ID分别是IDC_COUNT，IDC_START
，按钮控件的标题为“开始”；
在MultiThread2Dlg.h文件中添加线程函数声明： void ThreadFunc(int integer);
注意，线程函数的声明应在类CMultiThread2Dlg的外部。
在类CMultiThread2Dlg内部添加protected型变量: HANDLE hThread;
DWORD ThreadID;
分别代表线程的句柄和ID。
　
打开ClassWizard，为编辑框IDC_COUNT添加int型变量m_nCount。在MultiThread2Dlg.cpp文件中添加：void
ThreadFunc(int integer)
{
int i;
for(i=0;i<integer;i++)
{
Beep(200,50);
Sleep(1000);
}
}
双击IDC_START按钮，完成该按钮的消息函数： void CMultiThread2Dlg::OnStart()
{
UpdateData(TRUE);
int integer=m_nCount;
hThread=CreateThread(NULL,
0,
(LPTHREAD_START_ROUTINE)ThreadFunc,
(VOID*)integer,
0,
&ThreadID);
GetDlgItem(IDC_START)->EnableWindow(FALSE);
WaitForSingleObject(hThread,INFINITE);
GetDlgItem(IDC_START)->EnableWindow(TRUE);
}
顺便说一下WaitForSingleObject函数，其函数原型为：DWORD WaitForSingleObject(HANDLE hHandle,DWORD
dwMilliseconds);
hHandle为要监视的对象（一般为同步对象，也可以是线程）的句柄；
dwMilliseconds为hHandle对象所设置的超时值，单位为毫秒；
　　当在某一线程中调用该函数时，线程暂时挂起，系统监视hHandle所指向的对象的状态。如果在挂起的dwMilliseconds毫秒内，线程所等待

的对象变为有信号状态，则该函数立即返回；如果超时时间已经到达dwMilliseconds毫秒，但hHandle所指向的对象还没有变成有信号状态，函

数照样返回。参数dwMilliseconds有两个具有特殊意义的值：0和INFINITE。若为0，则该函数立即返回；若为INFINITE，则线程一直被挂起，

直到hHandle所指向的对象变为有信号状态时为止。
　　本例程调用该函数的作用是按下IDC_START按钮后，一直等到线程返回，再恢复IDC_START按钮正常状态。编译运行该例程并细心体会。
例程3 MultiThread3
传送一个结构体给一个线程函数也是可能的，可以通过传送一个指向结构体的指针参数来完成。先定义一个结构体：
typedef struct
{
int firstArgu,
long secondArgu,
…
}myType,*pMyType;
创建线程时CreateThread(NULL,0,threadFunc,pMyType,…);
在threadFunc函数内部，可以使用“强制转换”：
int intValue=((pMyType)lpvoid)->firstArgu;
long longValue=((pMyType)lpvoid)->seconddArgu;
……
例程3 MultiThread3将演示如何传送一个指向结构体的指针参数。
建立一个基于对话框的工程MultiThread3，在对话框IDD_MULTITHREAD3_DIALOG中加入一个编辑框IDC_MILLISECOND，一个按钮IDC_START，标题

为“开始”
，一个进度条IDC_PROGRESS1；
打开ClassWizard，为编辑框IDC_MILLISECOND添加int型变量m_nMilliSecond，为进度条IDC_PROGRESS1添加CProgressCtrl型变量

m_ctrlProgress；

在MultiThread3Dlg.h文件中添加一个结构的定义： struct threadInfo
{
UINT nMilliSecond;
CProgressCtrl* pctrlProgress;
};
线程函数的声明： UINT ThreadFunc(LPVOID lpParam);
注意，二者应在类CMultiThread3Dlg的外部。
在类CMultiThread3Dlg内部添加protected型变量: HANDLE hThread;
DWORD ThreadID;
分别代表线程的句柄和ID。
在MultiThread3Dlg.cpp文件中进行如下操作：
定义公共变量 threadInfo Info；
双击按钮IDC_START，添加相应消息处理函数：void CMultiThread3Dlg::OnStart()
{
// TODO: Add your control notification handler code here
UpdateData(TRUE);
Info.nMilliSecond=m_nMilliSecond;
Info.pctrlProgress=&m_ctrlProgress;
hThread=CreateThread(NULL,
0,
(LPTHREAD_START_ROUTINE)ThreadFunc,
&Info,
0,
&ThreadID);

}
在函数BOOL CMultiThread3Dlg::OnInitDialog()中添加语句： {
……

// TODO: Add extra initialization here
m_ctrlProgress.SetRange(0,99);
m_nMilliSecond=10;
UpdateData(FALSE);
return TRUE; // return TRUE unless you set the focus to a control
}
添加线程处理函数：UINT ThreadFunc(LPVOID lpParam) {
threadInfo* pInfo=(threadInfo*)lpParam;
for(int i=0;i<100;i++)
{
int nTemp=pInfo->nMilliSecond;
pInfo->pctrlProgress->SetPos(i);
Sleep(nTemp);
}
return 0;
}
　　顺便补充一点，如果你在void CMultiThread3Dlg::OnStart() 函数中添加语句，编译运行你就会发现进度条不进行刷新，主线程也停止了反应。什么原因呢？这是因为WaitForSingleObject函数等待子线程

（ThreadFunc）结束时，导致了线程死锁。因为WaitForSingleObject函数会将主线程挂起（任何消息都得不到处理），而子线程ThreadFunc正

在设置进度条，一直在等待主线程将刷新消息处理完毕返回才会检测通知事件。这样两个线程都在互相等待，死锁发生了，编程时应注意避免

。

例程4 MultiThread4
该例程测试在Windows下最多可创建线程的数目。

建立一个基于对话框的工程MultiThread4，在对话框IDD_MULTITHREAD4_DIALOG中加入一个按钮IDC_TEST和一个编辑框IDC_COUNT，按钮标题为

“测试”
， 编辑框属性选中Read-only；
在MultiThread4Dlg.cpp文件中进行如下操作：
添加公共变量volatile BOOL m_bRunFlag=TRUE;
该变量表示是否还能继续创建线程。
添加线程函数：
DWORD WINAPI threadFunc(LPVOID threadNum)
{
while(m_bRunFlag)
{
Sleep(3000);
}
return 0;
}
只要 m_bRunFlag 变量为TRUE，线程一直运行。
双击按钮IDC_TEST，添加其响应消息函数：void CMultiThread4Dlg::OnTest()
{
DWORD threadID;
GetDlgItem(IDC_TEST)->EnableWindow(FALSE);
long nCount=0;
while(m_bRunFlag)
{
if(CreateThread(NULL,0,threadFunc,NULL,0,&threadID)==NULL)
{
   m_bRunFlag=FALSE;
   break;
}
else
{
   nCount++;
}
}
   //不断创建线程，直到再不能创建为止
m_nCount=nCount;
UpdateData(FALSE);
Sleep(5000);
   //延时5秒，等待所有创建的线程结束
GetDlgItem(IDC_TEST)->EnableWindow(TRUE);
    m_bRunFlag=TRUE;
}
五、MFC对多线程编程的支持
　　MFC中有两类线程，分别称之为工作者线程和用户界面线程。二者的主要区别在于工作者线程没有消息循环，而用户界面线程有自己的消息

队列和消息循环。
　　工作者线程没有消息机制，通常用来执行后台计算和维护任务，如冗长的计算过程，打印机的后台打印等。用户界面线程一般用于处理独

立于其他线程执行之外的用户输入，响应用户及系统所产生的事件和消息等。但对于Win32的API编程而言，这两种线程是没有区别的，它们都

只需线程的启动地址即可启动线程来执行任务。
　　在MFC中，一般用全局函数AfxBeginThread()来创建并初始化一个线程的运行，该函数有两种重载形式，分别用于创建工作者线程和用户界

面线程。两种重载函数原型和参数分别说明如下：

(1) CWinThread* AfxBeginThread(AFX_THREADPROC pfnThreadProc,
                      LPVOID pParam,
                      nPriority=THREAD_PRIORITY_NORMAL,
                      UINT nStackSize=0,
                      DWORD dwCreateFlags=0,
                      LPSECURITY_ATTRIBUTES lpSecurityAttrs=NULL);
PfnThreadProc:指向工作者线程的执行函数的指针，线程函数原型必须声明如下： UINT ExecutingFunction(LPVOID
pParam);
请注意，ExecutingFunction()应返回一个UINT类型的值，用以指明该函数结束的原因。一般情况下，返回0表明执行成功。
pParam：传递给线程函数的一个32位参数，执行函数将用某种方式解释该值。它可以是数值，或是指向一个结构的指针，甚至可以被忽略；
nPriority：线程的优先级。如果为0，则线程与其父线程具有相同的优先级；
nStackSize:线程为自己分配堆栈的大小，其单位为字节。如果nStackSize被设为0，则线程的堆栈被设置成与父线程堆栈相同大小；
dwCreateFlags：如果为0，则线程在创建后立刻开始执行。如果为CREATE_SUSPEND，则线程在创建后立刻被挂起；
lpSecurityAttrs：线程的安全属性指针，一般为NULL；
(2) CWinThread* AfxBeginThread(CRuntimeClass* pThreadClass,
                      int nPriority=THREAD_PRIORITY_NORMAL,
                      UINT nStackSize=0,
                      DWORD dwCreateFlags=0,
                      LPSECURITY_ATTRIBUTES lpSecurityAttrs=NULL);

　　pThreadClass 是指向 CWinThread
的一个导出类的运行时类对象的指针，该导出类定义了被创建的用户界面线程的启动、退出等；其它参数的意义同形式1。使用函数的这个原型

生成的线程也有消息机制，在以后的例子中我们将发现同主线程的机制几乎一样。
下面我们对CWinThread类的数据成员及常用函数进行简要说明。
m_hThread：当前线程的句柄；
m_nThreadID:当前线程的ID；
m_pMainWnd：指向应用程序主窗口的指针
BOOL CWinThread::CreateThread(DWORD dwCreateFlags=0,
UINT nStackSize=0,
LPSECURITY_ATTRIBUTES lpSecurityAttrs=NULL);
　　该函数中的dwCreateFlags、nStackSize、lpSecurityAttrs参数和API函数CreateThread中的对应参数有相同含义，该函数执行成功，返回

非0值，否则返回0。
　　一般情况下，调用AfxBeginThread()来一次性地创建并启动一个线程，但是也可以通过两步法来创建线程：首先创建CWinThread类的一个

对象，然后调用该对象的成员函数CreateThread()来启动该线程。

virtual BOOL CWinThread::InitInstance();
　　重载该函数以控制用户界面线程实例的初始化。初始化成功则返回非0值，否则返回0。用户界面线程经常重载该函数，工作者线程一般不

使用InitInstance()。
virtual int CWinThread::ExitInstance();
　　在线程终结前重载该函数进行一些必要的清理工作。该函数返回线程的退出码，0表示执行成功，非0值用来标识各种错误。同

InitInstance()成员函数一样，该函数也只适用于用户界面线程。
 
六、MFC多线程编程实例
　　在Visual C++
6.0编程环境中，我们既可以编写C风格的32位Win32应用程序，也可以利用MFC类库编写C++风格的应用程序，二者各有其优缺点。基于Win32的

应用程序执行代码小巧，运行效率高，但要求程序员编写的代码较多，且需要管理系统提供给程序的所有资源；而基于MFC类库的应用程序可以

快速建立起应用程序，类库为程序员提供了大量的封装类，而且Developer
Studio为程序员提供了一些工具来管理用户源程序，其缺点是类库代码很庞大。由于使用类库所带来的快速、简捷和功能强大等优越性，因此

除非有特殊的需要，否则Visual
C++推荐使用MFC类库进行程序开发。
我们知道，MFC中的线程分为两种：用户界面线程和工作者线程。我们将分别举例说明。
用 MFC 类库编程实现工作者线程
例程5 MultiThread5
为了与Win32 API对照，我们使用MFC 类库编程实现例程3 MultiThread3。
建立一个基于对话框的工程MultiThread5，在对话框IDD_MULTITHREAD5_DIALOG中加入一个编辑框IDC_MILLISECOND，一个按钮IDC_START，标题

为“开始”
，一个进度条IDC_PROGRESS1；
打开ClassWizard，为编辑框IDC_MILLISECOND添加int型变量m_nMilliSecond，为进度条IDC_PROGRESS1添加CProgressCtrl型变量

m_ctrlProgress；

在MultiThread5Dlg.h文件中添加一个结构的定义： struct threadInfo
{
UINT nMilliSecond;
CProgressCtrl* pctrlProgress;
};
线程函数的声明：UINT ThreadFunc(LPVOID lpParam);
注意，二者应在类CMultiThread5Dlg的外部。
在类CMultiThread5Dlg内部添加protected型变量：
CWinThread* pThread;
在MultiThread5Dlg.cpp文件中进行如下操作：定义公共变量：threadInfo Info;
双击按钮IDC_START，添加相应消息处理函数：
void CMultiThread5Dlg::OnStart()
{
// TODO: Add your control notification handler code here
UpdateData(TRUE);
Info.nMilliSecond=m_nMilliSecond;
Info.pctrlProgress=&m_ctrlProgress;
pThread=AfxBeginThread(ThreadFunc,
&Info);
}
在函数BOOL CMultiThread3Dlg::OnInitDialog()中添加语句： {
……

// TODO: Add extra initialization here
m_ctrlProgress.SetRange(0,99);
m_nMilliSecond=10;
UpdateData(FALSE);
return TRUE; // return TRUE unless you set the focus to a control
}
添加线程处理函数： UINT ThreadFunc(LPVOID lpParam)
{
threadInfo* pInfo=(threadInfo*)lpParam;
for(int i=0;i<100;i++)
{
int nTemp=pInfo->nMilliSecond;
pInfo->pctrlProgress->SetPos(i);
Sleep(nTemp);
}
return 0;
}
用 MFC 类库编程实现用户界面线程
创建用户界面线程的步骤：
使用ClassWizard创建类CWinThread的派生类（以CUIThread类为例） class CUIThread : public
CWinThread
{
DECLARE_DYNCREATE(CUIThread)
protected:
CUIThread();           // protected constructor used by dynamic creation
// Attributes
public:
// Operations
public:
// Overrides
// ClassWizard generated virtual function overrides
//{{AFX_VIRTUAL(CUIThread)
public:
virtual BOOL InitInstance();
virtual int ExitInstance();
//}}AFX_VIRTUAL
// Implementation
protected:
virtual ~CUIThread();
// Generated message map functions
//{{AFX_MSG(CUIThread)
// NOTE - the ClassWizard will add and remove member functions here.
//}}AFX_MSG
DECLARE_MESSAGE_MAP()
};
重载函数InitInstance()和ExitInstance()。 BOOL CUIThread::InitInstance()
{
CFrameWnd* wnd=new CFrameWnd;
wnd->Create(NULL,"UI Thread Window");
wnd->ShowWindow(SW_SHOW);
wnd->UpdateWindow();
m_pMainWnd=wnd;
return TRUE;
}
创建新的用户界面线程 void CUIThreadDlg::OnButton1()
{
CUIThread* pThread=new CUIThread();
pThread->CreateThread();
}
请注意以下两点：
A、在UIThreadDlg.cpp的开头加入语句： #include "UIThread.h"
B、把UIThread.h中类CUIThread()的构造函数的特性由 protected 改为 public。
　　用户界面线程的执行次序与应用程序主线程相同，首先调用用户界面线程类的InitInstance()函数，如果返回TRUE，继续调用线程的Run()

函数，该函数的作用是运行一个标准的消息循环，并且当收到WM_QUIT消息后中断，在消息循环过程中，Run()函数检测到线程空闲时（没有消

息），也将调用OnIdle()函数，最后Run()函数返回，MFC调用ExitInstance()函数清理资源。
　　你可以创建一个没有界面而有消息循环的线程，例如：你可以从CWinThread派生一个新类，在InitInstance函数中完成某项任务并返回

FALSE，这表示仅执行InitInstance函数中的任务而不执行消息循环，你可以通过这种方法，完成一个工作者线程的功能。

例程6 MultiThread6
建立一个基于对话框的工程MultiThread6，在对话框IDD_MULTITHREAD6_DIALOG中加入一个按钮IDC_UI_THREAD，标题为“用户界面线程”

右击工程并选中“New Class…”为工程添加基类为CWinThread派生线程类CUIThread。
给工程添加新对话框IDD_UITHREADDLG，标题为“线程对话框”。
为对话框IDD_UITHREADDLG创建一个基于CDialog的类CUIThreadDlg。使用ClassWizard为CUIThreadDlg类添加WM_LBUTTONDOWN消息的处理函数

OnLButtonDown，如下：
void CUIThreadDlg::OnLButtonDown(UINT nFlags, CPoint point)
{
AfxMessageBox("You Clicked The Left Button!");
CDialog::OnLButtonDown(nFlags, point);
}
在UIThread.h中添加 #include "UIThreadDlg.h"
并在CUIThread类中添加protected变量CUIThread m_dlg： class CUIThread : public CWinThread
{
DECLARE_DYNCREATE(CUIThread)
protected:
CUIThread();           // protected constructor used by dynamic creation
// Attributes
public:
// Operations
public:
// Overrides
// ClassWizard generated virtual function overrides
//{{AFX_VIRTUAL(CUIThread)
public:
virtual BOOL InitInstance();
virtual int ExitInstance();
//}}AFX_VIRTUAL
// Implementation
protected:
CUIThreadDlg m_dlg;
virtual ~CUIThread();
// Generated message map functions
//{{AFX_MSG(CUIThread)
// NOTE - the ClassWizard will add and remove member functions here.
//}}AFX_MSG
DECLARE_MESSAGE_MAP()
};
分别重载InitInstance()函数和ExitInstance()函数： BOOL CUIThread::InitInstance()
{
m_dlg.Create(IDD_UITHREADDLG);
m_dlg.ShowWindow(SW_SHOW);
m_pMainWnd=&m_dlg;
return TRUE;
}
int CUIThread::ExitInstance()
{
m_dlg.DestroyWindow();
return CWinThread::ExitInstance();
}
双击按钮IDC_UI_THREAD，添加消息响应函数： void CMultiThread6Dlg::OnUiThread()
{
CWinThread *pThread=AfxBeginThread(RUNTIME_CLASS(CUIThread));
}
并在MultiThread6Dlg.cpp的开头添加： #include "UIThread.h"
　　好了，编译并运行程序吧。每单击一次“用户界面线程”按钮，都会弹出一个线程对话框，在任何一个线程对话框内按下鼠标左键，都会

弹出一个消息框。
七、线程间通讯
　　一般而言,应用程序中的一个次要线程总是为主线程执行特定的任务,这样,主线程和次要线程间必定有一个信息传递的渠道,也就是主线程

和次要线程间要进行通信。这种线程间的通信不但是难以避免的，而且在多线程编程中也是复杂和频繁的，下面将进行说明。

使用全局变量进行通信
由于属于同一个进程的各个线程共享操作系统分配该进程的资源，故解决线程间通信最简单的一种方法是使用全局变量。对于标准类型的全局

变量，我们建议使用volatile
修饰符，它告诉编译器无需对该变量作任何的优化，即无需将它放到一个寄存器中，并且该值可被外部改变。如果线程间所需传递的信息较复

杂，我们可以定义一个结构，通过传递指向该结构的指针进行传递信息。
　
使用自定义消息
我们可以在一个线程的执行函数中向另一个线程发送自定义的消息来达到通信的目的。一个线程向另外一个线程发送消息是通过操作系统实现

的。利用Windows操作系统的消息驱动机制，当一个线程发出一条消息时，操作系统首先接收到该消息，然后把该消息转发给目标线程，接收消

息的线程必须已经建立了消息循环。

例程7 MultiThread7
　　该例程演示了如何使用自定义消息进行线程间通信。首先，主线程向CCalculateThread线程发送消息WM_CALCULATE，CCalculateThread线

程收到消息后进行计算，再向主线程发送WM_DISPLAY消息，主线程收到该消息后显示计算结果。

建立一个基于对话框的工程MultiThread7，在对话框IDD_MULTITHREAD7_DIALOG中加入三个单选按钮IDC_RADIO1，IDC_RADIO2，IDC_RADIO3，标

题分别为1+2+3+4+......+10，1+2+3+4+......+50，1+2+3+4+......+100。加入按钮IDC_SUM，标题为“求和”。加入标签框IDC_STATUS，属性

选中“边框”；

在MultiThread7Dlg.h中定义如下变量： protected:
int nAddend;
代表加数的大小。
分别双击三个单选按钮，添加消息响应函数：void CMultiThread7Dlg::OnRadio1()
{
nAddend=10;
}
void CMultiThread7Dlg::OnRadio2()
{
nAddend=50;

}
void CMultiThread7Dlg::OnRadio3()
{
nAddend=100;

}
并在OnInitDialog函数中完成相应的初始化工作： BOOL CMultiThread7Dlg::OnInitDialog()
{
……
((CButton*)GetDlgItem(IDC_RADIO1))->SetCheck(TRUE);
nAddend=10;
……
在MultiThread7Dlg.h中添加： #include "CalculateThread.h"
#define WM_DISPLAY WM_USER+2
class CMultiThread7Dlg : public CDialog
{
// Construction
public:
CMultiThread7Dlg(CWnd* pParent = NULL); // standard constructor
CCalculateThread* m_pCalculateThread;
……
protected:
int nAddend;
LRESULT OnDisplay(WPARAM wParam,LPARAM lParam);
……
在MultiThread7Dlg.cpp中添加： BEGIN_MESSAGE_MAP(CMultiThread7Dlg, CDialog)
……
ON_MESSAGE(WM_DISPLAY,OnDisplay)
END_MESSAGE_MAP()
LRESULT CMultiThread7Dlg::OnDisplay(WPARAM wParam,LPARAM lParam)
{
int nTemp=(int)wParam;
SetDlgItemInt(IDC_STATUS,nTemp,FALSE);
return 0;
}
以上代码使得主线程类CMultiThread7Dlg可以处理WM_DISPLAY消息，即在IDC_STATUS标签框中显示计算结果。
双击按钮IDC_SUM，添加消息响应函数： void CMultiThread7Dlg::OnSum()
{
m_pCalculateThread=
(CCalculateThread*)AfxBeginThread(RUNTIME_CLASS(CCalculateThread));
Sleep(500);
m_pCalculateThread->PostThreadMessage(WM_CALCULATE,nAddend,NULL);
}
OnSum()函数的作用是建立CalculateThread线程，延时给该线程发送WM_CALCULATE消息。
右击工程并选中“New Class…”为工程添加基类为 CWinThread 派生线程类 CCalculateThread。
在文件CalculateThread.h 中添加 #define WM_CALCULATE WM_USER+1
class CCalculateThread : public CWinThread
{
……
protected:
afx_msg LONG OnCalculate(UINT wParam,LONG lParam);
……
在文件CalculateThread.cpp中添加 LONG CCalculateThread::OnCalculate(UINT wParam,LONG
lParam)
{
int nTmpt=0;
for(int i=0;i<=(int)wParam;i++)
{
nTmpt=nTmpt+i;
}
Sleep(500);
    ::PostMessage((HWND)(GetMainWnd()->GetSafeHwnd()),WM_DISPLAY,nTmpt,NULL);
return 0;
}
BEGIN_MESSAGE_MAP(CCalculateThread, CWinThread)
//{{AFX_MSG_MAP(CCalculateThread)
// NOTE - the ClassWizard will add and remove mapping macros here.
//}}AFX_MSG_MAP
ON_THREAD_MESSAGE(WM_CALCULATE,OnCalculate)
//和主线程对比，注意它们的区别
END_MESSAGE_MAP()
在CalculateThread.cpp文件的开头添加一条： #include "MultiThread7Dlg.h"
　　以上代码为　CCalculateThread　类添加了 WM_CALCULATE 消息，消息的响应函数是 OnCalculate，其功能是根据参数
wParam 的值，进行累加，累加结果在临时变量nTmpt中，延时0.5秒，向主线程发送WM_DISPLAY消息进行显示，nTmpt作为参数传递。
编译并运行该例程,体会如何在线程间传递消息。
八、线程的同步
　　虽然多线程能给我们带来好处，但是也有不少问题需要解决。例如，对于像磁盘驱动器这样独占性系统资源，由于线程可以执行进程的任

何代码段，且线程的运行是由系统调度自动完成的，具有一定的不确定性，因此就有可能出现两个线程同时对磁盘驱动器进行操作，从而出现

操作错误；又例如，对于银行系统的计算机来说，可能使用一个线程来更新其用户数据库，而用另外一个线程来读取数据库以响应储户的需要

，极有可能读数据库的线程读取的是未完全更新的数据库，因为可能在读的时候只有一部分数据被更新过。
　　使隶属于同一进程的各线程协调一致地工作称为线程的同步。MFC提供了多种同步对象，下面我们只介绍最常用的四种：
临界区（CCriticalSection）
事件（CEvent）
互斥量（CMutex）
信号量（CSemaphore）
　
通过这些类，我们可以比较容易地做到线程同步。
A、使用 CCriticalSection 类
　　当多个线程访问一个独占性共享资源时,可以使用“临界区”对象。任一时刻只有一个线程可以拥有临界区对象，拥有临界区的线程可以访

问被保护起来的资源或代码段，其他希望进入临界区的线程将被挂起等待，直到拥有临界区的线程放弃临界区时为止，这样就保证了不会在同

一时刻出现多个线程访问共享资源。
CCriticalSection类的用法非常简单，步骤如下：
　
定义CCriticalSection类的一个全局对象（以使各个线程均能访问），如CCriticalSection critical_section；
在访问需要保护的资源或代码之前，调用CCriticalSection类的成员Lock（）获得临界区对象： critical_section.Lock();
在线程中调用该函数来使线程获得它所请求的临界区。如果此时没有其它线程占有临界区对象，则调用Lock()的线程获得临界区；否则，线程

将被挂起，并放入到一个系统队列中等待，直到当前拥有临界区的线程释放了临界区时为止。

访问临界区完毕后，使用CCriticalSection的成员函数Unlock()来释放临界区：critical_section.Unlock();
再通俗一点讲，就是线程A执行到critical_section.Lock();语句时，如果其它线程(B)正在执行critical_section.Lock();语句后且

critical_section.
Unlock();语句前的语句时，线程A就会等待，直到线程B执行完critical_section. Unlock();语句，线程A才会继续执行。
下面再通过一个实例进行演示说明。

例程8 MultiThread8
建立一个基于对话框的工程MultiThread8，在对话框IDD_MULTITHREAD8_DIALOG中加入两个按钮和两个编辑框控件，两个按钮的ID分别为

IDC_WRITEW和IDC_WRITED，标题分别为“写‘W’”和“写‘D’”；两个编辑框的ID分别为IDC_W和IDC_D，属性都选中Read-only；

在MultiThread8Dlg.h文件中声明两个线程函数： UINT WriteW(LPVOID pParam);
UINT WriteD(LPVOID pParam);
使用ClassWizard分别给IDC_W和IDC_D添加CEdit类变量m_ctrlW和m_ctrlD；
在MultiThread8Dlg.cpp文件中添加如下内容：
为了文件中能够正确使用同步类，在文件开头添加：#include "afxmt.h"
定义临界区和一个字符数组，为了能够在不同线程间使用，定义为全局变量：CCriticalSection critical_section;
char g_Array[10];
添加线程函数：UINT WriteW(LPVOID pParam)
{
CEdit *pEdit=(CEdit*)pParam;
pEdit->SetWindowText("");
critical_section.Lock();
//锁定临界区，其它线程遇到critical_section.Lock();语句时要等待
//直至执行critical_section.Unlock();语句
for(int i=0;i<10;i++)
{
g_Array[i]=''W'';
     pEdit->SetWindowText(g_Array);
Sleep(1000);
}
critical_section.Unlock();
return 0;
}
UINT WriteD(LPVOID pParam)
{
CEdit *pEdit=(CEdit*)pParam;
pEdit->SetWindowText("");
critical_section.Lock();
//锁定临界区，其它线程遇到critical_section.Lock();语句时要等待
//直至执行critical_section.Unlock();语句
for(int i=0;i<10;i++)
{
g_Array[i]=''D'';
     pEdit->SetWindowText(g_Array);
Sleep(1000);
}
critical_section.Unlock();
return 0;
}
分别双击按钮IDC_WRITEW和IDC_WRITED，添加其响应函数： void CMultiThread8Dlg::OnWritew()
{
CWinThread *pWriteW=AfxBeginThread(WriteW,
&m_ctrlW,
THREAD_PRIORITY_NORMAL,
0,
CREATE_SUSPENDED);
pWriteW->ResumeThread();
}
void CMultiThread8Dlg::OnWrited()
{
CWinThread *pWriteD=AfxBeginThread(WriteD,
&m_ctrlD,
THREAD_PRIORITY_NORMAL,
0,
CREATE_SUSPENDED);
pWriteD->ResumeThread();

}
由于代码较简单，不再详述。编译、运行该例程，您可以连续点击两个按钮，观察体会临界类的作用。
B、使用 CEvent 类
　　CEvent
类提供了对事件的支持。事件是一个允许一个线程在某种情况发生时，唤醒另外一个线程的同步对象。例如在某些网络应用程序中，一个线程

（记为A）负责监听通讯端口，另外一个线程（记为B）负责更新用户数据。通过使用CEvent
类，线程A可以通知线程B何时更新用户数据。每一个CEvent 对象可以有两种状态：有信号状态和无信号状态。线程监视位于其中的CEvent
类对象的状态，并在相应的时候采取相应的操作。
　　在MFC中，CEvent 类对象有两种类型：人工事件和自动事件。一个自动CEvent
对象在被至少一个线程释放后会自动返回到无信号状态；而人工事件对象获得信号后，释放可利用线程，但直到调用成员函数ReSetEvent()才

将其设置为无信号状态。在创建CEvent
类的对象时，默认创建的是自动事件。 CEvent 类的各成员函数的原型和参数说明如下：
1、CEvent(BOOL bInitiallyOwn=FALSE,
          BOOL bManualReset=FALSE,
          LPCTSTR lpszName=NULL,
          LPSECURITY_ATTRIBUTES lpsaAttribute=NULL);

bInitiallyOwn:指定事件对象初始化状态，TRUE为有信号，FALSE为无信号；
bManualReset：指定要创建的事件是属于人工事件还是自动事件。TRUE为人工事件，FALSE为自动事件；
后两个参数一般设为NULL，在此不作过多说明。
2、BOOL CEvent：：SetEvent();
　　将 CEvent 类对象的状态设置为有信号状态。如果事件是人工事件，则 CEvent 类对象保持为有信号状态，直到调用成员函数ResetEvent

()将
其重新设为无信号状态时为止。如果CEvent 类对象为自动事件，则在SetEvent()将事件设置为有信号状态后，CEvent
类对象由系统自动重置为无信号状态。
如果该函数执行成功，则返回非零值，否则返回零。 3、BOOL CEvent：：ResetEvent();
　　该函数将事件的状态设置为无信号状态，并保持该状态直至SetEvent()被调用时为止。由于自动事件是由系统自动重置，故自动事件不需

要调用该函数。如果该函数执行成功，返回非零值，否则返回零。我们一般通过调用WaitForSingleObject函数来监视事件状态。前面我们已经

介绍了该函数。由于语言描述的原因，CEvent
类的理解确实有些难度，但您只要通过仔细回味下面例程，多看几遍就可理解。
例程9 MultiThread9
建立一个基于对话框的工程MultiThread9，在对话框IDD_MULTITHREAD9_DIALOG中加入一个按钮和两个编辑框控件，按钮的ID为IDC_WRITEW，标

题为“写‘W’”；两个编辑框的ID分别为IDC_W和IDC_D，属性都选中Read-only;

在MultiThread9Dlg.h文件中声明两个线程函数： UINT WriteW(LPVOID pParam);
UINT WriteD(LPVOID pParam);
使用ClassWizard分别给IDC_W和IDC_D添加CEdit类变量m_ctrlW和m_ctrlD；
在MultiThread9Dlg.cpp文件中添加如下内容：
为了文件中能够正确使用同步类，在文件开头添加
#include "afxmt.h"
定义事件对象和一个字符数组，为了能够在不同线程间使用，定义为全局变量。 CEvent eventWriteD;
char g_Array[10];
添加线程函数： UINT WriteW(LPVOID pParam)
{
CEdit *pEdit=(CEdit*)pParam;
pEdit->SetWindowText("");
for(int i=0;i<10;i++)
{
g_Array[i]=''W'';
     pEdit->SetWindowText(g_Array);
Sleep(1000);
}
eventWriteD.SetEvent();
return 0;
}
UINT WriteD(LPVOID pParam)
{
CEdit *pEdit=(CEdit*)pParam;
pEdit->SetWindowText("");
WaitForSingleObject(eventWriteD.m_hObject,INFINITE);
for(int i=0;i<10;i++)
{
g_Array[i]=''D'';
     pEdit->SetWindowText(g_Array);
Sleep(1000);
}
return 0;
}
　　仔细分析这两个线程函数, 您就会正确理解CEvent 类。线程WriteD执行到
WaitForSingleObject(eventWriteD.m_hObject,INFINITE);处等待，直到事件eventWriteD为有信号该线程才往下执行，因为eventWriteD对象

是自动事件，则当WaitForSingleObject()返回时，系统自动把eventWriteD对象重置为无信号状态。

双击按钮IDC_WRITEW，添加其响应函数： void CMultiThread9Dlg::OnWritew()
{
CWinThread *pWriteW=AfxBeginThread(WriteW,
&m_ctrlW,
THREAD_PRIORITY_NORMAL,
0,
CREATE_SUSPENDED);
pWriteW->ResumeThread();
CWinThread *pWriteD=AfxBeginThread(WriteD,
&m_ctrlD,
THREAD_PRIORITY_NORMAL,
0,
CREATE_SUSPENDED);
pWriteD->ResumeThread();

}
编译并运行程序，单击“写‘W’”按钮，体会事件对象的作用。
C、使用CMutex 类
　　互斥对象与临界区对象很像.互斥对象与临界区对象的不同在于:互斥对象可以在进程间使用,而临界区对象只能在同一进程的各线程间使用

。当然，互斥对象也可以用于同一进程的各个线程间，但是在这种情况下，使用临界区会更节省系统资源，更有效率。
D、使用CSemaphore 类
　　当需要一个计数器来限制可以使用某个线程的数目时，可以使用“信号量”对象。CSemaphore
类的对象保存了对当前访问某一指定资源的线程的计数值，该计数值是当前还可以使用该资源的线程的数目。如果这个计数达到了零，则所有

对这个CSemaphore
类对象所控制的资源的访问尝试都被放入到一个队列中等待，直到超时或计数值不为零时为止。一个线程被释放已访问了被保护的资源时，计

数值减1；一个线程完成了对被控共享资源的访问时，计数值增1。这个被CSemaphore
类对象所控制的资源可以同时接受访问的最大线程数在该对象的构建函数中指定。
CSemaphore 类的构造函数原型及参数说明如下：
CSemaphore (LONG lInitialCount=1,
            LONG lMaxCount=1,
            LPCTSTR pstrName=NULL,
            LPSECURITY_ATTRIBUTES lpsaAttributes=NULL);
lInitialCount:信号量对象的初始计数值，即可访问线程数目的初始值；
lMaxCount：信号量对象计数值的最大值，该参数决定了同一时刻可访问由信号量保护的资源的线程最大数目；
后两个参数在同一进程中使用一般为NULL，不作过多讨论；
　　在用CSemaphore
类的构造函数创建信号量对象时要同时指出允许的最大资源计数和当前可用资源计数。一般是将当前可用资源计数设置为最大资源计数，每增

加一个线程对共享资源的访问，当前可用资源计数就会减1，只要当前可用资源计数是大于0的，就可以发出信号量信号。但是当前可用计数减

小到0时，则说明当前占用资源的线程数已经达到了所允许的最大数目，不能再允许其它线程的进入，此时的信号量信号将无法发出。线程在处

理完共享资源后，应在离开的同时通过ReleaseSemaphore()函数将当前可用资源数加1。
下面给出一个简单实例来说明 CSemaphore 类的用法。
例程10 MultiThread10
建立一个基于对话框的工程MultiThread10，在对话框IDD_MULTITHREAD10_DIALOG中加入一个按钮和三个编辑框控件，按钮的ID为IDC_START，

标题为“同时写‘A’、‘B’、‘C’”；三个编辑框的ID分别为IDC_A、IDC_B和IDC_C，属性都选中Read-only；

在MultiThread10Dlg.h文件中声明两个线程函数： UINT WriteA(LPVOID pParam);
UINT WriteB(LPVOID pParam);
UINT WriteC(LPVOID pParam);
使用ClassWizard分别给IDC_A、IDC_B和IDC_C添加CEdit类变量m_ctrlA、m_ctrlB和m_ctrlC；
在MultiThread10Dlg.cpp文件中添加如下内容：
为了文件中能够正确使用同步类，在文件开头添加：
#include "afxmt.h"
定义信号量对象和一个字符数组，为了能够在不同线程间使用，定义为全局变量：CSemaphore semaphoreWrite(2,2);
//资源最多访问线程2个，当前可访问线程数2个
char g_Array[10];
添加三个线程函数：
UINT WriteA(LPVOID pParam)
{
CEdit *pEdit=(CEdit*)pParam;
pEdit->SetWindowText("");
WaitForSingleObject(semaphoreWrite.m_hObject,INFINITE);
CString str;
for(int i=0;i<10;i++)
{
        pEdit->GetWindowText(str);
g_Array[i]=''A'';
str=str+g_Array[i];
     pEdit->SetWindowText(str);
Sleep(1000);
}
ReleaseSemaphore(semaphoreWrite.m_hObject,1,NULL);
return 0;
}
UINT WriteB(LPVOID pParam)
{
CEdit *pEdit=(CEdit*)pParam;
pEdit->SetWindowText("");
WaitForSingleObject(semaphoreWrite.m_hObject,INFINITE);
CString str;
for(int i=0;i<10;i++)
{
        pEdit->GetWindowText(str);
g_Array[i]=''B'';
str=str+g_Array[i];
     pEdit->SetWindowText(str);
Sleep(1000);
}
ReleaseSemaphore(semaphoreWrite.m_hObject,1,NULL);
return 0;
}
UINT WriteC(LPVOID pParam)
{
CEdit *pEdit=(CEdit*)pParam;
pEdit->SetWindowText("");
WaitForSingleObject(semaphoreWrite.m_hObject,INFINITE);
for(int i=0;i<10;i++)
{
g_Array[i]=''C'';
     pEdit->SetWindowText(g_Array);
Sleep(1000);
}
ReleaseSemaphore(semaphoreWrite.m_hObject,1,NULL);
return 0;
}
这三个线程函数不再多说。在信号量对象有信号的状态下，线程执行到WaitForSingleObject语句处继续执行，同时可用线程数减1；若线程执

行到WaitForSingleObject语句时信号量对象无信号，线程就在这里等待，直到信号量对象有信号线程才往下执行。

双击按钮IDC_START，添加其响应函数： void CMultiThread10Dlg::OnStart()
{
CWinThread *pWriteA=AfxBeginThread(WriteA,
&m_ctrlA,
THREAD_PRIORITY_NORMAL,
0,
CREATE_SUSPENDED);
pWriteA->ResumeThread();
CWinThread *pWriteB=AfxBeginThread(WriteB,
&m_ctrlB,
THREAD_PRIORITY_NORMAL,
0,
CREATE_SUSPENDED);
pWriteB->ResumeThread();
CWinThread *pWriteC=AfxBeginThread(WriteC,
&m_ctrlC,
THREAD_PRIORITY_NORMAL,
0,
CREATE_SUSPENDED);
pWriteC->ResumeThread();

}
好吧，多线程编程就介绍到这里，希望本文能对您有所帮助。

分类: C/C++
绿色通道： 好文要顶 关注我 收藏该文与我联系 
非常笑
关注 - 3
粉丝 - 23
+加关注
8 0
(请您对文章做出评价)
« 上一篇：BOOST库中polymorphic_cast与polymorphic_downcast
» 下一篇：分享一个不错的讲解背包问题的网址
posted on 2010-09-23 21:43 非常笑 阅读(40720) 评论(3) 编辑 收藏


评论

#1楼 2013-02-25 00:09 haihai187  
很不错，谢谢！呵呵
支持(0)反对(0)
  
#2楼 2013-03-09 15:35 yulinxx  
::SetDlgItemText(AfxGetMainWnd()->m_hWnd,IDC_TIME,strTime);

程序会崩溃 VS2010
支持(0)反对(0)
  
#3楼 2013-03-22 17:39 天之骄子'  
写的很详细。
支持(0)反对(0)
  
刷新评论刷新页面返回顶部
注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。
找优秀程序员，就在博客园
博客园首页博问新闻闪存程序员招聘知识库

最新IT新闻:
· Yelp CFO表示有意与Facebook图谱搜索展开合作
· Twitter利用位置标签绘制纽约等城市地图
· 很震撼：将全世界iPhone的屏幕组合之后
· 美司法部欲强迫谷歌向FBI交出用户个人数据
· 三星Galaxy S4年内销量可能突破8000万
» 更多新闻...
最新知识库文章:
· 谈谈.NET中常见的内存泄露问题——GC、委托事件和弱引用
· BPM流程管理软件的五大创新
· IT固化是流程管理成功的重要手段
· 持续交付模式
· 关于软件开发的一些常识和思考
» 更多知识库文章...

Powered by: 
博客园 
Copyright © 非常笑

<	2010年9月	>
日	一	二	三	四	五	六
29	30	31	1	2	3	4
5	6	7	8	9	10	11
12	13	14	15	16	17	18
19	20	21	22	23	24	25
26	27	28	29	30	1	2
3	4	5	6	7	8	9
导航
博客园
首页
新随笔
联系
订阅
管理
统计
随笔 - 75
文章 - 0
评论 - 30
引用 - 0
公告
昵称：非常笑
园龄：4年1个月
粉丝：23
关注：3
+加关注
搜索
 
 
常用链接
我的随笔
我的评论
我的参与
最新评论
我的标签
我的标签
c++(1)
MFC(1)
word(1)
文档(1)
随笔分类
C#(6)
C/C++(26)
MFC(4)
Python(1)
ROR(3)
ZOJ/ACM(1)
财经(5)
读书摘记(14)
面试、笔试(2)
图形图像OpenGL
随笔档案
2012年7月 (2)
2011年8月 (1)
2011年2月 (2)
2011年1月 (1)
2010年12月 (1)
2010年10月 (6)
2010年9月 (2)
2010年8月 (3)
2010年6月 (1)
2010年5月 (2)
2010年4月 (4)
2010年3月 (8)
2010年2月 (2)
2009年12月 (17)
2009年11月 (2)
2009年10月 (1)
2009年9月 (7)
2009年8月 (5)
2009年7月 (1)
2009年6月 (1)
2009年5月 (1)
2009年4月 (5)
最新评论
1. Re:（转）VC++多线程编程
写的很详细。
--天之骄子'
2. Re:（转）VC++多线程编程
::SetDlgItemText(AfxGetMainWnd()->m_hWnd,IDC_TIME,strTime);

程序会崩溃  VS2010
--yulinxx
3. Re:（转）VC++多线程编程
很不错，谢谢！呵呵
--haihai187
4. Re:基于Visual C++的DLL编程实现
我的环境是VS2010，
_T不行，得用L

还有，隐式链接不行，提示丢失DLL；坑！！
--JUSTQYX
阅读排行榜
1. （转）VC++多线程编程(40720)
2. CTabCtrl的使用(6782)
3. 在VS2005中安装BOOST库(2405)
4. C++经典面试题（验证你的C++水准）(1980)
5. MFC菜单快捷键的应用(1585)
评论排行榜
1. MFC多线程编程实现播放背景音乐遇到的问题(8)
2. 咨询实习GIS开发的事(5)
3. 请教一：OpenGL旋转(4)
4. （转）VC++多线程编程(3)
5. CString与char*转换问题（希望有人能解答下）(3)
推荐排行榜
1. （转）VC++多线程编程(8)
2. 转：.h头文件 .lib库文件 .dll动态链接库文件关系(3)
3. 指针地址的修改(2)
4. （转）海量数据面试题整理(1)
5. ActionController::InvalidAuthenticityToken 解决办法(1)
