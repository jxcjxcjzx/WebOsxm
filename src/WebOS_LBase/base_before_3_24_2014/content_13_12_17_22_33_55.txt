


首页
 About me
 留言
 友情链接
 算法专题
 WIKI文档
 Weibo
QQ
Twitter
Email
.
.



Tanky Woo

Simple is Beautiful!





背包之01背包、完全背包、多重背包详解 — TankyWoo



背包之01背包、完全背包、多重背包详解  

                                                                                               — Tanky Woo(2010.07.31)
 


首先说下动态规划，动态规划这东西就和递归一样，只能找局部关系，若想全部列出来，是很难的，比如汉诺塔。你可以说先把除最后一层的其他所有层都移动到2，再把最后一层移动到3，最后再把其余的从2移动到3，这是一个直观的关系，但是想列举出来是很难的，也许当层数n=3时还可以模拟下，再大一些就不可能了，所以，诸如递归，动态规划之类的，不能细想，只能找局部关系。  



图1.汉诺塔图片  



（引至杭电课件:DP最关键的就是状态，在DP时用到的数组时，也就是存储的每个状态的最优值，也就是记忆化搜索）  

要了解背包，首先得清楚动态规划：  

动态规划算法可分解成从先到后的4个步骤： 


1. 描述一个最优解的结构；  

2. 递归地定义最优解的值；  

3. 以“自底向上”的方式计算最优解的值； 

4. 从已计算的信息中构建出最优解的路径。  

其中步骤1~3是动态规划求解问题的基础。如果题目只要求最优解的值，则步骤4可以省略。 

 
 
背包的基本模型就是给你一个容量为V的背包  在一定的限制条件下放进最多(最少?)价值的东西  


当前状态→ 以前状态  

 
 
看了dd大牛的《背包九讲》，迷糊中带着一丝清醒，这里我也总结下01背包，完全背包，多重背包这三者的使用和区别，部分会引用dd大牛的《背包九讲》，如果有错，欢迎指出。  (www.wutianqi.com留言即可)  

 
 
首先我们把三种情况放在一起来看：  


01背包（ZeroOnePack）: 有N件物品和一个容量为V的背包， 每种物品均只有一件。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使价值总和最大。  

完全背包(CompletePack): 有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。  

多重背包(MultiplePack): 有N种物品和一个容量为V的背包，第i种物品最多有n[i]件可用。每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。  

比较三个题目，会发现不同点在于每种背包的数量，01背包是每种只有一件，完全背包是每种无限件，而多重背包是每种有限件。  

--------------------------------------------------------------------------------

 
 
先来分析01背包：  

01背包（ZeroOnePack）: 有N件物品和一个容量为V的背包，每种物品均只有一件。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使价值总和最大。  

这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。  

用子问题定义状态：即f[i][v]表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程便是：  


f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}
 
把这个过程理解下：
 
在前i件物品放进容量v的背包时，它有两种情况
 

情况一: 第i件不放进去，这时所得价值为:f[i-1][v]
 
情况二: 第i件放进去，这时所得价值为：f[i-1][v-c[i]]+w[i]  

（第二种是什么意思？就是如果第i件放进去，那么在容量v-c[i]里就要放进前i-1件物品）  

最后比较第一种与第二种所得价值的大小，哪种相对大，f[i][v]的值就是哪种。  （这里是重点，理解！）  

 
 
这里是用二维数组存储的，可以把空间优化，用一维数组存储。  

用f[0..v]表示，f[v]表示把前i件物品放入容量为v的背包里得到的价值。把i从1~n(n件)循环后，最后f[v]表示所求最大值。
 

这里f[v]就相当于二维数组的f[i][v]。那么，如何得到f[i-1][v]和f[i-1][v-c[i]]+w[i]？（重点！思考） 

首先要知道，我们是通过i从1到n的循环来依次表示前i件物品存入的状态。
 
即：for i=1..N 

现在思考如何能在是f[v]表示当前状态是容量为v的背包所得价值，而又使f[v]和f[v-c[i]]+w[i]标签前一状态的价值？  

逆序
 
这就是关键！ 




1
2
3
 
for i=1..N
   for v=V..0
        f[v]=max{f[v],f[v-c[i]]+w[i]}; 

分析上面的代码：当内循环是逆序时，就可以保证后一个f[v]和f[v-c[i]]+w[i]是前一状态的！这里给大家一组测试数据：  测试数据： 10,3 3,4 4,5 5,6  



图2: 01背包图(1)
 
 
 
这个图表画得很好，借此来分析：  

C[v]从物品i=1开始，循环到物品3，期间，每次逆序得到容量v在前i件物品时可以得到的最大值。
 
（请在草稿纸上自己画一画）
 
  

这里以一道题目来具体看看：  

题目：http://acm.hdu.edu.cn/showproblem.php?pid=2602  

代码：http://www.wutianqi.com/?p=533  

分析：
 


图2: 01背包图(2)
 
 
 
具体根据上面的解释以及我给出的代码分析。这题很基础，看懂上面的知识应该就会做了。  

--------------------------------------------------------------------------------

 
 
完全背包：  

完全背包(CompletePack): 有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。  完全背包按其思路仍然可以用一个二维数组来写出：
 

f[i][v]=max{f[i-1][v-k*c[i]]+k*w[i]|0<=k*c[i]<=v}
 
 
 
同样可以转换成一维数组来表示:
 
伪代码如下: 




1
2
3
 
for i=1..N
    for v=0..V
        f[v]=max{f[v],f[v-c[i]]+w[i]} 

顺序
 
 
 
想必大家看出了和01背包的区别，这里的内循环是顺序的，而01背包是逆序的。
 
现在关键的是考虑：为何完全背包可以这么写？ 


在次我们先来回忆下，01背包逆序的原因？是为了是max中的两项是前一状态值，这就对了。 那么这里，我们顺序写，这里的max中的两项当然就是当前状态的值了，为何？ 因为每种背包都是无限的。当我们把i从1到N循环时，f[v]表示容量为v在前i种背包时所得的价值，这里我们要添加的不是前一个背包，而是当前背包。所以我们要考虑的当然是当前状态。 

 
 
这里同样给大家一道题目：  

题目：http://acm.hdu.edu.cn/showproblem.php?pid=1114  

代码：http://www.wutianqi.com/?p=535  

--------------------------------------------------------------------------------

 
 
多重背包  

多重背包(MultiplePack): 有N种物品和一个容量为V的背包。第i种物品最多有n[i]件可用，每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。  

 
 
这题目和完全背包问题很类似。基本的方程只需将完全背包问题的方程略微一改即可，因为对于第i种物品有n[i]+1种策略：取0件，取1件……取n[i]件。令f[i][v]表示前i种物品恰放入一个容量为v的背包的最大权值，则有状态转移方程：  


f[i][v]=max{f[i-1][v-k*c[i]]+k*w[i]|0<=k<=n[i]}
 
这里同样转换为01背包：  

普通的转换对于数量较多时，则可能会超时，可以转换成二进制（暂时不了解，所以先不讲）  对于普通的。就是多了一个中间的循环，把j=0~bag[i]，表示把第i中背包从取0件枚举到取bag[i]件。  

 
 
给出一个例题：  

题目：http://acm.hdu.edu.cn/showproblem.php?pid=2191  

代码：http://www.wutianqi.com/?p=537  

 
 
--------------------------------------------------------------------------------

因为限于个人的能力，我只能讲出个大概，请大家具体还是好好看看dd大牛的《背包九讲》。  

如果大家有问题或者资料里的内容有错误，可以留言给出，博客:http://www.wutianqi.com/
 
 
 
老版下载地址：
 
Word: http://download.csdn.net/source/2587577
 
 
 
最后更新：2012.02.22
 
这次更新变动较大，显示结构更为工整清晰，如果大家转载过我以前的版本，可以重新换成这个版本。

Tanky Woo @2010-07-31
61 Comments

Category: 我的原创

Tags: DP, 背包, 详解


« HDOJ 2191 悼念512汶川大地震遇难同胞——珍惜现在，感恩生活

HDU 动态规划（46道题目）倾情奉献~ 【只提供思路与状态转移方程】 »
.


61 Responses to “背包之01背包、完全背包、多重背包详解 — TankyWoo”



YiKou 说道：

 2012年07月26日 2:18 下午

01背包中:用f[0..v]表示，f[v]表示把前i件物品放入容量为v的背包里得到的价值。把i从1~n(n件)循环后，最后f[v]表示所求最大值。
 这句话中,把钱i件物品放入……..的理解为,考虑了前i件物品.是吧~

回复


YiKou 说道：

2012年07月26日 2:54 下午

且,01背包中,for v=V..0 是否应该把0改为v[i]?

回复

 


Null 小站 » 算法资料 小结 说道：

2012年03月27日 11:07 上午

[...] 背包详解 [...]

回复



私の日常 说道：

2012年03月27日 9:51 上午

人才，国家就要靠你了。

回复



须末真 说道：

2012年03月24日 12:49 下午

ding

回复


须末真 说道：

2012年03月24日 12:50 下午

想问个问题…01背包中f[i-1][v-c[i]]+w[i] 我们老师的课件是f[i][v-c[i]]+w[i]…想不明白…
 是谁错了…还是两个都可以?

回复


万无空间 说道：

2012年07月15日 4:02 下午

从概念上讲应该是f[i-1][v-c[i]]+w[i]。因为状态转移方程为f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}，在求f[i][v]的时候，比较的是上一个状态的背包，所以应该是f[i-1]而不是f[i]。这也是为什么要逆序的原因。

回复

 



老谢 说道：

2012年02月27日 7:29 下午

完全看不懂的默默路过。。

回复



Firm 说道：

2012年02月26日 9:41 下午

好多公式、概念都遗忘了，看得很茫然。

回复



小呆 说道：

2012年02月26日 6:21 下午

完全不懂算法，从基础慢慢学，只能。。。。

回复



whui 说道：

2011年12月15日 3:14 下午

博主，文中“完全背包按其思路仍然可以用一个二维数组来写出：
 f[i][v]=max{f[i-1][v-k*c[i]]+k*w[i]|0<=k*c[i]<=v}”
 这里粗心写错了吧，应该是f[i][v]=max{f[i-1][v],f[i-1][v-k*c[i]]+k*w[i]|0<=k*c[i]<=v}吧？

回复


Tanky Woo 说道：

2012年02月22日 8:59 上午

你好，这里没有错。
 
k==0这个情况就是f[i-1][v]

回复

 


jiang 说道：

2011年11月16日 8:34 下午

完全背包该怎么记录下选择的背包呢

回复



effie 说道：

2011年11月5日 3:33 下午

这学期在学算法，一直听不懂（在一个偏文的学校学计算机的女生伤不起……）。觉得你写的那些算法很详细，比听老师讲还要明白啊~~以后要常来逛逛~~thx

回复


Tanky Woo 说道：

2011年11月5日 8:40 下午

呵呵，你那不错啊，起码还有算法课，不过我不是计科的，不知道我们学校有没有

回复

 


淘宝刷钻 说道：

2011年10月22日 2:30 下午

C++伤不起啊

回复



haha 说道：

2011年09月19日 1:17 下午

thank you !

回复



小杨 说道：

2011年09月1日 5:11 下午

多重背包那：f[i][v]=max{f[i-1][v-k*c[i]]+k*w[i]|0<=k<=n[i]}
 是不是写漏了？！
 f[i][v]=max{f[i][v], f[i-1][v-k*c[i]]+k*w[i]|0<=k<=n[i]}

回复


a 说道：

2011年09月6日 12:31 上午

哎，看清楚点。。

回复



Tanky Woo 说道：

2012年02月22日 9:00 上午

你好，这里没有错。
 k==0这个情况就是f[i-1][v]

回复

 


李叶辰 说道：

2011年08月12日 11:38 上午

总结的很深刻！

回复


Tanky Woo 说道：

2011年08月12日 6:37 下午

呵呵，能帮助到大家就行。

回复

 


zcube 说道：

2011年08月1日 10:11 上午

化工的仔仔哇，有才

回复


Tanky Woo 说道：

2011年08月12日 6:44 下午

。。。你怎么知道我是化工学校的？不过我不是学化工的。

回复


C瓜哥 说道：

2012年03月1日 7:28 下午

是我告诉他的，嘿嘿

回复

 



« 先前评论


.


发表评论




Name (required)

Mail (will not be published) (required)

Website

 

XHTML: You can use these tags: <a href="" title=""> <abbr title=""> <acronym title=""> <b> <blockquote cite=""> <cite> <code> <del datetime=""> <em> <i> <q cite=""> <strike> <strong> <pre lang="" line="" escaped="" highlight=""> 





Have no portrait? Click here to Register a Gravatar .



有人回复时邮件通知我


RSS

欢迎订阅博客： ■直接订阅博客
 ■通过FeedSky订阅博客
 

Search



 

Category
■ACM/ICPC (293) ACM Templates (4) 
TopCoder (4) 

■Algorithms (68) 算法导论 (28) 

■Assembly (2) 
■Book|Music|Moive| (8) 
■C/C++ (44) C++标准程序库 (12) 

■Java (4) 
■Linux (25) 
■Python (15) 
■QT (13) 
■Thought|Life|Philosophy (19) 
■前端 (5) 
■我的原创 (26) 
■暂存 (29) 
■生活杂事 (74) 
■网站 (25) 


My Blog:
■登录
■文章 RSS
■评论 RSS
■WordPress.org
 

Tags
 
ACM/ICPC BFS dfs dijkstra disjoint-set DP easy GCD HDOJ解题报告 linux MST oj python qt STL tanky woo TopCoder WordPress使用总结 入门 加油 博弈 原创 好题 字符串 并查集 打表 搞笑 数学 数学题 最小生成树 模拟 模拟题 母函数 水题 百练 筛选法 算法 算法导论 素数 经典 论坛 贪心 递归 递推 麻烦
 

Archives
 选择月份 2013 年七月  (1) 2013 年六月  (5) 2013 年五月  (1) 2013 年四月  (8) 2013 年三月  (5) 2013 年二月  (3) 2013 年一月  (3) 2012 年十二月  (7) 2012 年十一月  (2) 2012 年十月  (1) 2012 年九月  (1) 2012 年八月  (1) 2012 年七月  (3) 2012 年六月  (1) 2012 年五月  (6) 2012 年四月  (8) 2012 年三月  (2) 2012 年二月  (10) 2012 年一月  (15) 2011 年十二月  (13) 2011 年十一月  (11) 2011 年十月  (9) 2011 年九月  (7) 2011 年八月  (3) 2011 年七月  (4) 2011 年六月  (27) 2011 年五月  (18) 2011 年四月  (32) 2011 年三月  (8) 2011 年二月  (16) 2011 年一月  (50) 2010 年十二月  (18) 2010 年十一月  (16) 2010 年十月  (3) 2010 年九月  (38) 2010 年八月  (111) 2010 年七月  (94) 2010 年六月  (18) 2010 年五月  (35)
 




--------------------------------------------------------------------------------


.

.

 Copyright © 2010-2013 Tanky Woo . Powered by WordPress . NoSky Theme by TankyWoo. 


