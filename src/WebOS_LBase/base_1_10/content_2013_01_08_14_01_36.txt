

您还未登录！|登录|注册|帮助

    首页
    业界
    移动
    云计算
    研发
    论坛
    博客
    下载
    更多

    业界
    移动开发
    云计算
    软件研发
    专题
    程序员杂志

    编程语言
    开放平台
    HTML5
    前端开发
    智能算法
    架构
    开源
    数据库

订阅软件研发RSS	CSDN首页> 软件研发	
《Warcraft是怎样炼成的》：多人对战、战争迷雾以及AI
发表于2012-12-03 10:12| 6613次阅读| 来源CSDN| 41 条评论| 作者王然
Warcraft游戏开发回忆录PatrickWyattBlizzard
摘要：在之前的关于Warcraft开发的文章中，Warcraft之父Partrick Wyatt开启了一个“为什么Blizzard Entertainment成为了世界上最有名、最受欢迎的游戏公司之一”的话题，并从Warcraft和StarCraft开发回忆当初在Blizzard奋斗的过程，一步一步为我们描绘出Blizzard从普通的工作室开始的“征途”。

如果你没有看过之前的文章，可以点击这里：

    魔兽之父：《Warcraft是怎样炼成的（一）》
    《Warcraft是怎样炼成的（二）》：我们是一个团队
    《Warcraft是怎样炼成的（三）》：从Demo到游戏

支持多人游戏

1994年6月，也就是在10个月的开发之后，游戏引擎已经基本上支持多人对战了。随着代码集成的进行，我感到越来越兴奋，因为马上就可以使用Warcraft进行多人对战了！虽然我一直忙于游戏核心逻辑的设计、实现（事件循环、单位调度器、路径寻找、战术AI单位、状态栏、游戏内UI、高级网络代码等等），其他程序员已经开始着手多人对战相关功能的开发了。

Jesse McReynolds ，Caltech（加里福利亚理工大学）的毕业生，完成一个低级网络库的开发，可以在局域网络内发送IPX包。这些代码的实现得感谢id software John Carmack（3D游戏之父——约翰·卡马克）刚刚开源的Doom源代码，虽然IPX中间层只有几百行C代码，但它能很完美地跟网卡驱动结合，保证一个游戏客户端发出的信息能够传送到另一个玩家那里。

Bob Fitch，Cal State Fullerton（加州富乐敦州立大学）的硕士，开发了“glue screens”的原始版本，自此玩家已经可以创建或者加入多人游戏。Bob的办公室紧贴着我的，因此我们可以密切地合作，把他开发的“创建/加入游戏”功能融合进我设计的游戏事件循环中也因此变得非常方便。

在合并了这些更改之后，我把游戏客户端重新编译了一遍，并复制到网络共享盘中，Bob也紧接着回到办公室加入游戏。奇迹发生了，没有任何问题！就这样，Warcraft开始支持多人游戏。

在游戏过程中，我感受到前所未有的兴奋，在之前玩过的所有游戏中都没有这样的感觉。如此激动的原因一部分是因为我自己参与了部分代码编写；另两个更重要的原因在于：我是和人类做对手，而不再是计算机AI（Artificial Intelligence，人工智能）；更特别的地方在于，因为“战争迷雾”的存在，我并不知道他在做什么。这甚至给我带来了心理上的恐惧感。
战争迷雾

一个小村庄被战争迷雾所包围着，那里究竟发生了什么？！？

早期的游戏里，视野外的敌人是隐藏的，这正是“战争迷雾”设计的原型。除非有友方单位探测过，否则地图将会被黑色的图形层覆盖，以此来模拟真实战斗中无法获知敌人的调度和行动。

Empire，Walter Bright（“D语言”之父）大约17年前所开发的游戏，也出于同样的目的使用了战争迷雾。如果地图上的某一块并没有被探索过，那么它将处于烟雾笼罩之下，所以游戏初期的一个重要任务就是去探索（未探索过的）地图。

心理上的恐惧源于我无法得知对手正在做什么，正如历史上很多将军死亡那样。RTS游戏中加入了这一元素让游戏精彩（恐怖）程度更上一层。感谢Westwood的Walter以及其他想到了这一创意的人。
计算机AI

正如很多玩家所知，计算机控制的“人工智能（Artificial Intelligence）”（AI）通常在战略上很弱，所以人类玩家经常可以AI玩家的程序漏洞，因此可以轻松获胜。为了保证可玩性，AI玩家的队伍通常会在队伍数量、位置上有优势，又或者是通过其它“不对称规则”来给人类玩家足够的挑战。

大部分Warcraft的任务中，计算机敌人通常一开始就会拥有整个城市以及军队。此外，Warcraft还为AI制定了其它不平等的规则，如同作弊一样。

我们制定的不公平规则之一就是：AI玩家每次采矿后金矿数量减少地更少，所以很少会有矿井被采空的情况发生。人类玩家在采矿时会从矿井移除100个矿石单位到市政大厅，但AI玩家同样采一次100单位的矿石，矿井只会减少8个单位的矿石。

这种不对称规则有两方面的好处：

    防止人类玩家使用“龟缩战术”（不停地堆积防御性建筑，直到变得无懈可击的时候才进行攻击。），因为计算机能够近乎无休止地采矿并且发展军队，于是玩家不得不使用高级战术来战胜计算机AI。
    当玩家战胜了一个计算机玩家的时候，相当于得到了一个可以使用金矿作为奖励，相比于在有限的资源中磨出胜利，这样的游戏节奏变得更快、更有趣。

大多数玩家都意识到了另一个更加违反公平竞争原则的规则：计算机AI在作弊，因为战争迷雾对它们无效；AI知道玩家每时每刻究竟在做什么。在实战中这是个非常大的优势，可惜计算机没有那么聪明，也无法充分利用这一优势。

有趣的是，在StarCraft流行的那段时间里（自发布以来14年多的岁月），一直有一群AI程序员视图制作无作弊AI的挑战。在BWAPI库的帮助下，这些程序员可以编辑代码直接注入到StarCraft的引擎中去，并且和AI一决胜负。虽然BWAPI AI已经很厉害了，但StarCraft高手仍然可以轻松战胜它们。
和真人对战

作为战略游戏资深玩家，我很清楚那个时代计算机AI的局限性。在和众多AI对战的经历中，鲜有败绩，即使在面对Eastern Front（Chris Crawford开发的东部战线）中俄罗斯的疯狂进攻，也从未有面带惧色。

我玩过的这些游戏都非常有趣而且令人兴奋，但从不令人恐惧；这在Warcraft多人对战中就不一样了！

我需要战胜的是一名人类玩家——我所面对的不仅是技巧和战略，还有敌人快速的控制。因为战争迷雾的存在，双方都不知道对手的动作，因此更加令人振奋。我在职业生涯中从未对某款游戏感到如此激动，但是第一次玩Warcraft的时候却不一样，不到迷雾揭开之时都是胜负难知。

我的血液在沸腾，肾上腺素在飙升，只为了更快地伐木、采矿、建造农场和兵营，当然还包括组织战力、探索地形以及——最重要的——在Bob的军队成型前将他击溃！相信Bob也是一样。

我们并没有在游戏开始前对引擎功能进行测试，因为脑海中只有火热的决胜之心，相信Bob也想夸耀自己才是第一场Warcraft多人对战的胜利者吧！除此之外，我们还经常一起在Blizzard玩Doom，在一场激烈的游戏后，Bob怒气冲冲地说不再跟我玩了，因为我总是用火箭炮秒杀他。当然，我知道他一直都在找机会报仇。

在对战中，我们加倍努力地建造单位并派遣到战场上，在找到他的基地并进攻的时候，我甚至感到胜券在握了。Bob的战略杂乱无章，我觉得能够轻易将其击溃，但是稳重起见，我还是开始更疯狂地建造单位，并且在战场上击杀他的部队。

然后……游戏崩溃了：

坏消息——DOS4GW告诉我Warcraft崩溃了

这是程序员间的常识——任何一款程序在第一次运行时成功的概率接近于0，游戏半途崩溃不足为奇。游戏的画面在不停地从屏幕上方向下滚动，伴随着DOS4W“crash screen”的字样，这对Windows之前的游戏开发者来说在熟悉不过了。现在我们能得到更详细的Windows错误提示框，玩家可以反馈游戏崩溃记录，当然也有不少玩家会遇到“蓝屏死机”状态，和老式错误提示非常相似。

在崩溃后，我几乎从椅子上跳了起来，直接冲向Bob的办公室，叫嚷着“That was awesooooommmme!”。立刻就得到了回应“… and I was kicking your ass!”我竟然听到Bob说他差点就彻底摧毁我了。

几分钟后我们才从混乱中缓过神来——我们的游戏bug不仅在于崩溃，而且还有个“同步bug”，也就是说游戏状态不完全同步：两台机器上显示着不同的战斗，虽然初始状态相同，但渐渐地就进入了两个完全不同的世界。

没有网络编程经验的人可能会认为，两个Warcraft客户端可以在游戏过程中来回发送/接收整个游戏状态；但实际上，每台计算机仅仅会发送每个单位的位置和状态。对于只有几个板块位置的慢节奏游戏，如国际象棋或者跳棋，这种想法可能还算合理，但对于Warcraft这样每个动作涉及到超过600个单位的游戏来说，不可能通过网络传输所有的状态。

我们预计会有不少玩家使用2400波特的调制解调器，每秒只能传输几百个字符的信息，没有使用过调制解调器的年轻玩家应该花点时间去学学这方面的技术。记住，我们现在讨论的是Amazon、Google、Netflix出现前的“黑暗世纪”。

因为有之前将Battle Chess从“DOS”移植到Windows上的经验，我非常熟悉多人游戏通过调制解调器通信的方式，调制解调器有限的带宽是不可能完整地传输整个游戏状态的，所以我的解决方案是仅仅发送每个玩家的命令，而每个玩家（的机器）同时执行这些命令。

我相信这个解决方案没有问题，因为计算机非常擅长执行命令。不幸的是，编程的人类却无法准确地告诉计算机应该怎样做，这就是出现bug的主要原因。虽然我们指望两台计算机做完全一样的事情，但因为bug而不一致，这就是问题所在。

之所以会出现游戏不同步的bug，是因为在模拟游戏中，两台计算机面对同一个问题却给出了不同的答案，随之时间的推移，差异越来越大。正如《Back to the Future》这部穿越电影所描述的，穿越者在过去所做的小变化会导致完全不同的未来，Warcraft的差异也是如此。在我的计算机上，我的Elvish archer（精灵弓箭手）发现了对手的Orcish peon（兽族苦工），但对手的计算机却没有注意到我的进攻，继续伐木或者采矿，由于没有错误纠正程序来处理这些分歧，于是两台机器上的差异越来越大，以至于完全不同。

所以我们的第一场战斗只能算是平局——但对于整个开发团队来说，这是一个伟大的胜利——它还给我们带来很多乐趣！团队其他成员也渐渐地加入了进来，随着游戏/测试人员的增加，更多的bug暴露了出来。虽然游戏经常会遇到崩溃，而且还有更多的问题，但我们知道，这将会是一番大事业！

我们所需要的只是去把游戏做好。

可悲的是，很快我们就发现了更糟糕的问题：虽然同步bug很多，但造成这一现象的原因却也不少。如果这些同步bug处于相同的原因出现我们早就会开始根本问题的修复工作了。但事实证明有很多引发同步bug的原因，每一种都会带来不同类型的同步bug，而且每种bug都需要不同的修复方式。
为什么会出现同步bug？

在开发Warcraft I的时候，我设计了一种最小化数据传输的方法——只发送玩家发送的命令，比如“选择单位5”、“移动到位置650,1224”、“攻击单位53”等等。很多程序员都自主设计过这样的系统，这是“不发送整个游戏状态就同步游戏变化”的一个显而易见的解决方案。

说点不相关的：这段时间有几个专利好像就是冲着这个方法去的。久而久之，我开始认为软件不应该是专利，大部分软件专利并没有什么新意，有经验的程序员都能想到并实现，而根据定义，专利应该是不平凡的。闲话就说到这里。

那个时候，我还没有实现验证两台机器间同步的方法，所以任何会导致计算机做出不同选择的bug都会导致游戏走向分叉——也就是说，他们会变成两个松耦合的世界，虽然仍有交流，但差别会随着时间的推移而加剧。

所以很明显我的下一篇文章会是关于如何发现不同步问题的。
打持久战的准备

你们都知道这个故事的结局：Warcraft最终在5个月后发布了，它成为了不朽的传奇。这离不开我们每天长时间的辛苦工作，在解决了很多问题、克服了很多障碍和挑战之后，最终发布了我们所热爱的作品。在未来的几个月里，我将继续带你们探索Warcraft的开发之道。

原文链接：Code of Honer

StarCraft系列：

    StarCraft开发的荆棘之路
    StarCraft开发：如何避免链表引起的游戏崩溃
    StarCraft: Orcs in Space 在欺骗中浴火重生

  

顶
    17

踩
    0

推荐阅读相关主题： d语言 网络 引擎 工作 测试

    相关文章
    最新报道

    Patrick Wyatt：代码没问题 程序却有bug？
    什么是众投？它改变了移动游戏开发的一切
    移动游戏开者必看：海外VC最关心什么？
    2012移动开发教程盘点：最棒的国外游戏开发站
    2012移动开发工具盘点：16大跨平台游戏引擎
    移动周报：为什么说独立开发者才是光明康途？

已有41条评论
还可以再输入500个字

    您还没有登录! 请 登录 或 注册

    最新评论
    最热评论

    jzcldy 5小时前
    经典 最爱
    +1 回复

    stan1989 14小时前
    受益匪浅，继续关注更新……
    +1 回复

    levisnano 2013-01-07 10:53
    经典
    +1 回复

    hsylx1992 2012-12-24 17:49
    完了？...houxune - -
    +1 回复

    bridge3000 2012-12-20 12:50
    赶紧发下一篇文章！
    +1 回复

    hahaino1 2012-12-18 16:57
    完了？？
    +1 回复

    mjhwy 2012-12-17 10:28
    牛仁！
    +1 回复

    LLL-芷晴 2012-12-13 01:05 来自 新浪微博
    回复@_杨茜惠:知道啦知道啦
    +1 回复

    小__兜 2012-12-13 00:24 来自 新浪微博
    好吧，你们这帮好机友厉害[哈哈][哈哈][哈哈]
    +1 回复

    shanshengwen 2012-12-12 14:26
    经典
    +1 回复

    wuogsxt 2012-12-08 12:43
    有创意！
    +1 回复

    okldkk 2012-12-07 16:55
    经典.
    +1 回复

    njnu06040715 2012-12-07 15:04
    “想法”，其实很多人都有过，有内在能力实现和有外界环境允许他实现的却寥寥无几了。
    +1 回复

    kz_mm 2012-12-07 11:45
    经典之作，看着就很过瘾
    +1 回复

    不为怀念 2012-12-07 11:24 来自 新浪微博
    十月江南天气好，可怜冬景似春华。天时人事日相催，冬至阳生春又来。
    +1 回复

    yy2004005 2012-12-06 14:57
    看着很过瘾，就像身临其境的去感受
    +1 回复

    jeekun 2012-12-06 10:54 来自 新浪微博
    最爱啊，必须收藏好好看//@developerWorks: 回复@CSDN研发频道:[赞] //@CSDN研发频道:应该@ 我们才对[偷笑]，这个是第四篇：http://t.cn/zjfsEFq
    +1 回复

    dongqi_yang 2012-12-06 07:24 来自 新浪微博
    看来俊哥现在达到疯狂的状态啦，哈哈[嘻嘻]
    +1 回复

    JCN03 2012-12-06 01:44 来自 新浪微博
    @Luigi穆 @LupoNacht
    +1 回复

    qqyabc 2012-12-05 19:19
    dota的时候也在想是怎么同步的。是主机处理消息动作，然后把结果传给各个副机么。。
    +1 回复

    蜀山假道 2012-12-05 17:52 来自 新浪微博
    First blood!
    +1 回复

    包秀图 2012-12-05 17:50 来自 新浪微博
    //@游戏开发极客: 好东西 @司马奔腾-做游戏的 //@北半球的凤凰: 有点意思，cc@游戏开发极客//@developerWorks: 回复@CSDN研发频道:[赞] //@CSDN研发频道:应该@ 我们才对[偷笑]，这个是第四篇：http://t.cn/zjfsEFq
    +1 回复

    __fn 2012-12-05 17:39 来自 新浪微博
    [咖啡]//@游戏邦: @CSDN 关于Warcraft分析系列的第四篇文章http://t.cn/zjfsEFq //@游戏邦: 1）Warcraft究竟是怎样从一个想法进化为一个完整的游戏的2）有的特性取自设计文档，但大部分来于个别程序员的心血来潮；有的艺术设计是按预定有条不紊地进行，更多的出于画师在深夜中的追求独特的灵感
    +1 回复

    Xnewbie 2012-12-05 17:22 来自 新浪微博
    转发微博 //@游戏开发极客: 好东西 @司马奔腾-做游戏的 //@北半球的凤凰: 有点意思，cc@游戏开发极客//@developerWorks: 回复@CSDN研发频道:[赞] //@CSDN研发频道:应该@ 我们才对[偷笑]，这个是第四篇：http://t.cn/zjfsEFq
    +1 回复

    游戏开发极客 2012-12-05 17:16 来自 新浪微博
    好东西 @司马奔腾-做游戏的 //@北半球的凤凰: 有点意思，cc@游戏开发极客//@developerWorks: 回复@CSDN研发频道:[赞] //@CSDN研发频道:应该@ 我们才对[偷笑]，这个是第四篇：http://t.cn/zjfsEFq
    +1 回复

    sxsy323 2012-12-05 14:09
    mark
    +1 回复

    奇点里的西西弗斯 2012-12-05 10:24 来自 新浪微博
    @张阿往
    +1 回复

    sniffer12345 2012-12-05 10:23
    同步bug啊。。哥每次调都调得想哭。就坐在电脑前看那一堆日志哗哗哗地下来试图搞明白到底哪里错了。正如作者所说的，在各种地方都有可能出现不同步情况，每一种都需要不同方法解决。比如随机数，即便你使用相同的种子，但是如果两边程序的调用有先后的话，也会导致不同步。而这在状态机，消息循环这些加进来后发生的概率更大。 我估计大家做法其实应该差不多，那就是认为同步bug是存在的，你能减少但很难消除，所以除了尽量排解外，你还必须有个纠正的系统，以及强制所有客户端同步的系统。
    +1 回复

        hiplayer 2012-12-05 15:32
        程序员的成就感，就来源于此。
        +1 回复

    mengyidan 2012-12-05 09:52
    好文章总数让人那么期待！O(∩_∩)O哈哈~
    1票，来自rossini23+1 回复

    zl8522115 2012-12-04 15:31
    这种史诗级的游戏,我朝几乎是不可能开发出来的.所以大家洗洗睡吧.
    +1 回复

        he_leaf 2012-12-04 16:29
        我朝技术有，可惜没有那个激情 都是金钱第一的我超。
        +1 回复

    jinsong1213 2012-12-04 13:11
    这写到冰封王座得猴年马月啊
    +1 回复

        kxxoling 2012-12-04 18:09
        不会写到冰封王座的，作者没在暴雪待到那个时候。Pat离开暴雪应该是2000年，因为他觉得那时候的暴雪太过商业化了，但他还是参与了W III和WoW的开发。
        1票，来自rossini23+1 回复

        dayuanyuan1989 2小时前
        回复@kxxoling:六百多W行行代码，还是W I，超过Linux内核代码了。 这个也太大了吧？
        +1 回复

    nlmayday 2012-12-04 12:53
    哈哈 速度写下一节
    +1 回复

        kxxoling 2012-12-04 18:10
        哈哈，小编也想快点，作者还没写呢～
        +1 回复

    hellboy310 2012-12-04 11:12
    多人作战，战争迷雾在红警就有了，唯一不同的是暴雪的游戏星际或魔兽迷雾打开后过段时候还会恢复，且后来暴雪开了自己的战网，最后在星际2中直接不支持局域网对战；
    +1 回复

        kxxoling 2012-12-04 18:14
        战争迷雾最早可能出现在有Chris Crawford在1986年设计的游戏《巴顿VS隆美尔》，游戏中双方都受制于战争迷雾。但貌似仅仅只属于“黑雾”的范畴（Black fog），但并不是战争迷雾，最早引入了“战争迷雾”（英文名称：war fog）是魔兽争霸2。 相关链接：oldbbs.ali213.net/archiver/tid-1889221-page-1.html http://baike.baidu.com/view/1044387.htm
        +1 回复

    ustccq 2012-12-04 10:37
    发现很多思想原来大家差不多啊……差别在于想法变成作品的行为和能力。
    +1 回复

    chenjiebin 2012-12-04 10:20
    真的非常激动，期待下一篇
    1票，来自kxxoling+1 回复

共1页 首页  上一页 1 下一页  末页
请您注意

    ·自觉遵守：爱国、守法、自律、真实、文明的原则
    ·尊重网上道德，遵守《全国人大常委会关于维护互联网安全的决定》及中华人民共和国其他各项有关法律法规
    ·严禁发表危害国家安全，破坏民族团结、国家宗教政策和社会稳定，含侮辱、诽谤、教唆、淫秽等内容的作品
    ·承担一切因您的行为而直接或间接导致的民事或刑事法律责任
    ·您在CSDN新闻评论发表的作品，CSDN有权在网站内保留、转载、引用或者删除
    ·参与本评论即表明您已经阅读并接受上述条款

    CSDN官方微信
    扫描二维码,向CSDN吐槽
    微信号：CSDNnews

程序员杂志for iPad 免费下载
每日资讯快速浏览

微博关注

相关热门文章

    国际著名黑客大赛介绍与比较
    2013年Java继续火的五大理由
    GitHub历史上最糟糕宕机事故回放及反省
    TIOBE 2013年1月：不负重望 Objective-C再次赢得桂冠！
    盘点2012 引领潮流的Web设计和工具
    分享9条经典的编程语录
    iOS开发者分享在Google三个月的工作经验
    现代Objective-C七宗罪
    2012年度最佳Web前端开发工具和框架
    Patrick Wyatt：代码没问题 程序却有bug？

活动
01-23 	1月23日CTO俱乐部交流会：金山云大规模存储架构及大型电商架构演化 	
01-15 	开源力量公开课第三期——2小时学会iOS应用开发 	
01-08 	Go语言，一门面向连接和组合的语言 	
01-06 	1月6日北京交流会：当当网如何打造个性化推荐&精准营销生态系统 	
01-05 	互联网大时代成就创新小企业 	
12-27 	CSTO沙龙第三期：艺术行业IT外包交流 	
热门专区

    win8开发马拉松
    2012微软技术大会
    数据库构架师专区
    IBM AIX学院
    异构编程专区

Top_arrow

    公司简介|招贤纳士|广告服务|银行汇款帐号|联系方式|版权声明|法律顾问|问题报告
    京 ICP 证 070598 号
    北京创新乐知信息技术有限公司 版权所有
    世纪乐知(北京)网络技术有限公司 提供技术支持
    江苏乐知网络技术有限公司 提供商务支持
    联系邮箱：webmaster(at)csdn.net
    Copyright © 1999-2012, CSDN.NET, All Rights Reserved GongshangLogo


