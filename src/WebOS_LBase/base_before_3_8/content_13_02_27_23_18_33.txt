分享到QQ空间新浪微博百度搜藏人人网腾讯微博开心网腾讯朋友百度空间豆瓣网搜狐微博百度新首页QQ收藏和讯微博我的淘宝百度贴吧更多...百度分享
首页我的主页相册广场消息 私信(1) 模板 设置 退出 关注此空间黑盒子
一个程序员的空间
2008-03-14 11:08 java 脚本引擎（二）

 
 回页首 

脚本引擎的运行上下文

如果仅仅是通过脚本引擎运行脚本的话，还无法体现出 Java 脚本 API 的优点，在 JSR 223 中，还为所有的脚本引擎定义了一个简洁的执行环境。我们都知道，在 Linux 操作系统中可以维护许多环境变量比如 classpath、path 等，不同的 shell 在运行时可以直接使用这些环境变量，它们构成了 shell 脚本的执行环境。在 javax.script 支持的每个脚本引擎也有各自对应的执行的环境，脚本引擎可以共享同样的环境，也可以有各自不同的上下文。通过脚本运行时的上下文，脚本程序就能自由的和 Java 平台交互，并充分利用已有的众多 Java API，真正的站在“巨人”的肩膀上。javax.script.ScriptContext 接口和 javax.script.Bindings 接口定义了脚本引擎的上下文。

Bindings 接口： 
继承自 Map，定义了对这些“键-值”对的查询、添加、删除等 Map 典型操作。Bingdings 接口实际上是一个存放数据的容器，它的实现类会维护许多“键-值”对，它们都通过字符串表示。Java 应用程序和脚本程序通过这些“键-值”对交换数据。只要脚本引擎支持，用户还能直接在 Bindings 中放置 Java 对象，脚本引擎通过 Bindings 不仅可以存取对象的属性，还能调用 Java 对象的方法，这种双向自由的沟通使得二者真正的结合在了一起。

ScriptContext 接口： 
将 Bindings 和 ScriptEngine 联系在了一起，每一个 ScriptEngine 都有一个对应的 ScriptContext，前面提到过通过 ScriptEnginFactory 创建脚本引擎除了达到隐藏实现的目的外，还负责为脚本引擎设置合适的上下文。ScriptEngine 通过 ScriptContext 实例就能从其内部的 Bindings 中获得需要的属性值。ScriptContext 接口默认包含了两个级别的 Bindings 实例的引用，分别是全局级别和引擎级别，可以通过 GLOBAL_SCOPE 和 ENGINE_SCOPE 这两个类常量来界定区分这两个 Bindings 实例，其中 GLOBAL_SCOPE 从创建它的 ScriptEngineManager 获得。顾名思义，全局级别指的是 Bindings 里的属性都是“全局变量”，只要是同一个 ScriptEngineMananger 返回的脚本引擎都可以共享这些属性；对应的，引擎级别的 Bindings 里的属性则是“局部变量”，它们只对同一个引擎实例可见，从而能为不同的引擎设置独特的环境，通过同一个脚本引擎运行的脚本运行时能共享这些属性。

ScriptContext 接口定义了下面这些函数来存取数据：


表 3. ScriptContext 存取属性函数
函数 描述 Object removeAttribute(String name, int scope) 从指定的范围里删除一个属性 void setAttribute(String name, Object value, int scope) 在指定的范围里设置一个属性的值 Object getAttribute(String name) 从上下文的所有范围内获取优先级最高的属性的值 Object getAttribute(String name, int scope) 从指定的范围里获取属性值 

ScriptEngineManager 拥有一个全局性的 Bindings 实例，在通过 ScriptEngineFactory 实例创建 ScriptEngine 后，它把自己的这个 Bindings 传递给所有它创建的 ScriptEngine 实例，作为 GLOBAL_SCOPE。同时，每一个 ScriptEngine 实例都对应一个 ScriptContext 实例，这个 ScriptContext 除了从 ScriptEngineManager 那获得的 GLOBAL_SCOPE，自己也维护一个 ENGINE_SCOPE 的 Bindings 实例，所有通过这个脚本引擎运行的脚本，都能存取其中的属性。除了 ScriptContext 可以设置属性，改变内部的 Bindings，Java 脚本 API 为 ScriptEngineManager 和 ScriptEngine 也提供了类似的设置属性和 Bindings 的 API。


图 3. Bindings 在 Java 脚本 API 中的分布


从 图 3 中可以看到，共有三个级别的地方可以存取属性，分别是 ScriptEngineManager 中的 Bindings，ScriptEngine 实例对应的 ScriptContext 中含有的 Bindings，以及调用 eval 函数时传入的 Bingdings。离函数调用越近，其作用域越小，优先级越高，相当于编程语言中的变量的可见域，即 Object getAttribute(String name) 中提到的优先级。从 清单 3 这个例子中可以看出各个属性的存取优先级：


清单 3. 上下文属性的作用域
import javax.script.*;public class ScopeTest { public static void main(String[] args) throws Exception { String script=" println(greeting) "; ScriptEngineManager manager = new ScriptEngineManager(); ScriptEngine engine = manager.getEngineByName("javascript"); //Attribute from ScriptEngineManager manager.put("greeting", "Hello from ScriptEngineManager"); engine.eval(script); //Attribute from ScriptEngine engine.put("greeting", "Hello from ScriptEngine"); engine.eval(script); //Attribute from eval method ScriptContext context = new SimpleScriptContext(); context.setAttribute("greeting", "Hello from eval method", ScriptContext.ENGINE_SCOPE); engine.eval(script,context); }} 

JavaScript 脚本 println(greeting) 在这个程序中被重复调用了三次，由于三次调用的环境不一样，导致输出也不一样，greeting 变量每一次都被优先级更高的也就是距离函数调用越近的值覆盖。从这个例子同时也演示了如何使用 ScriptContext 和 Bindings 这两个接口，在例子脚本中并没有定义 greeting 这个变量，但是脚本通过 Java 脚本 API 能方便的存取 Java 应用程序中的对象，输出 greeting 相应的值。运行这个程序后，能看到输出为：


图 4. 程序 ScopeTest 的输出


除了能在 Java 平台与脚本程序之间的提供共享属性之外，ScriptContext 还允许用户重定向引擎执行时的输入输出流：


表 4. ScriptContext 输入输出重定向
函数 描述 void setErrorWriter(Writer writer) 重定向错误输出，默认是标准错误输出 void setReader(Reader reader) 重定向输入，默认是标准输入 void setWriter(Writer writer) 重定向输出，默认是标准输出 Writer getErrorWriter() 获取当前错误输出字节流 Reader getReader() 获取当前输入流 Writer getWriter() 获取当前输出流 

清单 4 展示了如何通过 ScriptContext 将其对应的 ScriptEngine 标准输出重定向到一个 PrintWriter 中，用户可以通过与这个 PrintWriter 连通的 PrintReader 读取实际的输出，使 Java 应用程序能获取脚本运行输出，满足更加多样的应用需求。


清单 4. 重定向脚本输出
import java.io.*;import javax.script.*;public class Redirectory { public static void main(String[] args) throws Exception { ScriptEngineManager manager = new ScriptEngineManager(); ScriptEngine engine = manager.getEngineByName("javascript"); PipedReader pr = new PipedReader(); PipedWriter pw = new PipedWriter(pr); PrintWriter writer = new PrintWriter(pw); engine.getContext().setWriter(writer); String script = "println('Hello from JavaScript')"; engine.eval(script); BufferedReader br =new BufferedReader(pr); System.out.println(br.readLine()); }} 

Java 脚本 API 分别为这两个接口提供了一个简单的实现供用户使用。SimpleBindings 通过组合模式实现 Map 接口，它提供了两个构造函数。无参构造函数在内部构造一个 HashMap 实例来实现 Map 接口要求的功能；同时，SimpleBindings 也提供了一个以 Map 接口作为参数的构造函数，允许任何实现 Map 接口的类作为其组合的实例，以满足不同的要求。SimpleScriptContext 提供了 ScriptContext 简单实现。默认情况下，它使用了标准输入、标准输出和标准错误输出，同时维护一个 SimpleBindings 作为其引擎级别的 Bindings，它的默认全局级别 Bindings 为空。



 
 回页首 

脚本引擎可选的接口

在 Java 脚本 API 中还有两个脚本引擎可以选择是否实现的接口，这个两个接口不是强制要求实现的，即并非所有的脚本引擎都能支持这两个函数，不过 Java SE 6 自带的 JavaScript 引擎支持这两个接口。无论如何，这两个接口提供了非常实用的功能，它们分别是：

Invocable 接口：允许 Java 平台调用脚本程序中的函数或方法。 
Compilable 接口：允许 Java 平台编译脚本程序，供多次调用。
Invocable 接口

有时候，用户可能并不需要运行已有的整个脚本程序，而仅仅需要调用其中的一个过程，或者其中某个对象的方法，这个时候 Invocable 接口就能发挥作用。它提供了两个函数 invokeFunction 和 invokeMethod，分别允许 Java 应用程序直接调用脚本中的一个全局性的过程以及对象中的方法，调用后者时，除了指定函数名字和参数外，还需要传入要调用的对象引用，当然这需要脚本引擎的支持。不仅如此，Invocable 接口还允许 Java 应用程序从这些函数中直接返回一个接口，通过这个接口实例来调用脚本中的函数或方法，从而我们可以从脚本中动态的生成 Java 应用中需要的接口对象。清单 5 演示了如何使用一个 Invocable 接口：


清单 5. 调用脚本中的函数
import javax.script.*;public class CompilableTest { public static void main(String[] args) throws ScriptException, NoSuchMethodException { String script = " function greeting(message){println (message);}"; ScriptEngineManager manager = new ScriptEngineManager(); ScriptEngine engine = manager.getEngineByName("javascript"); engine.eval(script); if (engine instanceof Invocable) { Invocable invocable = (Invocable) engine; invocable.invokeFunction("greeting", "hi"); // It may through NoSuchMethodException try { invocable.invokeFunction("nogreeing"); } catch (NoSuchMethodException e) { // expected } } }} 

在调用函数前，可以先通过 instanceof 操作判断脚本引擎是否支持编译操作，防止类型转换时抛出运行时异常，需要特别注意的时，如果调用了脚本程序中不存在的函数时，运行时会抛出一个 NoSuchMethodException 的异常，实际开发中应该注意处理这种特殊情况。

Compilable 接口

一般来说，脚本语言都是解释型的，这也是脚本语言区别与编译语言的一个特点，解释性意味着脚本随时可以被运行，开发者可以边开发边查看接口，从而省去了编译这个环节，提供了开发效率。但是这也是一把双刃剑，当脚本规模变大，重复解释一段稳定的代码又会带来运行时的开销。有些脚本引擎支持将脚本运行编译成某种中间形式，这取决与脚本语言的性质以及脚本引擎的实现，可以是一些操作码，甚至是 Java 字节码文件。实现了这个接口的脚本引擎能把输入的脚本预编译并缓存，从而提高多次运行相同脚本的效率。

Java 脚本 API 还为这个中间形式提供了一个专门的类，每次调用 Compilable 接口的编译函数都会返回一个 CompiledScript 实例。CompiledScript 类被用来保存编译的结果，从而能重复调用脚本而没有重复解释的开销，实际效率提高的多少取决于中间形式的彻底程度，其中间形式越接近低级语言，提高的效率就越高。每一个 CompiledScript 实例对应于一个脚本引擎实例，一个脚本引擎实例可以含有多个 CompiledScript（这很容易理解），调用 CompiledScript 的 eval 函数会传递给这个关联的 ScriptEngine 的 eval 函数。关于 CompiledScript 类需要注意的是，它运行时对与之对应的 ScriptEngine 状态的改变可能会传递给下一次调用，造成运行结果的不一致。清单 6 演示了如何使用 Compiable 接口来调用脚本：


清单 6. 编译脚本
import javax.script.*;public class CompilableTest { public static void main(String[] args) throws ScriptException { String script = " println (greeting); greeting= 'Good Afternoon!' "; ScriptEngineManager manager = new ScriptEngineManager(); ScriptEngine engine = manager.getEngineByName("javascript"); engine.put("greeting", "Good Morning!"); if (engine instanceof Compilable) { Compilable compilable = (Compilable) engine; CompiledScript compiledScript = compilable.compile(script); compiledScript.eval(); compiledScript.eval(); } }} 

与 InovcableTest 类似，也应该先通过 instanceof 操作判断脚本引擎是否支持编译操作，防止预料外的异常抛出。并且我们可以发现同一段编译过的脚本，在第二次运行时 greeting 变量的内容被上一次的运行改变了，导致输出不一致：


图 5. 程序 CompilableTest 的输出
 


 
 回页首 

jrunscript 工具

Java SE 6 还为运行脚本添加了一个专门的工具 —— jrunscript。jrunscript 支持两种运行方式：一种是交互式，即边读取边解析运行，这种方式使得用户可以方便调试脚本程序，马上获取预期结果；还有一种就是批处理式，即读取并运行整个脚本文件。用户可以把它想象成一个万能脚本解释器，即它可以运行任意脚本程序，而且它还是跨平台的，当然所有这一切都有一个前提，那就是必须告诉它相应的脚本引擎的位置。默认即支持的脚本是 JavaScript，这意味着用户可以无需任何设置，通过 jrunscript 在任何支持 Java 的平台上运行任何 JavaScript 脚本；如果想运行其他脚本，可以通过 -l 指定以何种脚本引擎运行脚本。不过这个工具仍是实验性质的，不一定会包含在 Java 的后续版本中，无论如何，它仍是一个非常有用的工具。



 
 回页首 

结束语

在 Java 平台上使用脚本语言编程非常方便，因为 Java 脚本 API 相对其他包要小很多。通过 javax.script 包提供的接口和类我们可以很方便为我们的 Java 应用程序添加对脚本语言的支持。开发者只要遵照 Java 脚本 API 开发应用程序，开发中就无需关注具体的脚本语言细节，应用程序就可以动态支持任何符合 JSR 223 标准的脚本语言，不仅如此，只要按照 JSR 223 标准开发，用户甚至还能为 Java 平台提供一个自定义脚本语言的解释器。在 Java 平台上运行自己的脚本语言，这对于众多开发者来说都是非常有诱惑力的。


参考资料 

阅读 Java SE 6 新特性系列 文章的完整列表，了解 Java SE 6 其它重要的增强。 
developerWorks 文章“动态调用动态语言，第 1 部分: 引入 Java 脚本 API”：介绍了 Java 脚本 API 的各种特性，并使用一个简单的 Hello World 应用程序展示 Java 代码如何执行脚本代码以及脚本如何反过来执行 Java 代码。 
developerWorks 文章“动态调用动态语言，第 2 部分: 在运行时寻找、执行和修改脚本”：进一步讲解了 Java 脚本 API 的功能，演示如何在无需停止并重新启动应用程序的情况下，在运行时执行外部 Ruby、Groovy 和 JavaScript 脚本以修改业务逻辑。 
developerWorks 文章“给 Java SE 注入脚本语言的活力”：这篇文章在 Java SE 6 正式发布之前预览了 Java 脚本 API 的功能。 
Java SE 6 文档：Java SE 6 的规范文档，可以找到绝大部分新特性的官方说明。 
JSR 223：详细描述了脚本语言和 Java 平台交互的规范。 
Java SE 6 的规范文档上关于 Java 脚本编程的 教程。 
这个网站 为许多著名脚本语言的脚本引擎提供了对 JSR 223 的支持。 
Sun 的 Java SE 6 实现包含了 Rhino 版本 1.6R2 的脚本引擎，Rhino 是一个完全用 Java 开发的开源的 JavaScript 实现。 
JAR 规范中对 Service Provider 的介绍。

关于作者

 



 
邱小侠，目前就职于 IBM 中国开发中心 Harmony 开发团队，负责类库开发工作。 对开源软件，Java 编程，项目构建均抱有浓厚的兴趣。您可以通过 联系到他。

#程序设计 分享到： 举报 浏览(1876) 评论 转载 
你可能也喜欢
 游戏中十大著名吸血鬼盘点 性感暴力爱刀口舔血！  仙剑奇侠传5外传羁绊。标准版开箱评测。  2013年国内一线网游厂商战略布局全览  《使命召唤9》“革命”DLC首曝地图演示视频 激战滑雪场  仙五前传各角度人物pose（含场景图）（2）  新车新装备——棉花糖HT测评  struts-ActionForm:reset()详解 评论

 同时评论给  
 同时评论给原文作者   发布 500/0
收起|查看更多
帮助中心 | 空间客服 | 投诉中心 | 空间协议©2013 Baiduabcdef
