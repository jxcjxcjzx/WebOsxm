




首页
 书城
 咨询
 专家
 





站内搜索： 




科学就是整理事实，以便从中得出普遍的规律或结论。——达尔文 


首页
 科普聚焦






 时代科技






 科普生活






 电脑网络






 科学探索






 科技博览






 


登录
 





首页 » 电脑网络 » 电脑游戏


 





怎样来实现一个脚本语言引擎3

 

星期五, 2006-06-30 17:07燕良 gameres


一个关于JUMPTARGET操作码的说明:每当我们的代码中有一个(条件)跳转时,它并不指向一条实际的指令而是指向一个有"JUMPTARGET"前缀的指令.这么做的原因是当我们优化时我们必须知道代码中的每个跳转的目的指针,或者我们也许会把一条目的指令优化掉并且混乱(mess up)我们的程序.这些JUMPTARGET将不出现再我们最终的字节码中.
 
一般而言,所有的操作码操作堆栈顶端的项目.OP_STR_EQUAL从堆栈中弹出顶端的两个项目(必须是字符串),检查它们是否相等,然后把结果的布尔值进栈.你的程序接着可以使用OP_JMPF指令来使用这个结果:如果栈顶的布尔值是false跳转到目标指令(由本指令提供,而不是在栈中),如果栈顶是true就继续执行.
 
指令被存储到一个非常简单的中间指令类中,它只是保存操作码,一个符号--操作数(例如OP_INPUT),如果需要还有一个跳转目的指令,一个下一指令指针和一个行号.行号实际上只是在使用Show()函数时使代码可读.
 
现在让我们看看如何产生中间代码(intcode.cpp).通常我们为语法树中的所有子树产生代码.所以main以树根来调用GenIntCode()函数;GenIntCode处理并且返回一个中间代码的起始指针.
 
先看个简单的例子,INPUT_STMT结点:
 
case INPUT_STMT:
return new IntInstr (OP_INPUT, root->symbol);
 
这产生一个新的OP_INPUT指令并且返回它.注意这个指令也是一个长度为1的指令块(block of instructions) ,next指针默认为NULL.
 
PRINT_STMT更困难一点:
 
case PRINT_STMT:
blk1 = GenIntCode (root->child[0]);
blk2 = new IntInstr (OP_PRINT);
return Concatenate (blk1, blk2);
 
首先我们产生代码来计算表达式提供给print语句(root->child[0]).接着我们产生一个新指令OP_PRINT来打印栈顶的字符串.注意我们假设表达式把它的值放到栈顶.当然,我们得自己来保证这一点.最后我们连接两个代码块,然后返回结果.
 
现在是一个真正难的:IFTHEN_STMT.我产生所有需要的块,然后把它们都连到一起.它检查条件,如果它是false调换到结尾,如果它是true就执行then部分.
 
case IFTHEN_STMT:
// First, create the necessary code parts
cond = GenIntCode (root->child[0]);
jump2end = new IntInstr (OP_JMPF); // set target below
thenpart = GenIntCode (root->child[1]);
endif = new IntInstr (JUMPTARGET, jump2end);
jump2end->target = endif;

// Now, concatenate them all
Concatenate (cond, jump2end);
Concatenate (jump2end, thenpart);
Concatenate (thenpart, endif);
return cond;
 
记住root->child[0]是条件子树,root->child[1]是then子树.
 
好的,如果明白了那个,对与剩余的代码你就没问题了.所有树的结点都使用这个方法翻译.Show()函数显示我们产生的代码.看一下所有这些:
 
Program:
if (a==b) a; else b;

Intermediate code:
1: OP_NOP
2: OP_PUSH a
3: OP_PUSH b
4: OP_STR_EQUAL
5: OP_JMPF 9
6: OP_PUSH a
7: OP_DISCARD
8: OP_JMP 12
9: JUMPTARGET 5
10: OP_PUSH b
11: OP_DISCARD
12: JUMPTARGET 8
 
这看上去非常的象汇编代码,是吧?这是因为它就是.它是虚拟汇编(Virtual Assembly),本质上我们只需要写一个汇编程序来产生虚拟执行代码.


Whoa, what happened?
 
那进行的很快,不是吗?刚才我们还想我们是否将作一些有趣的事,突然我们就产生了虚拟汇编代码.我们几乎完成了.
 
下次我们将看一下优化(我确信如果你观察这部分的输出你能想到一些).很快我们将产生真正的虚拟机代码--但是我猜我们最好先有一个虚拟机!我们将看到从那我们去哪里.欢迎你发给我一些想法或建议.
 
Bottom line: some interesting stuff is coming up. Stay tuned!
 
See you next time.


Quote!

The story so far:

In the beginning the Universe was created.

This has made a lot of people very angry and been widely regarded as a bad move.

HHG 2:1


Downloads

Download the tutorial code (tut5.zip) (10k)

Part VI:优化 

你发现BUG了吗?

注意到了前两次的代码的好笑的东西了吗?可能有一个内存漏洞(memory leak)?Emmanuel Astier发现了;他找出了符号表中的一个BUG:当删除符号表时,我只是删除了链表中的第一个实体,而没有删除其他...OK,虽然程序没有崩溃,但是这不是很漂亮.这将在下一个教程中修改.多谢Emmanuel!


序言
 
我的考试结束了,我现在可能继续了.
 
在这部分我将涉及优化我们的中间代码的方法.记得吗,我们使用了一个非常简单的代码生成算法,所以那些代码也许相当的需要优化.
 
因为我们将在一个虚拟机上执行,所以优化变得格外的重要:我们的每一条指令将花费20条CPU指令去执行(很难更少),所以指令越少越好.
 
注意,我将只讨论与机器无关(machine-independent)的优化;面向机器的优化是一个完全不同的话题,在那里我们必须考虑象流水线效率,寄存器的使用等等这些.并且,当然的,面向机器的优化只有当你的代码在硬件上运行时才需要,这我们不需要.当然,可能有很多的方法来加速执行虚拟机本身,但是我们将在后面讨论.
 
对不起,这部分没有例子代码.一些优化的想法实现起来都是相当的简单,你将不会在这些问题上碰到麻烦.另外一些更复杂并且需要花大力气来实现.我没有时间来作,所以我只是给出一般的概念.
 
有两个重要的加速我们的代码的途径.一个是把代码翻译成更少的指令.另一个是制作更多强大的指令.


额外的操作码(Extra Opcodes)
 
高级的指令(Higher-level instructions)可以在VM上执行的更快,因为堆栈操作和更新指令指针的总开销是(粗略)的相同的.所以我们将忽略RISC并且为外来的代码(exotic instructions)而疯狂!;)
 
让我们观察一些代码.这是example.vasm的一部分,example.str的编译后的版本:
 
1: OP_NOP
2: OP_PUSH strconst1
3: OP_GETTOP a
4: OP_DISCARD
5: OP_PUSH strconst2
6: OP_GETTOP b
7: OP_DISCARD
8: OP_PUSH a
9: OP_PUSH b
10: OP_CONCAT
11: OP_GETTOP s
12: OP_DISCARD
13: OP_PUSH s
14: OP_PRINT
 
我应该注意它的一些事情.第一,在这个代码中的三个地方有一个OP_DISCARD跟随在一条OP_GETTOP的情况.我们将它它转换成一条OP_POP来提高速度,这条指令取得栈顶的值并且把它从堆栈中移走.我可以在开始时这么做,但是我想现在这样更简单.
 
第二,我看到了OP_PUSH; OP_GETTOP; OP_DISCARD两次.. 这是一个向"a = b"这样的简单赋值语句的代码.我们可以为它提供一个特殊的操作码OP_COPY,它把一个变量的值拷贝到另一个中.
 
第三,在这个程序的完整的代码中有相当多的"double pushes",两个进栈操作在一起.我们一个制作一个单独的OP_PUSH2操作码来加速它.
 
你或许能想出另外的高级指令.例如,一条连接一个现有字符串OP_CONCATTO操作码(s += "foo";).如果仔细的挑选他们将能够加速执行,所以花写时间来研究你的汇编代码,然后发现优化的可能.
 

代码变形(Code Transformations)
 
优化输出代码的另一个途径是吧一部分代码变形成更快的执行同样任务的某些东西.下面是一个例子.
 


Source
 
Assembly
 
Optimized

 

  s = a;
   if (s == d) ...
 
   OP_PUSH a
   OP_GETTOP s
   OP_DISCARD
   OP_PUSH s
   OP_PUSH d
   OP_STR_EQUAL
   ...

 

   OP_PUSH a
   OP_GETTOP s
    (cut away)
    (cut away)
   OP_PUSH d
   OP_STR_EQUAL
   ...



 
下面是一些变形代码的算法,节约指令..(saving instructions and thus time)
 
绝大多数优化集中在优化一些被认为是"基本模块(basic blocks)"的一小段代码.一个基本模块有下面这些性质:你能够在开始时跳转到它里面,并且你只能在它的结尾跳出.所以在这些块的中间没有跳转或者跳转目标(jump targets).这意味着在块之内我们能够确定一件关于我们的变量的值的必然的事情,我们可以利用这个信息来优化代码.举个例子,如果你可以跳转到块内的某处,我们不能确定,t仍然保留着值(a * b - c).
 
指针带给基本模块优化很多困难,因为你必须确定变量没有通过一个指针被修改,而不是了基本模块的某处通过它的名字被修改.往往你不能确定这点(指向指针的指针就几乎不可能知道什么变量被改变了).


代数上等同(Algebraic identities)
 
一个优化代码的简单方法是使用产生相同结果的更快版本来替代原来的"天真的"计算.这些"天真的"计算的计算经常采用一个简单的代码产生方案而不是象程序员指定的那样.观察下表,十分明显.
 


Before
 
After

 


   x + 0
   x * 1
   x ** 2
   2.0 * x
   x / 2


 

   x
   x
   x * x
   x + x
   x * 0.5



 

消除通用子表达式(Common subexpression elimination)
 
这种优化利用某一表达式可能多次使用一小段代码的事实:
 
a = a + (b - 1);
c = c + (b - 1);
 
这里(b-1)是一个通用子表达式并且可被再次使用(第二个(b-1)表达式可以被"消除").
 
t = b - 1; // 把子表达式存储到一个临时变量中
a = a + t;
c = c + t;
 


为了检测通用子表达式,你需要构造一个出现在你表达式中基本模块的有向无环图(DAG,directed acyclic graph).每次你遇到一个新的表达式(例如,语法树中一个更高的结点),你检查在这个基本模块的它是否已经出现在表达式DAG中.当这个图完成时你能很容易的看出那个子表达式使用了多次,这样你就可以把它们的值存入一个链式变量,并且再次使用它.上图是一个例子.


循环的优化(Loop optimizations)
 
一个众所周知的程序员的格言"程序90%的时间花费在执行10%的代码上",尽管这个百分比每个程序都不同,但是每个人都会同意绝大多数运行时间花费在一个内层循环上.
 
所以如果我们能使用某种方法优化这些循环,我们就能节省很多的时间...好吧,有很多中优化循环的方法;我将简单的讨论他们中的两个,代码移动和变量归纳(code motion and induction variables).
 
代码移动类似与子表达式消除,但是不是在一个基本模块中,它在循环开始前计算表达式并且在循环的整个过程中使用这个值.
 
while ( i <= limit-2 )
 
变为
 
t = limit - 2;
while ( i <= t )
 
可是,循环也许没有很多的不变的表达式.它们经常使用的是一个循环技术器,并且这个技术器被频繁的使用在计算中,例如数组下标,等等.那就是变量归纳能帮我们的了.
 
如果j是我们的循环技术器,并且每次循环中都计算j*4,我们可以使用一个变量归纳,然后把这个乘法替代为加法:
 
for (j = 0; j < n; j++) {
.... (j * 4) ....
}
 
变为:
 
t = 0;
for (j = 0; j < n; j++) {
.... t ....
t += 4;
}


跳转的消除(Jump elimination)
 
有时你能够通过观察跳转的目的块来消去一个跳转.例如,你可能有:
 
1: jmp 7
...
7: str_equal
8: jmpf 10
9: ...
 
你可以从目的块拷贝代码,然后节省一个跳转(如果条件为假):
 
1a: str_equal // | 目的块的拷贝
1b: jmpf 10 // |
1c: jmp 9 // 如果条件为真,跳转到9
...
7: str_equal
8: jmpf 10
9: ...
 
你要决定为了消除一个跳转你将要复制多大一部分代码,但是在内层循环中它能省很多时间.
 

下次的东西...
 
这些信息使你的程序变得更有效率了.可是编译器优化是一个非常复杂的领域,我们只涉及到了非常少的一点.龙之书讨论了更多,所以如果你感兴趣,就去看它吧 .
 
下次我们将建立我们虚拟机,然后也许产生我们的虚拟机代码吧.那时我们就终于可以执行一个程序了.


Quote!
 
Somewhere on the wall a small white light flashed.
 
"Come," said Slartibartfast, "you are to meet the mice. Your arrival on the planet has caused considerable excitement. It has already been hailed, so I gather, as the third most improbable event in the history of the Universe."
 
"What were the first two?"
 
"Oh, probably just coincidences," said Slartibartfast carelessly.
 
HHG 1:30


Part VII:虚拟机(The Virtual Machine)

序言
 
我们已经在Part V产生了中间代码,并且我们想要把它转换成可执行代码,好让我们能够执行一个程序.但是我已经决定要先建立一个虚拟机,这样我们可以知道该如何处理产生可执行代码.
 
虚拟机当然是一个脚本引擎中非常重要的组件.我们的代码将在它那里执行,所以它最好快一些.但是这里我将不把焦点集中到速度上.
 
Oh yeah:这部分结束后,你将完全免费的得到我那令人惊奇的堆栈模板(Amazing Stack Template),也不需要额外的小费.并且你将得到一个为这部分特别编写的很酷的字符串类,它完成至少5个精密的工作.那是你的物有所值的东西.
 
但是,首先是一个不同机器类型的说明.在Part V我只是说了我们的VM将是什么种类,没有说明其它的可能.Andy Campbell询问我关于这方面的其它可能性,并且我想其他人也许会感兴趣.


机器类型
 
以前说过,我们的机器将是一个堆栈机器(stack machine).在真实的机器中,堆栈CPU被用于早期的计算机(并且今天依然在一些简单的设备中使用).缺点是需要很多的堆栈操作:每个操作数需要一个PUSH,每个结果需要一个POP.尽管你直接使用这个结果来进行下面的计算,所以那不总是必须的.
 
现在的大多数CPU有寄存器(数量非常有限的存储位置)来进行操作而不是堆栈;堆栈依然在函数传递参数时使用.可以只在寄存器上操作的机器被称为load/store机器,因为你必须load每个你用到的值,然后在你计算完后store每个结果.
 
某些处理器只操作内存数据;没有堆栈,也没有寄存器.使用这种处理器的机器被称为三地址机器(three-address machines),因为绝大多数指令有三个地址操作数(例如 ADD dest,src1,src2).由于内存带宽的限制,我认为他们不会在很多硬件中使用,但是他是虚拟机的一个选择.
 
对于虚拟机,堆栈机器非常容易实现,因为当你计算一个表达式时不需要临时变量来存储中间结果;你把所有东西放入堆栈(它与你处理一个后缀表达式的方法十分相似).虽然我将在这里使用临时变量.后面还有更多内容.
 
我不清楚三地址机器是否可能有一个优点;速度是最重要的一个,尽管我尝试了两者,我能肯定的说出哪个在优化中做了更少的计算...我想优化三地址代码更容易,所以也许这是这种机器的一个优点.
 
JAVA表面上使用一个堆栈机器(我听说是这样,我对JAVA VM不熟).


一件虚拟的非常容易的事(A Virtual Piece of Cake)
 
我们的虚拟机对象根本就不复杂.它的最重要的成员有:一个指令数组,一个字符串表和一个堆栈.它有三个主要的接口函数:Reset,Read和Execute.
 
指令数组存储我们的程序包含的指令.指令类简单极了,看上去就像我们在Part 5中的中间代码使用的一样.
 
字符串表只是一个指针数组,它可以是NULL或者一个当前使用的字符串.这可能是一个程序的变量,或者一个堆栈中的临时变量.
 
我们的堆栈是由整数组成的.它们指向字符串表,使我们知道什么字符串现在在堆栈中.为什么我使用整数,而不是字符串类的指针呢?因为我想保持事物的简单(为了读者,也为了我自己):记住我们有时也想让堆栈存储布尔值,所以我们不得不建立一个存储字符串指针或布尔值的'stack item'类...现在我们只是使用一个整数:如果它是非负数,我们知道它指向一个字符串,如果它是负数它就是一个布尔值.它是脏的代码,但是他有利于工作并且每个人都可以理解它.不要在家试它,不要在一个真正的项目中使用它.
 
现在是接口函数.'Reset'重新初始化VM.它是一个很简单的函数.
 
'Read'将要在程序中读取.下次我们将改变这个函数让他从stdin中读取,但是现在它里面有一个测试程序.如果你喜欢就改写它--只是小心的让程序保持正确,不要让我们的VM崩溃.
 
'Execute'执行当前在内存中的程序.这也是一个简单的函数:它有一个指令指针,它察看一个指令,然后使用一个switch语句执行正确的代码.关于临时变量的一个说明:每当我们把一个变量放到堆栈,我们需要它的一个拷贝:我们不能只是把在字符串表中的变量的索引值进栈,因为他们的值可能改变并且接着堆栈中的值也会改变.这就是为什么几乎每个堆栈操作都使用NewTempCopy和DelTempCopy.
 
一点关于优化VM的说明:我们应该确保我们的堆栈操作尽可能的快;我们的堆栈模板不是特别的快.在字符串操作上也一样.一般而言,我们应该使通用的case快.最好把所有普通的优化技术应用到VM上.
 
关于VM还有很多要说:存储分配(allocation schemes),垃圾收集(garbage collection),保持他们稳定和高速,但是我想我将推延到下一部分.

 
下一次

下一次我们将最终执行代码.然后我们就完成了我们的简单的脚本引擎.之后我可能给出一个复杂的真实的脚本引擎的概貌,并且讨论所需的主题.


Quote! 
 
"Come," called the old man, "come now or you will be late."
 
"Late?" said Arthur. "What for?"
 
"What is your name, human?"
 
"Dent. Arthur Dent," said Arthur.
 
"Late, as in the late Dentarthurdent," said the old man, sternly. "It's a sort of threat you see." Another wistful look came into his tired old eyes. "I've never been very good at them myself, but I'm told they can be very effective."
 
HHG 1:22


Downloads

Download the tutorial code (tut7.zip) (5k)


Part VIII:可执行代码

序言
 
我们有了执行我们的程序的所有需要的东西,除了...可执行代码.我们已经有了中间代码,并且它已经非常接近我们的虚拟机能理解的东西了.所以我们必须作的是一个中间代码和可执行代码之间的快速的翻译步骤.
 
为什么这需要是一个分离的步骤?就象你看到的,翻译实际上涉及到把我们的字符串放到一个数组中,并且为符号表提供他们的索引而不是指针.我们上次已经做了跳转目的,所以他们将不再改变.所以这是一个简短的部分,代码改变不大.
 
也许对于我们,建立中间代码不是严格的需要.但是写一个更高级的编译器时,有这样一个分离是非常有用的,在实际的机器码之前更多的'概念上的'阶段:它简化代码优化;你可以不困难的重新定义你的编译器到另一个机器.


最后一步
 
当你阅读这部分的代码时,你将在几个地方看到到我的懒惰,它使我写了真正罪恶的代码.
 
举个例,我把编译器和虚拟机组合到了一个程序中,并且我传送"中间代码"给虚拟机,这不是很恰当的方法.你也许想要你的编译器来处理每件事直到可执行代码产生,然后也许存储可执行代码到一个文件,然后让你的VM读取&执行这个文件.
 
在我们这里,VM中的Read()函数首先从我们的符号表中取得所有的字符串,然后把他们放入字符串数组.然后它线性的通览代码,并且一行接一行的翻译它们.我们所使用的特殊的跳转目的指令只被转换成NOP指令,它应该被优化掉.
 
Oh,我做得一个显著的可恶的事是我用来自编译器的符号表来存储虚拟机的字符串表索引(使用符号表的新成员PutNo()/GetNo())...它是非常简单的找到字符索引的方法,但是我同意模块化的程序设计是全然不同的...


它工作了!我简直不能相信!
 
嗨,你真的可以使用这个编译器/虚拟机的结合体来执行一个程序!你大概几乎放弃了它,不是吗?好吧,继续尝试例子.这部分有源码可以下载...他们应该正确执行.这很有趣吧.
 
好的,那就是我们曾经为之工作的东西.一个小小的语言,尽管它自身不是很有用,但是它表现了很酷的东西--你现在学习了建立你自己的脚本引擎的足够的东西.

 
现在发生了什么?
 
经过了这样一个难以置信的极限(啊咳)我相信你有一点感觉空虚和不知所措.我们将从这里去到哪里?
 
我将可能作一个或更多的part介绍一些高级的主题,也许谈到为这个语言增加函数,类,多态,等等.让我知道你对什么感兴趣.
 
尽管将不再有代码--每个人都可以取得这个简单的编译器并且扩充它.或者,更好,写一个你自己的.The world's your oyster!

 
Quote!
 
"More importantly, a towel has immense psychological value. For some reason, if a strag (strag: non-hitch hiker) discovers that a hitch hiker has his towel with him, he will automatically assume that he is also in possession of a toothbrush, face flannel, soap, tin of biscuits, flask, compass, map, ball of string, gnat spray, wet weather gear, space suit etc., etc. Furthermore, the strag will then happily lend the hitch hiker any of these or a dozen other items that the hitch hiker might accidentally have "lost". What the strag will think is that any man who can hitch the length and breadth of the galaxy, rough it, slum it, struggle against terrible odds, win through, and still knows where his towel is is clearly a man to be reckoned with."
 
HHG 1:3

 
Downloads
 
Download the tutorial code (tut8.zip) (15k)


Part IX:高级主题 

序言
 
现在你已经玩了一下那个完成的脚本例子,也许你实现了一些新特性,或许当我们将要接触新东西时你在疑惑.
 
请允许我提醒您,这些好东西里的绝大部分都需要大量的工作(这些我将不再提供例子代码).我将讨论几个高级的脚本主题,给出如何实现(我的想法)的一般想法.
 
第一个:


A lockup-resistent VM(不会翻,晕倒....)
 
前一段时间Joseph Hall给了我一个处理无限循环(infinite-looping)的脚本代码的很好的想法.他的思想是:每次调用虚拟机时给他最大数量的操作码去执行,并且如果下一帧它还没有完成时让它继续执行;这是虚拟的等价与CPU优先级多任务.这种方法使你的游戏引擎在脚本代码挂起时可以保持运行;它可以自动检测脚本是一个不变的循环并且重起VM.
 
现在,让我们看看我们可以怎么样扩展我们的语言:


函数
 
在你的脚本语言中增加函数是非常困难的,它引入了参数和局部变量的概念.为了他们需要使用堆栈.在一个函数调用前程序把参数入栈.然后函数在同一堆栈中预留空间给它的局部变量.然后执行函数,使用预留的堆栈空间来读写值.在我们的简单的编译器中,我们仅仅从栈顶进栈和退栈,但是现在你也可以访问堆栈中间的内存地址.
 
你需要为函数使用两个特殊的操作码:CALL和RETURN.CALL是一个无条件的跳转,它吧指令指针保存到堆栈中.RETURN读取那个被存储的指令指针,然后跳回CALL后面的指令.
 
要做的一件最符合逻辑的事是让调用者(不是该函数)把参数从堆栈中移走参数;毕竟最初是调用者把他们放进来的.这也考虑到一个"输出参数(output parameters)"的简单机制:函数改变一个参数的然后调用者把这个值存入一个变量.一个函数的返回值也可以看作是一个输出参数.
 
函数的信息头可以存储到一个符号表中.使用他们,你可以存储它的参数和局部变量(可以每个是一个分离的符号表实体).在代码生成的过程中,你可以在符号表中存储函数的起始地址.
 
重载(Overloading)
函数的重载可以是一个语言中非常好的特性,但是实现它可能很棘手的.问题是如何通过提供的参数类型来正确的从可能的函数头信息中找到一个恰好匹配的函数来调用.在这种情况下,你将不得不强制某些参数到不同的类型来得到一个完全的匹配.问题是什么参数需要强制转换和把它们转换到什么类型.大多数编译器试着比较调用和可能的选择,然后选择一个需要最少强制转换的.一些编译器允许双重强制转换(例如:bool->int,然后int->unsigned),这使麻烦更复杂,我建议保持简单.
 
操作符可能看作是一个用不同语法调用的函数;如果用这种方法来处理你的操作符(不要真把它们作成函数(慢),而是inline函数或者宏),你可以轻松的扩展函数重载到操作符重载.

 
类
 
如果你想要在你的语言中实现类,正确的决定你想要支持那些特性.支持完整的C++类,包括多继承,访问控制,动态束定,虚函数,等等是非常困难的,我建议不要在一开始就处理所有这些.一个带有单继承的简单的类系统是一个很好的起点,如果需要的话你以后可以扩展它.
 
类和结构体是符合数据类型:他们包含多个数据成员,并且连接到一定数量的方法或者成员函数.你可以在你的符号表中存储一个成员列表,它与其他分离的成员符号表实体相连接.这可以使你简单的找到结构中某个成员的偏移量.
 
继承
单继承相对的简单:当你在一个对象中查找一个成员时,检查这个成员是否在子类中;如果不是就检查它的父类.子类的存储布局很简单:首先你存储父类,然后是他的子类,其他子类,等等.这样向下的束定被隐藏:你可以处理向处理一个Animal的指针一样处理一个Cat的指针,这个的意思是你的程序可以访问更少的成员,但是指针的地址不需要改变.
 
多继承,当调用一个成员函数或者访问一个数据成员时,它带来了二义性问题.思考这个:两个类B和C是统一个类--类A的子类.然后建立一个类D源于类B和类C这两个类.现在,如果类A有一个公有成员函数DoSomething,当成员在一个D类型的对象中调用DoSomething时,你不能知道调用两个DoSomething中的哪个:一个是B的A部分,另一个是C的A部分..好吧,也许看图可以更清楚.




 
虚函数
虚函数是建立多态的一个方法;例如一个Animal类包含一个虚函数MakeSound(),一个子类Cat和Dog都各自用不同的方法实现一个这个函数(我想让你考虑如何正确的实现他们).于是当你调用一个Animal对象的MakeSound函数时,你不知道(并且不需要知道)是那种动物在发出声音.
 
虚函数函数使用一个所谓的vtable来实现.当父类声明一个函数为virtual时,它在那个类中增加了vtalbe.每个子类现在取得他们自己版本的vtable,这样,不同的函数调用基于那个对象实际的类型,尽管在调用者看来这些table之间并没有区别.
 
动态束定
动态束定可以很便利:例如,在UnrealScript中你不仅仅可以向下束定一个对象(把它束定到它的父类型),而且可以向上束定(束定一个对象到它的子类),如果这个对象的确是子类的对象.这意味着你需要一个方法来决定一个Parent类型的对象实际上是向下束定的一个Child1对象(在这种情况它可以被向上束定),或者是一个Child2对象(在这种情况它不可以被向上束定).在最新的C++编译器中你可以使用dynamic_cast<...>操作符.怎么觉得这个呢?每个对象都将必须有一个独一无二的号码,也许是一个类的表和他们的父类的索引.使用这个号码,你可以断定它到底是那种对象.
 
类型变量(Type variables)
类型变量允许类型的变量.这允许你动态建立一个变量类型的对象.举个例子,你有一个游戏,一个敌人走了进来,两个同样的敌人走了出去.你可能会看到一个包含所有可能的敌人的巨大的switch语句,但是这不是很好扩展.所以你可以存储敌人的类型,告诉游戏使用这个类型建立一个怪物.这是一些假想的语言代码:
 
TypeVar<Enemy> enemytype; // A type variable
enemytype = typeof (monster); // Get the monster's type
Enemy *newmonster = new enemytype; // Create a new monster of the same type
 
你可以传递类型变量到一个函数;这将使得他们很有可塑性,你可以使用同一个函数来建立和处理很多不同类型的对象.
 
为了类型变量,你需要扩充类和他们的父类的表来包含每个类型的大小;否则你将没法动态建立他们.


Game-specific language constructs
 
UnrealScript(据我所知)是第一个提出了两个在游戏中非常有用的特性的语言:状态和隐藏代码.
 
状态
UnrealScript中的类可以有几种状态;一个对象总是在一个确定的状态.基于对象处在那个状态,为这个对象执行不同的函数.所以如果这个对象是一个敌人并且它处在Angry的状态,Angry版本的SeePlayer函数将被执行,这个敌人将可是攻击玩家.如果这个敌人处在一个Frightened的状态,另一个SeePlayer函数(使用同样的参数类型)将被调用,使得敌人逃跑.
 
状态并不是非常难加入,尽管它的确需要一些工作;状态是一个额外的类成员(不可见),并且每当调用特定的状态函数时恰当的函数版本将被执行.这可以使用一个使用状态号码为索引的跳转表来轻松实现.
 
状态可以有它们自己的函数外的代码,在UnrealScript中是状态代码.这可以方便的与下一个构思相结合:隐藏的函数.
 
隐藏的函数(latent code)
隐藏的函数相当的难实现,但是非常的酷:一个隐藏的函数花费一些游戏时间来执行;换句话说,这个过程可以起动一个函数等待或者激活那个等待或者激活一个人物,当这个动画完成后代码继续执行.这是一个AI脚本很好的特性.
 
隐藏代码带来的另一个问题是本质上它与其他代码并行执行.偶尔隐藏代码被执行,然后它又被停止.所以我们必须记住隐藏代码的指令指针.并且当对象改变它的状态时,你将也需要执行其他的隐藏代码.
 
我们可以看到UnrealScript唯一提供隐藏代码的原因是为了调用状态代码,而不是普通函数:假设隐藏函数可以在任何地方被调用,每个对象本质上可以有很多的并行执行的"线程"..这可能需要大量的记录并且将变慢.而且也将产生同步问题:一个对象的线程将把一个成员变量设为某个特定的值,然后一个其他的线程变为活动后再次修改它...如果你想允许它将需要实现一个完整的多线程系统.

 
That's it for now.. 
 
我希望这可以激发你的想象力.有许多特性你的脚本语言可以实现;如果你想完成它你将限制自己为某一个.
 
这可能是这个系列教程的最后以部分.我乐于写它.如果你觉得在一些地方还不够,让我知道,也许我将写一个额外的部分.当然,如果你有其他的一些问题我也乐于听你说.
 
Good luck, and keep on scripting! ;-)


Quote! 
"He stared at it for some time as things began slowly to reassemble themselves in his mind. He wondered what he should do, but he only wondered it idly. Around him people were beginning to rush and shout a lot, but it was suddenly very clear to him that there was nothing to be done, not now or ever. Through the new strangeness of noise and light he could just make out the shape of Ford Prefect sitting back and laughing wildly.

A tremendous feeling of peace came over him. He knew that at last, for once and for ever, it was now all, finally, over."

HHG 5:25

 

1
 2
 3
 4
 5
 
总评价数: 6 .
 


如果想要发表评论，请先登录。 





推荐内容





瑞典在网游“第二人生”中开设虚拟大使馆
 



热门评论





人类在未来有望在水中自由呼吸


地球每2700万年一次物种大灭绝 人类剩


美航天局公布太阳“日冕物质抛射”三维图


美国科学家已首次发现带有尾巴的太阳系外行


专家:应保护原生态尊重自然优胜劣汰


“超级太阳风暴”不等于世界末日


Twitter搜索整合搜人功能


美科学家研制意识控制手机 大脑暗示即可拨


2010上海世博会集锦


布什会见菲尔普斯脸色难看
 



网友推荐





美科学家研制出新型高效能电池


人类在未来有望在水中自由呼吸


科学家称已找到让人类大脑变大方法 未来更


乌兹别克斯坦小镇的“地狱之门”奇观


产业规划调控市场 新能源发展动力十足


摩托罗拉XOOM，机器人3.0第一机中国


Firefox 4冲击微软IE9 下载量


波音787客机开始加油 本月将进行首次试


奥巴马致高锟贺函曝光：世界欠你一个极大人


科研仪器何时能步入“中国创造”
 .
 





金桥科普是一个公益性栏目，内容由作者提供或摘自互联网，其目的是向广大网民普及科学技术知识。如果您发现本网站转载或摘编了您拥有著作权的作品并有异议，请通知我们(电话：023-63659911)，我们立即删除。
 



Copyright © 2000-2011 重庆科技咨询业协会, 重庆灵灵科技有限公司. 版权所有

电话：023-6365-9911 传真：023-6365-9907 地址：重庆市渝中区双钢路3号科协大厦15楼

渝ICP备12001500号
 
 
 

