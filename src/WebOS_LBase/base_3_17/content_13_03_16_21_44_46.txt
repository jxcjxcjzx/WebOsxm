
您还未登录！|登录|注册|帮助
 首页
 业界
 移动
 云计算
 研发
 论坛
 博客
 下载
 
更多
 







孟岩

Salute Julian Assange


 


目录视图
摘要视图
订阅
 . 



博客专家信息更新登记表        专访卜茂霞：嵌入式汽车开发潜力巨大      云计算最低优惠仅剩1天 
专访陈勇： 敏捷开发现状及发展之路        “传统商家移动化之路”会议        下载频道3月领任务~赚下载分！ 



C++0X的三件好东西（零） 
.
2010-09-11 11:0129620人阅读评论(87)收藏举报
 
c++referencelambdamfcthreadtable

 
先说一些废话，可以跳过不看。

我主张，在具备基础之后，学习任何新东西，都要抓住主线，突出重点。对于关键理论的学习，要集中精力，速战速决。而旁枝末节和非本质性的知识内容，完全可以留给实践去零敲碎打。

原因是这样的，任何一个高级的知识内容，其中都只有一小部分是有思想创新、有重大影响的，而其它很多东西都是琐碎的、非本质的。因此，集中学习时必须把握住真正重要那部分，把其它东西留给实践。对于重点知识，只有集中学习其理论，才能确保体系性、连贯性、正确性，而对于那些旁枝末节，只有边干边学能够让你了解它们的真实价值是大是小，才能让你留下更生动的印象。如果你把精力用错了地方，比如用集中大块的时间来学习那些本来只需要查查手册就可以明白的小技巧，而对于真正重要的、思想性东西放在平时零敲碎打，那么肯定是事倍功半，甚至适得其反。

因此我对于市面上绝大部分开发类图书都不满——它们基本上都是面向知识体系本身的，而不是面向读者的。总是把相关的所有知识细节都放在一堆，然后一堆一堆攒起来变成一本书。反映在内容上，就是毫无重点地平铺直叙，不分轻重地陈述细节，往往在第三章以前就用无聊的细节谋杀了读者的热情。为什么当年侯捷先生的《深入浅出MFC》和 Scott Meyers 的 Effective C++ 能够成为经典？就在于这两本书抓住了各自领域中的主干，提纲挈领，纲举目张，一下子打通读者的任督二脉。可惜这样的书太少，就算是已故 Richard Stevens 和当今 Jeffrey Richter 的书，也只是在体系性和深入性上高人一头，并不是面向读者的书。

最近我闲逛各技术社区，最深的一个感受，就是开发者的niubility value也跟中国社会的 income distribution 一样，呈现严重的两极分化状态。所以我建议那些老鸟们，多做一点提纲挈领的总结工作，把真正紧要的东西总结出来，给社区一些贡献。

我现在只在业余时间看看技术，写写程序，聊以自娱，对于最近一年多的风起云涌，了解有限。下面所说，如果有错误，请指出。

言归正传。

C++0X出来之后，网上对它的讨论已经很丰富，大大小小几十个新的特性，如果详细论述，当然又是一本（平庸的）厚书。但在我看来，其中很多特性是不用花太大精力的。分这么几类：

1. 亡羊补牢的，早就应该有，没有就该遭雷劈的。比如unordered_table, shared_ptr/weak_ptr, regexp, auto/decltype。

2. 锦上添花，可有可无的。比如 tuple, array container, range-base for, initializer lists, delegate/inheriting constructors, nullptr等等。

3. 犄角旮旯，库开发专用工具，一般不推荐使用的：如static_assert、可变模板参数等。

4. 还不成熟的，没有完全想清楚的：主要是 thread，其中的 future, promise等抽象，勇气可嘉，但有早产嫌疑，仍需留院观察。

那么C++0X中真正的主角，值得你投入精力去学习的，有可能对你的编程实践构成重大影响的，我认为就三个东西：

1. Rvalue reference;

2. function/bind;

3. Lambda expression and closure.

这三个东西，网上的讨论也已经有很多了。我也来凑凑热闹，会陆续写三篇简明扼要的东西，介绍它们的厉害。

 





 
 
分享到： 

上一篇：几点想法，权作网志
下一篇：回复几个问题
 . 


查看评论
 
54楼 iamxgl 2011-11-19 22:29发表[回复] C++傻逼，整个boost，估计只有数学家才能做程序员了。楼主也是傻逼，人家整那么多，你就看中三个，凭啥呢，我用boost写个分布式服务器，也没用lambda，没用什么ref，啥的，就用了里面的asio，thread，shared_ptr，整的自己多niub是的，有空多写点代码吧，别出来瞎吹了53楼 lwx496 2011-06-21 08:47发表[回复] 期待下文。52楼 v_JULY_v 2011-06-20 21:30发表[回复] 不错的文章，开头的“废话”是亮点。51楼 jinfengmusic 2011-01-26 10:10发表[回复] 所谓的“废话”其实很重要。50楼 有趣之极 2011-01-12 13:08发表[回复] 靠，原来老大被IBM挖走了！！！49楼 ljdlut 2011-01-06 14:27发表[回复] C++的一些新的特性，应该不是凭空产生的或者纯学术性的吧？新的规范只是增加了新的特性，用不用是coding的人决定的，而不是C++规范。别人提供了新的东西，应该知道感恩；而不是指手划脚。

程序员是干什么的？解决现在的问题，和为解决将来的问题做准备。你可以不明白这些特性的具体实现，但是直到它能用来干什么总是有意义的；多了解一下，至少能够在解决问题思路广一些。48楼 hello924 2010-12-09 17:56发表[回复] [e01]47楼 smallfool 2010-09-30 20:29发表[回复] 关键是用，解决什么问题，怎么解决问题。工具永远是工具。46楼 smallfool 2010-09-30 20:28发表[回复] 说实话，这些都是扯淡。最基础的还是最有效的，最有用的。看看国内C++一大行业，游戏行业，有多少是用了楼主所说的这些所谓新特性。
学院派思维——45楼 zy498420 2010-09-28 00:49发表[回复] 我对c++新编译器的要求：

对各种模版特性都用宏定义标明是否支持：包括最原始的成员模版，偏特化，部分特化，模版友元，还有这些0x的新特性。免得做个可移植的c++程序几乎都要靠boost,ace,qt的那些配置宏.

标准库加一些模板库，至少算法补上copy_if,函数适配器加上与和或（原来只有非，很郁闷）。并且设法把模板实例化的错误的提示以上层错误而不是底层实例化时的错误（至少比较人性化，就像static_assert）的方式告知，虽然我知道这很难很难，那个被否掉的&quot;概念&quot;我仔细想过了确实不合适，会让一些用过函数重载技巧的结果在不知情中变化，vs2010没有把c#的照搬过来确实做的有道理

其它除了右值引用，第2代的bind函数适配器，我觉得null的类型确实应该好好说清，放宽pod限制也可以让union的使用范围变宽（我好几个网络解包的代码都因为这个原因选择了c编译），闭包lamda说真的我觉得实在是高估了中国现阶段开发人员的水平（c++库的接口不能和c的语法相差太多，否则就没人用了。那个中括号我始终觉得很刺眼睛），写个小类我还是觉得并不累。Re: zy498420 2010-09-28 00:57发表[回复] 回复 zy498420：博主曰：最近我闲逛各技术社区，最深的一个感受，就是开发者的niubility value也跟中国社会的 income distribution 一样，呈现严重的两极分化状态。所以我建议那些老鸟们，多做一点提纲挈领的总结工作，把真正紧要的东西总结出来，给社区一些贡献。

不知道我说的东西算紧要不了，呵呵。

一般开发的可移植性对我来说就win32+linux,unix其实都很少。44楼 zhuxiawu 2010-09-20 13:08发表[回复] [e01]谢谢43楼 bfzhao 2010-09-20 12:29发表[回复] 期待您的观点和描述这些问题使用的方式。

微软C++基本库有个名字缩写就是STL的哥们儿有一些这方面的公开资料（PPT，视频），相比您已经参阅了。非常好，希望您的能更上一层楼。

现实情况中，别说国内的软件公司，就是许多很有声誉的欧美软件公司，使用C++也是相当的保守。究其原因，非不为也，是不能也。对C++的掌握程度不够是最大的问题，而基础不踏实是关键。

从实践的情况看，窃以为从C++0x如何帮助程序员简化代码的设计和书写是一个很好的入口。本质上，所有的编程都是复杂性控制，而复杂性的来源除了固有的领域复杂性外，规模导致的复杂性才是绝大部分时间我们在处理的问题。尽管期间未必是线性关系，但是简单的代码无疑具有更小的复杂性。C++正是在这样的路上。42楼 ztz0223 2010-09-19 14:01发表[回复] 最爱 c++，我的工作从来不用c++，除了偶尔做两个界面，或者在windows下面利用winsock做网络异步通信的时候用用，极少，但是c++的思想，已经影响了无数的优秀的程序员。


这里不谈c++，我觉得书籍是不是面向读者，不能看他的书籍有多少好评，得看没有他的书籍会怎么样吧。
我最喜欢的还是stevens，呵呵，如果没有他的几个系列的书籍，我（我想很多朋友也一样）是不会涉及任何unix系的编程的，因为stevens的几卷书，已经登峰造极了。然而，纵然没有meyers，我想，不会影响到大多数人对c++的取向吧。

个人观点。41楼 gongyuanh 2010-09-19 13:00发表[回复] [e02]40楼 bloodlee_hust 2010-09-19 08:02发表[回复] 学习了。。。39楼 jun6308 2010-09-17 22:41发表[回复] kanakna[e03]38楼 iamcjq_jerry 2010-09-17 15:29发表[回复] 路过.....只学过C语言.....37楼 xuyinghuai911 2010-09-17 15:29发表[回复] 学习了[e01]36楼 jamesliuguo818082 2010-09-17 13:48发表[回复] 用delphi多好啊，只是深入编程要多写几个声明几个头文件而已。但其IDE环境已经很好啦 特别是delphi2010 和VS差不多了35楼 cheniwantyou 2010-09-17 13:10发表[回复] C++将死[e03]34楼 xinhuaibuhui 2010-09-17 10:18发表[回复] 学习了，LZ是个高手。[e01][e03]33楼 tangweiwei0000 2010-09-17 09:12发表[回复] 说的真好，一句中地啊[e01][e03]32楼 HUGANGD 2010-09-17 09:06发表[回复] [e01]31楼 evercoolwei 2010-09-16 23:53发表[回复] 应该先精简以前的东西然后在往后面做....这样一味求大最后都不知道自己是做什么的了。其实原本的特性能够做的好一些的话就很够用了 JAVA和C++的定位应该不同吧.....30楼 sy8111 2010-09-16 22:31发表[回复] future是一个很棒的有利于concurrent programming的概念，参看Herb Sutter的一篇文章

Prefer Using Futures or Callbacks to Communicate Asynchronous Results

http://www.drdobbs.com/go-parallel/article/showArticle.jhtml;jsessionid=JPMPY0VG3XQK3QE1GHPSKHWATMY32JVN?articleID=22670017929楼 jiaer 2010-09-16 21:30发表[回复] 商业才是最好推动生产力发展的关键。
C++本来有很多好的机遇发展，如果当时扩充恰当，怎么会轮到现在Java C#满天飞？那个什么C++委员会干白吃的，十年审核一次，而且一次都弄不出什么个东西出来。外界对C++的发展力度越来越忽视，C++的未来是什么，在何方，真担心！
只有强大促进生产力发展的语言生命力才会旺盛，一门语言如果真的变成了纯艺术，展览品，束之高阁真是悲哀。真不希望以后在历史博物馆中才能看到C++。Re: deping_chen 2010-09-25 17:06发表[回复] 回复 jiaer：
你见过几个Java程序跑得很快？语言有自己面向的问题领域，而C++本来就没想和Java竞争。你考虑一个问题：你觉得Java可以用来写操作系统么？Re: sy8111 2010-09-16 22:47发表[回复] 回复 jiaer：

确实是这样，委员会纯学术，纯技术流，所以过于保守。一定要兼容老代码，不轻易加特性和标准库。照我看，C++要分家才行，搞个不考虑兼容的新分支出来，这样才能赢得一部分新的程序员的市场，那些重性能又重开发效率的。28楼 iwad 2010-09-16 19:27发表[回复] 商业项目中绝不敢用这些所谓的强大特性，否则死都不知道怎么死的。
C++过于复杂，带来的开发和维护成本过于高昂。两个C++程序员可以写出完全不同风格的代码，就像完全是两门语言，而且谁都无法理解对方的代码。
放弃这些奇技淫巧吧。
重复那句已经被重复1000+遍的老话：C才是王道。Re: next163 2011-07-07 11:49发表[回复] 回复iwad：我就问一句，你打算用什么C库来开发界面？除了底层，界面也是软件重要的一部分。Re: deping_chen 2010-09-25 17:02发表[回复] 回复 iwad：
你坚守着C不肯学习C++，让人怀疑你是不思进取或者学习能力差，还自以为了不起。
C才是王道。C++是C的超集，也就是说C程序员的知识是C++程序员知识的子集。都是子集了，还自以为比超集厉害，我很不明白啊。Re: morphia 2010-09-18 15:29发表[回复] 回复 iwad：你用过C么？你有读过网上开源的C代码么？什么叫做C才是王道，C的奇淫技巧也不少，你不如说用汇编才是王道，这样我有更多的理由来驳斥你。Re: matrixcoding 2010-09-17 09:58发表[回复] 回复 iwad：不知道对商业项目了解多少就敢说商业项目不敢用新特性，C++0X之前Boost已经被使用很久了。“C才是王道”？笑话，用java的还有人认为java可以通杀一切呢。语言是编程模型的抽象，C抽象的比较底层，面向机器模型，一些更高级的语言试图在更高的模型（如对象，领域）上抽象出更利于理解、编码的方式，这种努力本身就是值得肯定的，当然现在看来，囿于现在的计算机发展水平，每种语言都有各自的使用范围，长远看，这些范围的交集会越来越多。Re: iwad 2010-09-17 14:27发表[回复] 回复 matrixcoding：对于你这种敢用boost的新手，说什么都是对牛弹琴。就凭你“笑话，用java的还有人认为java可以通杀一切呢。”来驳斥“C才是王道”，就知道你的逻辑有多么混乱了。Re: matrixcoding 2010-09-17 15:47发表[回复] 回复 iwad：谁混乱还不知道呢。上来就是没有商业程序用新特性，你自己一个人就把所有的商业应用都代表了；上来就是“你这种新手”，你认识我吗，就敢这么说，你还真是口无遮拦。27楼 littlehedgehog 2010-09-16 17:59发表[回复] 回头看了看孟岩前面的文笔，发现现在笔锋犀利了许多。26楼 hhf 2010-09-16 12:51发表[回复] 我更关注专业领域，比如通信、服务器，语言本身的许多特性我都没用也没关注，用最常用大家都这么用的语法就行了，况且系统编程完全可以用c来实现。不管c++再怎么完善，那么多年来的c++旧代码还是要维护的。25楼 旭子 2010-09-16 12:37发表[回复] C++是个灾难。。。现在进入恶性循环了。。。[e06]24楼 shendl 2010-09-16 01:00发表[回复] 用C的飘过......
现在叫C++0X不合适了吧，都10年了，该叫C++1X了[e04]
现在标准出来了吗？

 呵呵，等C++标准的纯属SB。还是用GCC系列自己的语言扩展吧。

另外，C++的模板出错时的错误信息确实太不人道了[e06] 满满一大屏幕，说的都是无关的错误。
 这C++编译器也太弱智了！Re: ys19811110 2010-09-16 08:55发表[回复] 回复 shendl：

OX的X表示 0-F，也就是说在2016年前发布就不算跳票Re: shendl 2010-09-16 14:39发表[回复] 回复 ys19811110：
[e03] 哈哈 还可以这么解释啊。 
C++标准委员会这帮SB，人家语言2年一个版本，他们10几年一个版本。要么索性像C一样不说我们有什么新计划，那也行啊。
 至少Cer没有什么需要期待的!Re: morphia 2010-09-18 15:25发表[回复] 回复 shendl：CSDN专家，左一SB，右一SB，就他自己最聪明。ANSI一个月改一次C++标准你就满意了？10年一次的更改我看就非常好，一门语言是拿来用的，不是拿来学的。Re: deping_chen 2010-09-25 16:56发表[回复] 回复 morphia：
赞成，语言标准还是稳定一些好。其实C++已经无所不能了，剩下的就是让程序员的工作轻松一点。Re: shendl 2010-09-18 21:09发表[回复] 回复 morphia：
 我没说我最聪明，只是很聪明[e04]
除了C++有哪个语言草案炒作了10几年没结果的？
C++0X草案已经12年了，还没谱。也太离谱了吧！ 我头发都等白了！ 2020年也未必能出台新的标准。Re: shijf2010 2010-09-19 09:17发表[回复] 回复 shendl：回复 shendl：已经基本定稿了，新标准2011年发布。见：http://herbsutter.com/2010/08/28/trip-report-august-2010-iso-c-standards-meeting/Re: shijf2010 2010-09-19 09:14发表[回复] 回复 shendl：已经基本定稿了，新标准2011年发布。见：http://herbsutter.com/2010/08/28/trip-report-august-2010-iso-c-standards-meeting/23楼 zhangxinrally 2010-09-15 21:05发表[回复] [e08]，一项技术应用实践还是很长的，毕竟能用原来的技术解决的，我想没有几个人会用新的自己不会的技术来解决，当然，用户要求除外，但是用户会要求这个吗，他要是会，我想他会自己开发22楼 koali 2010-09-14 21:46发表[回复] c++ 确实有走火入魔的趋势，为了追求所谓的完美，让程序员去受罪21楼 bbsdkjdx_download 2010-09-14 21:02发表[回复] 孟老大归来，热烈欢迎！题目都是零下标的，顶！20楼 winterain 2010-09-14 17:35发表[回复] C++是否走火入魔了？
需要花那么大的代价去学习一门语言，值得吗？19楼 珍惜生命远离CPP 2010-09-14 16:55发表[回复] function/bind 会让代码更乱，当然用的恰当就不一样了。实际上用的不恰当的地方要远远大于用的恰当。18楼 zufeng_chen 2010-09-14 16:20发表[回复] 用boost的飘过...17楼 shijf2010 2010-09-14 15:32发表[回复] 博主提出的1,3点属于语言层次的。C++03也可实现部分lambda（见boost下面的bind,lambda,proto,phoenix）,简单应用03标准写出来的代码可以比C++0x/1x更加优美。关于第2点是老东西了，boost早几年就搞好了，如果真要写，也应该先写Concurrency。建议博主读读Herb Sutter近两年的文章。Re: shijf2010 2010-09-14 15:44发表[回复] 回复 shijf2010：比如,03标准就可以写：for_each(v.begin(),v.end(),cout&lt;&lt;_1&lt;&lt;&lt;'/n'); 比写成c++0x的优雅太多了，而且利用proto，可以高效延迟执行。
博主是国内C++的领军人物之一，应该多关心这方面。此外，auto关键字也是新的，重要的东西。
最终，我觉得，博主应该提出真正重点写：
1、auto
2、rvalue
3、bind &amp; lambda &amp; closure &amp; DSEL
4、concurrencyRe: myan 2010-09-14 19:08发表[回复] 回复 shijf2010：我只是业余玩家，绝对不是什么领军人物。C++自己构造了一个世界，你可以在里面玩一辈子。但是正如下面一个留言所问，值得吗？我关注 boost 十年了，十年前的很多库，到今天都没有被广泛接受，原因何在？如果要做C++专家就必须要去弄明白boost里那些层出不穷、稀奇古怪的库，那我宁可选作做C++菜鸟，而把精力放在专业领域。Re: chinacoding 2010-09-19 11:26发表[回复] 回复 myan：顶，我现在的公司刚刚成立了一个所谓的架构组，一帮人没事就在啃boost库，我感觉很好笑，现实生活中有很多东西我们完全可以用stl就可以实现，而且代码等可读性非常之强，没有必要弄一些所谓的高升技术来提升自身价值，个人的自身价值我觉得还是你说的那样专业领域，我理解为业务方面要很熟练Re: matrixcoding 2010-09-17 10:07发表[回复] 回复 myan：BS有句话，好像是说：使用你需要的特性（具体记不得了，大意似乎是）。没人要求掌握所有的特性才能写程序。很多人诟病C++的一个原因是C++库的难懂。很明显那是较通用的程序库，不是某个人开发的面向小范围使用的库，它需要考虑尽可能的情况，复杂性在所难免，如最新的move语义，个人写的程序可以完全避免使用move，但库不行，它必须给出足够的灵活性来满足有需要move语言的用户，这不应成为被诟病的原因。在者，C++真的很难吗，这些语言特性真的是没有使用价值而只是所谓专家的卖弄的杂耍技巧吗？我的朴素的猜测是，C++标准委员会的那些人决大部分要比我们高明，曾从事的工作的复杂度超过我们绝大部分人。Re: Ocean2006 2010-09-15 22:07发表[回复] 回复 myan：关注专业领域的同时最好了解语言的本质，才能做一个有威望的老大，呵呵！关注中16楼 saylerboxer 2010-09-14 13:03发表[回复] 好啊！15楼 lover4ever 2010-09-14 12:54发表[回复] 相当初刚学VC的时候，看了那个《MFC深入浅出》还是不知道怎么写程序，后来还是看了人家的VC实例编程那些书，照着书上一步一步地按步就搬，学会了怎么拖控件，怎么添加事件响应，怎么添加数据映射，再后来去看那个讲MFC的才大体上明白了VC是怎么回事，那些书老是一上来就直接进入主题，很多初学者根本就不知道该如何入门，14楼 zhanghlsky 2010-09-14 12:04发表[回复] [e04]13楼 j260749883 2010-09-14 10:29发表[回复] 拜读大师好文12楼 Lin-credible 2010-09-14 10:10发表[回复] 有所收获！谢谢！11楼 Preboy 2010-09-14 10:10发表[回复] 我最希望stl那些东东，在调试的时候，能较好的看内存的值，较好的理解编译提示的错误，
大量的好的新库引入当然有必要，可以是C++发展的一个方向嘛，10楼 matrixcoding 2010-09-14 09:58发表[回复] C++0x最重要的语言特性可以补上一条：decltype，有了它才知道模板代码变的多么简洁了。9楼 solo_coder 2010-09-14 09:56发表[回复] 楼主真是牛人啊！很早就知道大名了。

不过作为一个普通的c++程序员，比起绚丽的语法，我更关心的是c++能否再更稳定一些，更健壮一些Re: liigo 2010-09-14 12:18发表[回复] 回复 solo_coder：C++当然很稳定也很健壮。但是人写出来的C++代码未必很稳定很健壮。新手总是因为自己写的代码不稳定不健壮，进而怀疑C++这是不足取的。C++当然也需要提高，主要集中在：简化编程，降低程序员出错的可能性。我私下甚至怀疑，C++程序员是不是世界上负担最重的程序员。Re: solo_coder 2011-01-07 10:00发表[回复] 回复 liigo：

用C++写个库，要考虑的额外因素太多了，稍不小心就着了道，比如虚函数表，构造/析构函数等等，于是我就宁可用c来写库Re: liigo 2010-09-14 12:22发表[回复] 回复 liigo：我私下甚至怀疑，C++程序员是不是世界上“额外负担”最重的程序员。Re: budongC 2010-09-17 22:20发表[回复] 回复 liigo：EF是不是最简单高效的语言？Re: matrixcoding 2010-09-17 10:13发表[回复] 回复 liigo：C++引用了很多了“语义”，这可能是C++学习困难的一个重要原因。8楼 chenyu2202863 2010-09-14 09:33发表[回复] bind + function可以解决很多耦合性的复杂度，在模块内部，可以抛弃OOP的接口依赖，没有了多余的Interface~7楼 G_cofa 2010-09-14 09:03发表[回复] guanzhu zhong6楼 yshuise 2010-09-14 07:23发表[回复] 参数过多，也不好吧。模板特化也不是很难写吧。右值引用解决了拷贝大对象的问题，现在放在vector就不用担心效率的问题了。lambda出现哪使丑陋的写法变得相当的优雅。lambda源码很多宏，看起来也不流畅。bind还行，但没有前两者那么有魅力。模板调试是需要技巧的，vc2008就能应付模板调试的问题。5楼 zmlboss 2010-09-13 21:21发表[回复] 赞[e01]4楼 wingfiring 2010-09-12 08:43发表[回复] 从一些FP的经验来看，tuple绝对不是锦上添花的东西，而是可能改变编程style的。
static_assert完全可以大量使用，主要是没看到什么副作用。
可变模板参数用的不多，可是，确实解决了一些非常麻烦的编码问题，例如，工厂方法的参数转发，组装interface。

至于thread库，见仁见智。不过个人是非常欣赏feature库的，它可以消除大量的多线程的编码错误。Re: zju3020912063 2010-09-13 20:56发表[回复] 回复 wingfiring：个人觉得，c++不应该过度帮助程序员避免错误，而应该主要带来编码方便。你说的线程库就是最扯淡的，c++程序员居然连线程安全都搞不定，需要库的机制来避免错误真的还是不要干c++了，去做脚本比较有前途。个人还是比较希望c++语法能对智能感知友好一些，不要把语法搞得过于复杂导致智能感知器碰到比如多层迭代的模板完全没辙，什么提示都出不来，或者编译器产生高达数十行的编译错误说明。
对于模板，变参模板把原来就相当复杂的模板搞得更加复杂，能写出精美的类库当然展示了编写者的牛逼，但是当使用者面对更加诡异的编译错误或者运行错误提示的时候，变参模板的作用恐怕只是适得其反。
最让我郁闷的是模板参数约束居然给否了，用过.net就知道这是个多么重要的特性，不管是对高手还是菜鸟，能在模板实例化的第一行就发现定义错误。模板编写的时候完全不用实例化编译器就能找出是否调用了不存在的成员是个多么伟大的进步。Re: morphia 2010-09-13 23:14发表[回复] 回复 zju3020912063：个人觉得，thread库还是很有必要存在的，特别在跨平台的程序中体现特别明显。变参模版在很多情况下也是非常有用的特性，至少在写库的时候，不再需要用N+1个参数不同却又重复的宏定义来把代码搞得乱七八糟。Re: zju3020912063 2010-09-14 08:43发表[回复] 回复 morphia：我没说编写的时候有什么问题，我是说使用的时候，现在的stl就经常出现模板函数编译错误，进去一看经常是_Y._Z(_X)这样的代码编译错误，根本不知道怎么回事，只能看错误报告，结果光类定义可能就10行以上，这个函数的实例化错误说明有有好几行，太扯淡了。我搞了3年c++，现在每次看到这样的都要分析十几分钟，最后可能就是那个函数有个参数没定义成const，这不是浪费时间么。Re: moyanjwb 2011-01-13 14:37发表[回复] 回复 zju3020912063：那是你不懂，好好学习吧Re: lanzhengpeng2 2010-09-14 09:14发表[回复] 回复 zju3020912063：
三年要10多分钟,看来,每年C++经验可以减少1分钟时间----我12年C++经验,还需要2~3分钟来看完类名/函数名。Re: budongC 2010-09-17 22:16发表[回复] 回复 lanzhengpeng2：12年？[e03]对于C++,LZ还有怎么不明白的吗?Re: myan 2010-09-12 11:00发表[回复] 回复 wingfiring：谢谢你的观点。关于C++的实用风格，应该说我还是比较保守的。在实践中用FP或者TMP，我并不赞同。而据我了解，一般实际项目当中对于C++的使用会更加保守。FP和TMP这类“高级”技术，作为学习了解，当然也是好的。但我还是比较关注在传统风格里的改进点。3楼 GARY 2010-09-11 22:18发表[回复] [e01]2楼 lihuiba 2010-09-11 19:02发表[回复] 还是比较精辟的。其实开篇的“废话”是对本文的很好评价，呵呵。1楼 Phenmod 2010-09-11 16:20发表[回复] 终于开始经常更新了？坐等[e04]
 


您还没有登录,请[登录]或[注册]
 
* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场
 








个人资料

myan
 



访问：2293143次
积分：21311分
排名：第66名
.原创：163篇
转载：3篇
译文：0篇
评论：6459条
. 
文章搜索

. 
文章分类CSDN和《程序员》杂志(5)
产业(13)
技术(12)
数学(1)
杂文(4)
 
文章存档
2010年11月(1).
2010年10月(2).
2010年09月(4).
2009年05月(1).
2008年12月(2).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

展开.
 
阅读排行放弃理想，未必能成就现实(123714)
9月17日Stan Lippman访谈录文字节选(98011)
理解矩阵（一）(68792)
Linux之父话糙理不糙(54360)
技术路线的选择重要但不具有决定性(50376)
理解矩阵（二）(47508)
不同地区技术人才需求量的统计和分析(45780)
快速掌握一个语言最常用的50%(37210)
Java替代C语言的可能性(36879)
理解矩阵（三）(36696)
 
评论排行Java替代C语言的可能性(227)
Linux之父话糙理不糙(205)
周鸿祎，高司令(188)
终于有人说出来了——Java不适合于作为主要编程教学语言(185)
9月17日Stan Lippman访谈录文字节选(160)
理解矩阵（二）(156)
技术路线的选择重要但不具有决定性(155)
理解矩阵（一）(152)
动态语言，别再说不(132)
关于C++复杂性的零碎思考(131)
 
推荐文章 
最新评论 function/bind的救赎（上）
tangtangzizi: 作为一个菜鸟级程序学员，都能感觉到这篇文章写得非常好，一口气读完，虽然有一些语言大神什么的不懂，但从... 

技术路线的选择重要但不具有决定性
m1111121: 做哪类人，我目前还不想过多的考虑。但是这句很有意义：正确的态度应该是着重于你要干的事情，然后认真把这... 

对于技术术语专业化的思考
skycat1980: 呀，再补充下，我了个大去啊，都是7年前的老物了，真是相见恨晚呀。嘿嘿！ 

对于技术术语专业化的思考
skycat1980: 说的太好了，我在别处看了文章前部分，就觉得实在是鞭辟入里，十分感谢您的分析和分享！总感觉国人太把技术... 

理解矩阵（一）
moonlight_: 谢谢老师分享，这根本性问题，我都遇到过，再次感谢！ 

书非K不能读
buck_: 见了题目，第一反应还以为是评论knuth的书或者K&R那本，进来发现原来这里k是个动词。人的精力是有... 

周鸿祎，高司令
zirandeai: 孟老师说的大实话。不要仅仅从技术人员的角度看问题，企业作为一个经济体，要拿出手的是产品，拿回来的得是... 

理解矩阵（二）
fishOnFly: 吼吼，太美了！矩阵用于对变换的一种描述：从线性空间内点到点变换，到线性空间之间的点到点变换，对于后者... 

理解矩阵（一）
fishOnFly: 原来这种思维方式的术语叫做“直觉性”...和大多数路人一样，现代也考砸了，谢谢孟老师，该系列太棒了！ 

Linux之父话糙理不糙
kangear: 2007-09-08的文章，后生拜读了，很激烈！但是我看最近的语言排名是1 C 2Java3Obje... 



. 
公司简介|招贤纳士|广告服务|银行汇款帐号|联系方式|版权声明|法律顾问|问题报告京 ICP 证 070598 号北京创新乐知信息技术有限公司 版权所有世纪乐知(北京)网络技术有限公司 提供技术支持江苏乐知网络技术有限公司 提供商务支持 联系邮箱：webmaster(at)csdn.netCopyright © 1999-2012, CSDN.NET, All Rights Reserved  
