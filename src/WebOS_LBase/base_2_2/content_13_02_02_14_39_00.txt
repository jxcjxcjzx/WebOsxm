






小站观影团 ·《云图》免费观影报名ing！
 登录 注册 关注 
下一站
 












编程语言开发
 








































【程序语言】自增运算符的小小思考。
 

【求关注，求转发】

好吧，这个很多人都知道的说，我就写给还不算很清楚的人吧，如果你觉得你有更好的理解和实现方法，可以消息我哈，真心感谢。

首先，我们来看在a=1的情况下，以下六个表达式分别的值和a的值：

(1)(a++)++;

(2)(++a)++;

(3)++(++a);

(4)++(a++);

(5)(a++) + (a++) + (a++);

(6)(++a) + (++a) + (++a);

你已经有自己的答案了么？

好吧，我们来分析以下：

(1)编译错误。(2)表达式=2；a=3。(3)表达式=3；a=3(4)编译错误

对于(1)你可能觉得这时候a的值是3，表达式是1；但很遗憾，其实呢——写在后面的自加运算符，返回的是自加的值；写在前面的返回的是自加的引用。

也就是说a++就是先把a的内容复制一份放到一个内存单元里，然后自加a的值，a++作为一个表达式的值就是那个复制出来的内存单元里面的值。换句话说a++返回的不是a本身，而是一个复制了的a之前的值。相反，++a是把a加一，然后返回a的引用（a的本身）。

用编译的说法：

Statement -> var ++ 

这个产生式，是给var值加一，返回了var之前的内存的值的地址。

Statement -> ++ var

这个产生式，是给var的值加一，然后返回了var的地址。

说到这里，我想大家大概会比较明白了，也就是说其实(a++)++毫无意义，只不过给一个虚假的内存单元自增了而已，所以编译器会禁止，这个禁止在VS中叫做“非左值”，至于什么是左值，=v=先卖个关子哈。

那剩下的两个呢

对于(5),一般a=4；表达式=3；这个原因和之前说的一样。

但是(6),没有必要仔细追究，因为不同的编译器给出了不同的结果，这个结果和编译器的产生式有关系，这个产生式的关系就是结合性和优先级的问题。

对于VisualStudio2008中的CL编译器，这是表达式的值是12，原因很简单，++的优先级高于+,所以会先把所有的自增计算出来，然后在将三个自增返回的结果（a的引用）相加，这时候因为a的引用是4了（为什么呢？前面说过的哈），所以和为12.

对于GCC，表达式的值是10，这个也很简单，VS的CL编译器处于一种优化的想法，所以对于连加给出了一定的不太满足规则的编译方式；GCC并没有这样，他是先规约第一个+号两边的++，这时候前两项的和计算出来是6，加之最后一项是4，所以和为10.

好吧，接下来，大家试一试，也可以反汇编一下，看看：

(cout<<a,++a) + (cout<<a,++a) + (cout<<a,++a);

这个表达式的值是多少，输出什么哈.^_,^
 




# c语言 
# 自增 
# 运算符 
# 优先级 






16 分享2 回复8 喜欢 



















【动态类型语言的名称解析的思考】关于PHP的数组与成员问题。
 

【问题一】

今天，开了例会，SUNNER 让学姐讲解了PHP初步，小嘉阳提出一个问题，并且他解决了。

就是：
$a["love"] = 1;

$a->love = 1

的区别。

这个区别，我想写过动态语言的人都能明白，前者$a是一个数组，他的key是love的项目，赋值为1；第二个$a是一个对象，它里面的成员love赋值为1。

这个很有区别。因为数组就是一个对象，但是这个对象里面的存放的是一个数据结构，比如map，他的成员中没有love。而对象本身可以有love这个数据项。

你可能会问这个有什么区别呢？

以我个人做过的动态语言来看，动态语言在语法编译解析到$a的时候，并不知道$a的类型，所以生成了一个中间语句告诉解释器，当这时候动态分析$a的类型，并且找出成员love在$a的位置。自然$a中要记$a类型的信息。$a的类型编号和love在$a的位置，都是在编译的时候，存放到符号表里的。所以->后的值，一定要能够在符号标中找到。

而数组就不然了，数组在动态语言中是一个特殊的类型。其中的成员是木有，本身就是一个map数据结构的地址，当我们$a["love"]的时候，只不过是解析器知道$a的地址，然后强转成map，找出然后对应出love一项的位置，之后处理而已。

所以从这个角度，以上的两种方式截然不同。

但是foreach完全可以做到兼容两种方式，原因是，如果foreach检查到是数组类型，就按数组的访问方式，如果不是，只是个对象，就按照对象的访问方式。

【问题二】

$a["1"] 和$a[1] 的区别。

这个木有区别，因为动态语言是弱类型的，所以如果$a=1，他把1存为int的1的话，那就果断会引起很多问题，因为这个1完全可以作为字符串来讲，所以必须记录1的类型。依我看，这个过程有两种方法，第一种就是把数字等常量完全变成对象那个样，用对象的类型机制来解析，但这个过于麻烦和不统一，第二种就是，所有常量全部存储为字符串，然后如果用“+” 的话，就转化为数值，"."的话就直接连接。

所以，我们就看到了上面两个东西完全是等价的啦。

剩余的问题，大家可以自己动手看看就是：

$a="1abc"; $b=2; $a/$b的值是多少。

【未完待续】
 




# 动态语言 
# php 






9 分享1 回复1 喜欢1 



















怎样使用Intel编译器来加速应用程序
 



使用Intel编译器可以极大地提高应用程序在Intel处理器上的性能，通常不需要花费任何额外的代价和对代码做额外的修改（有一些不合规范的地方可能需要修改）。这一切只需要安装Intel Compiler，我们这里以Intel C++ Compiler 和 Visual Studio 2008 开发环境为例，来指导大家完成配置。



1、下载Intel C++ Compiler。电驴上有资源，可以下载。







2、最好使用虚拟光驱进行安装，这样避免了麻烦的解压和不兼容的问题。而且很绿色干净。







3、点击光驱，进行安装。







4、安装完成后，打开Visual Studio，看到多出来了Intel的工具条。点击红色圈里面的两个按钮，分别切换使用Intel编译器和VC++编译器（cl.exe），然后，就可以像我们正常的编程一样进行编译运行和测试，但我们会发现，这样编写的程序在Intel处理器上效率很高！






 




# 编译器 
# 编程语言 






10 分享 回复 喜欢 



















一秒钟变DLL —— 改造程序为动态链接库并调用
 


有时候，我们编译出来的程序需要调用其他的DLL来扩展功能，所以我们就希望复用原有的程序，于是我们就可以吧原有的程序变为DLL了哈。 第一步： 



第二步： 



第三步： 



第四步： 



第五步： 



第六步： 



第七步： 



结果。 





# dll 
# 编译 






6 分享 回复5 喜欢 



















重温小海龟LOGO语言，让我们开发我们自己的LOGO语言吧。
 

起因：

昨天在PS的时候，需要用到五角星，于是我就用标尺画图，很费眼里而且画的不准，于是我便想到了小时候的LOGO语言，觉得如果有个LOGO语言的话，那正规图真的是很方便， 今早上起来花了半个小时完成了一个简单LOGO语言编译程序。

语法：（##表示非终结符，$$表示终结符,@表示推出）

#start#@#drawer_init#

#drawer_init#@#express_list#

#express_list#@

#express_list#@#express#$;$#express_list#

#express#@$REPEAT$#number##repeat_begin#$[$#express_list#$]$

#express#@$FRONT$#number#

#express#@$BACK$#number#

#express#@$LEFT$#number#

#express#@$RIGHT$#number#

#repeat_begin#@

#express#@$PENUP$

#express#@$PENDOWN$

#express#@$ANGEL$#number#

#number#@$num$

#number#@$-$#number#

正如语法描述的，现在咱们的LOGO还很简单，不过可以随时补充哈。

一下是核心文件:[下载] 

启动程序：logo "D:\trys\drawer.dwe"




代码：

REPEAT 5

[

FRONT 200;

LEFT 144;

];

图片：


 










5 分享 回复12 喜欢 



















大家好，欢迎来到我的小站！ 











5 分享1 回复 喜欢 














RSS 归档 




203人关注
 
站长在关注
 
























研究程序设计语言和编译的小站
 
小站话题
 全部
优先级
 运算符
 自增
 c语言
 php
 动态语言
 编译器
 dll
 编译
 编程语言
 



帮助

下一篇

