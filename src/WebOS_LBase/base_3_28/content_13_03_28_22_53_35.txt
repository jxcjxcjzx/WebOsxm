

首页
开源软件
讨论区
代码分享
博客
翻译
资讯
Android
招聘


 当前访客身份：游客 [ 登录 | 加入开源中国 ] 



当前位置：讨论区 » 技术分享


软件代码讨论区新闻博客








一个 fork 的面试题

阿酷 发表于 2012-8-1 11:59 7个月前, 38回/5538阅, 最后回答: 7个月前 

讨论区 » 技术分享



Java、PHP、Ruby、iOS、Python 等 JetBrains 开发工具低至 99 元（3折），详情»



前两天有人问了个关于Unix的fork()系统调用的面试题，这个题正好是我大约十年前找工作时某公司问我的一个题，我觉得比较有趣，写篇文章与大家分享一下。这个题是这样的：

题目：请问下面的程序一共输出多少个“-”？













01

#include <stdio.h>





02

#include <sys/types.h>





03

#include <unistd.h>





04

  





05

int main(void)





06

{





07

   int i;





08

   for(i=0; i<2; i++){





09

      fork();





10

      printf("-");





11

   }





12

  





13

   return 0;





14

}



如果你对fork()的机制比较熟悉的话，这个题并不难，输出应该是6个“-”，但是，实际上这个程序会很tricky地输出8个“-”。

要讲清这个题，我们首先需要知道fork()系统调用的特性，

•fork()系统调用是Unix下以自身进程创建子进程的系统调用，一次调用，两次返回，如果返回是0，则是子进程，如果返回值>0，则是父进程（返回值是子进程的pid），这是众为周知的。
•还有一个很重要的东西是，在fork()的调用处，整个父进程空间会原模原样地复制到子进程中，包括指令，变量值，程序调用栈，环境变量，缓冲区，等等。

所以，上面的那个程序为什么会输入8个“-”，这是因为printf(“-”);语句，我们知道，Unix下的设备有“块设备”和“字符设备”的概念，所谓块设备，就是以一块一块的数据存取的设备，字符设备是一次存取一个字符的设备。磁盘、内存、显示器都是块设备，字符设备如键盘和串口。块设备一般都有缓存，而字符设备一般都没有缓存。

所以，对于上述程序，printf(“-”);把“-”放到了缓存中，并没有真正的输出（参看《C语言的迷题》中的第一题），在fork的时候，缓存被复制到了子进程空间，所以，就多了两个，就成了8个，而不是6个。

我们如果修改一下上面的printf的那条语句为：











1

printf("-\n");



或是











1

printf("-");





2

flush();





就没有问题了，因为程序遇到“\n”或是EOF，或是缓中区满，或是文件描述符关闭，或是主动flush，就会把数据刷出缓冲区。

我估计有些朋友可能对于fork()还不是很了解，那么我们把上面的程序改成下面这样：











01

#include <stdio.h>





02

#include <sys/types.h>





03

#include <unistd.h>





04

int main(void)





05

{





06

   int i;





07

   for(i=0; i<2; i++){





08

      fork();





09

      //注意：下面的printf有“\n”





10

      printf("ppid=%d, pid=%d, i=%d \n", getppid(), getpid(), i);





11

   }





12

   sleep(10); //让进程停留十秒，这样我们可以用pstree查看一下进程树





13

   return 0;





14

}





于是，上面这段程序会输出下面的结果，（注：编译出的可执行的程序名为fork）











01

ppid=8858, pid=8518, i=0





02

ppid=8858, pid=8518, i=1





03

ppid=8518, pid=8519, i=0





04

ppid=8518, pid=8519, i=1





05

ppid=8518, pid=8520, i=1





06

ppid=8519, pid=8521, i=1





07

  





08

$ pstree -p | grep fork





09

|-bash(8858)-+-fork(8518)-+-fork(8519)---fork(8521)





10

|            |            `-fork(8520)





面对这样的图你可能还是看不懂，没事，我好事做到底，画个图给你看看：



注意：上图中的我用了几个色彩，相同颜色的是同一个进程。于是，我们的pstree的图示就可以成为下面这个样子：（下图中的颜色与上图对应）



这样，对于printf(“-”);这个语句，我们就可以很清楚的知道，哪个子进程复制了父进程标准输出缓中区里的的内容，而导致了多次输出了。（如下图所示，就是我阴影并双边框了那两个子进程）



现在你明白了吧。（另，对于图中的我本人拙劣的配色，请见谅!）

（全文完）


文章来源：酷壳 – CoolShell.cn 


标签：<无> 

补充话题说明»

 


分享到 

收藏

118

举报

踩0 | 顶0



按默认排序 | 显示最新评论 | 回页面顶部共有38个评论 发表评论»




中山野鬼 回答于 2012-08-01 12:26 

举报


哈。这个事情确实挺绕的。反正我到现在，隔几年碰一下，隔几年碰一下，当时绕清楚了，过段时间又忘了。要答案我也得慢慢推导验证，才能得出。。。 



--- 共有 3 条评论 --- 回复 @mahone : 晕，这个题目是深入理解计算机系统的习题，我拿来考研究生和社招的人的。(7个月前 by 莱恩哈特)

连野鬼都要慢慢推敲 说明这题目还是有点绕人的 (7个月前 by 西门飞)

哈哈(7个月前 by mahone)

 


有帮助(0) | 没帮助(0) | 评论(3) | 引用此评论 





walden 回答于 2012-08-01 12:33 

举报


这篇帖子是精华



有帮助(0) | 没帮助(0) | 评论(0) | 引用此评论 





睡懒觉的猫 回答于 2012-08-01 12:33 

举报


 学习啦 




有帮助(0) | 没帮助(0) | 评论(0) | 引用此评论 





memeyang 回答于 2012-08-01 12:35 

举报


 确实挺绕的。 




有帮助(0) | 没帮助(0) | 评论(0) | 引用此评论 





abing_hu 回答于 2012-08-01 12:39 

举报


长见识了，我一直以为是6呢 




有帮助(0) | 没帮助(0) | 评论(0) | 引用此评论 





hbq0449 回答于 2012-08-01 12:48 

举报


这个for循环里面的fork还真是挺绕的.



有帮助(0) | 没帮助(0) | 评论(0) | 引用此评论 





thuai 回答于 2012-08-01 12:53 

举报



rss 了酷壳。。今天在上面看了这篇文章。。果断在REH5上实验 。。确实如此。。。

又在oschina看到了皓哥的这篇文章。。原来皓哥也上oschina啊。。嘿嘿。。



有帮助(0) | 没帮助(0) | 评论(0) | 引用此评论 





dodola 回答于 2012-08-01 12:58 

举报


又是这个问题



有帮助(0) | 没帮助(0) | 评论(0) | 引用此评论 





autocoder 回答于 2012-08-01 13:13 

举报


你得到的答案其实是比较容易误导人的.



有帮助(0) | 没帮助(0) | 评论(0) | 引用此评论 





ethanwang 回答于 2012-08-01 13:17 

举报







有帮助(0) | 没帮助(0) | 评论(0) | 引用此评论 

1
2
3
4
>













回评论顶部 | 回页面顶部
 

有什么技术问题吗？ 我要提问

全部(98)...阿酷的其他问题从MySQL Bug#67718浅谈B+树索引的分裂优化(0回/107阅,2个月前)
如此理解面向对象编程(28回/5030阅,3个月前)
Linux Deepin 编年史(5回/583阅,8个月前)
Dex – MongoDB索引优化工具(1回/1198阅,8个月前)

 

类似的话题
 




© 开源中国(OsChina.NET) | 关于我们 | 广告联系 | @新浪微博 | 开源中国手机版 | 粤ICP备12009483号-3
 
开源中国手机客户端：AndroidiPhoneWP7 



















