










欢迎关注2012年大连维基冬聚和2013年1月上海双周聚会。 

[关闭]


[编辑]
lex

维基百科，自由的百科全书


 跳转至： 导航、 搜索

 



在 计算机科学里面，lex是一个产生词法分析器(lexical analyzer) ("扫描仪"(scanners)或者"lexers")的程序。[1][2] Lex常常与yacc 语法分析器产生程序(parser generator)一起使用。 Lex(最早是埃里克·施密特和Mike Lesk制作)是许多UNIX系统的标准词法分析器(lexical analyzer)产生程序，而且这个工具所作的行为被详列为POSIX标准的一部分。
 
Lex读进一个代表词法分析器规则的输入字符串流，然后输出以C语言实做的词法分析器源代码。
 
虽然传统上是商业软件，但是有些根据原本AT&T代码这些版本的Lex可以以公开源代码的形式获得，并被视为某些系统的一部份，例如说OpenSolaris和贝尔实验室九号计划。 另一个有名的Lex公开源代码版本是flex，代表"快速的词法分析器"(fast lexical analyzer)
 




目录
  [隐藏]  1 lex文件的结构
 2 lex文件的示例
 3 Lex和其他工具并用 3.1 Lex和语法分析产生程序(parser generator)并用
 3.2 Lex和make
 
4 相关条目
 5 参考项目
 6 外部连接
 

[编辑] lex文件的结构
 
lex的文件结构故意设计的与yacc的文件格式相似；文件分成三个区块, 均以一个只有两个百分比符号(%)的单行来分隔，如下：
 定義區塊
%%
規則區塊
%%
C程式碼區塊
 定义区块是用来定义 宏以及导入C写成的头文件所在区块。在这里面也可以写一些C代码，这一些代码会被复制到产生出来的C源代码的开头部份。
 规则区块是最重要的区块；这里将样式与C的陈述(statement)串连在一起。这一些样式都是正则表达式。当lexer看到输入里面有合乎给定的样式时，则会操作相对应的C代码。这就是lex运作的基础。
 C代码区块 包含C的陈述与函数(function)会原封不动的照搬到产生出来的C源代码里面。这些陈述一般假设包含了在规则区块里面，各个规则分别调用的源代码。在大型程序里面，将这一些程序放在其他分开的文件并且在编译阶段作连接会更方便(在进行修改跟扩充的时候)。
 
[编辑] lex文件的示例
 
下方是一个flex 版本的lex档的示例。这只程序分辨出哪里是表示数字(整数)的字符串，并且把他们印出来。
 /*** 定義區塊 ***/

%{
/* 會直接照搬放檔頭的C code */
#include <stdio.h>
%}

/* 這裡告訴flex只要讀取輸入的檔案(不需要其他檔案)*/
%option noyywrap

%%
    /*** 規則區塊 ***/

    /* [0-9]+ 代表包含一個或多個數字的字串 */
[0-9]+  {
            /* yytext 是一個字串變數，內容是符合規則的字串本身。 */
            printf("Saw an integer: %s\n", yytext);
        }

.       {   /* 忽略所有其他的字 */   }

%%
/*** C程式碼區塊***/

int main(void)
{
    /* 呼叫lexer，然後結束程式*/
    yylex();
    return 0;
}
 
将这个文件输入给flex，它会将这个文件转换成一个C文件，文件名lex.yy.c。这个C文件可以被编译成一份可执行文件，功能为找出并且输出代表整数的字符串。 例如，给定输入:
 abc123z.!&*2ghj6
 
这只程序会印出:
 Saw an integer: 123
Saw an integer: 2
Saw an integer: 6
 
[编辑] Lex和其他工具并用
 
[编辑] Lex和语法分析产生程序(parser generator)并用
 
Lex和语法分析器产生程序，例如说Yacc或者Bison之类，常常一起使用。 语法分析器产生程序使用形式文法来分析输入字符串流(input stream)，这是Lex使用简单的正则表达式所作不到的事情 (Lex的设计被限制于只能使用有限状态自动机)。然而，语法分析器产生程序不能直接读取简单的输入字符串流– 他们需要使用一系列的单词(token)。 Lex则常常被使用来提供语法分析器产生程序这一些单词。
 
[编辑] Lex和make
 
make是一个便利程序(utility)，在这里我们用它来维护跟lex相关的程序。make假设扩展名是.l的文件是一个lex源代码文件。make内部的宏LFLAGS可以用来详列make自动触发的lex选项。[3]
 
[编辑] 相关条目
 Flex lexical analyser
 Yacc
 Ragel
 Quex
 List of C# lexer generators
 
[编辑] 参考项目
 
1.^ Levine, John R; Mason, Tony; Brown, Doug. LEX & YACC. 2. O'Reilly. 1992:  1–2. ISBN 1-56592-000-7.
 2.^ Levine, John. flex & bison. O'Reilly Media. August 2009:  304. ISBN 978-0-596-15597-1.
 3.^ make, The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition. The IEEE and The Open Group. 2004
 
[编辑] 外部连接
 Using Flex and Bison at Macworld.comCaetgory:程序设计工具
 





查看条目评分



给本文评分



这是什么？





 
可信度
 















客观性
 















完整性
 















可读性
 
















我非常了解与本主题相关的知识（可选）












提交评分










 

























4个分类：编译工具
分析器生成器
Unix编程工具
Unix SUS2008实用工具





导航菜单

 


创建新账户
登录
 



条目
讨论
 

大陆简体 











汉漢

 


阅读
编辑
查看历史
 
















首页
分类索引
特色内容
新闻动态
最近更改
随机条目
 

帮助

帮助
社区专页
方针与指引
互助客栈
询问处
字词转换
IRC即时聊天
联系我们
关于维基百科
资助维基百科
 

工具箱










 

其他语言

Česky
Deutsch
Ελληνικά
English
Español
فارسی
Magyar
Հայերեն
日本語
한국어
Nederlands
Polski
Русский
Српски / srpski
Svenska
 
本页面最后修订于2011年5月8日 (星期日) 14:07。

本站的全部文字在知识共享 署名-相同方式共享 3.0协议之条款下提供，附加条款亦可能应用。（请参阅使用条款）
 Wikipedia®和维基百科标志是维基媒体基金会的注册商标；维基™是维基媒体基金会的商标。
维基媒体基金会是在美国佛罗里达州登记的501(c)(3)免税、非营利、慈善机构。

隐私政策
关于维基百科
免责声明
移动版视图



 


