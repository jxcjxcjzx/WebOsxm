
您还未登录！|登录|注册|帮助
 首页
 业界
 移动
 云计算
 研发
 论坛
 博客
 下载
 
更多
 







Liang Tang's 专栏

技术探讨


 


目录视图
摘要视图
订阅
 . 



2013年1月当选微软MVP名单揭晓！    CSDN博客频道年终送好礼获奖名单公布！
 2012CSDN博客之星火热出炉！      2000元大奖征异构开发博文      2013年全国百所高校巡讲讲师招募 



编译原理学习导论 
.
 分类： 编译原理及技术2004-04-07 22:2512967人阅读评论(19)收藏举报
 
编译器算法数据结构yacc语言compiler

 
编译原理学习导论
 
 
 
大学课程为什么要开设编译原理呢？这门课程关注的是编译器方面的产生原理和技术问题，似乎和计算机的基础领域不沾边，可是编译原理却一直作为大学本科的必修课程，同时也成为了研究生入学考试的必考内容。编译原理及技术从本质上来讲就是一个算法问题而已，当然由于这个问题十分复杂，其解决算法也相对复杂。我们学的数据结构与算法分析也是讲算法的，不过讲的基础算法，换句话说讲的是算法导论，而编译原理这门课程讲的就是比较专注解决一种的算法了。在20世纪50年代，编译器的编写一直被认为是十分困难的事情，第一Fortran的编译器据说花了18年的时间才完成。在人们尝试编写编译器的同时，诞生了许多跟编译相关的理论和技术，而这些理论和技术比一个实际的编译器本身价值更大。就犹如数学家们在解决著名的哥德巴赫猜想一样，虽然没有最终解决问题，但是其间诞生不少名著的相关数论。
 
 
 
推荐参考书
 
虽然编译理论发展到今天，已经有了比较成熟的部分，但是作为一个大学生来说，要自己写出一个像Turboc C,Java那样的编译器来说还是太难了。不仅写编译器困难，学习编译原理这门课程也比较困难。
 
正是因为编译原理学习相对困难，那么就要求有好的教师和好的教材。教师方面不是我们能自己更改的，而在教材方面我们却可以按自己的意愿来阅读。我下面推荐几本好的编译原理的教材。我推荐的书籍都是国外的经典教材，因为在国内的教材中，确实还没发现什么让人满意的。
 
 
 
第一本书的原名叫《Compilers Principles,Techniques,and Tools》,另外一个响亮的名字就是龙书。原因是这本书的封面上有条红色的龙，也因为这本书在编译原理基础领域确实太有名气了,所以很多国外的学者都直接取名为龙书。最近机械工业出版社已经出版了此书的中文版，名字就叫《编译原理》。该书出的比较早，大概是在85或86年编写完成的，作者之一还是著名的贝尔实验室的科学家。里面讲解的核心编译原理至今都没有变过，所以一直到今天，它的价值都非凡。这本书最大的特点就是一开始就通过一个实际的小例子，把编译原理的大致内容罗列出来，让很多编译原理的初学者很快心里有了个底,也知道为什么会有这些理论，怎么运用这些理论。而这一点是我感觉国内的教材缺乏的东西，所以国内的教材都不是写给愿意自学的读者，总之让人看了半天，却不知道里面的东西有什么用。
 
第二本书的原名叫《Modern Compiler Design》,中文名字叫做《现代编译程序设计》。该书由人民邮电出版社所出。此书比较关注的是编译原理的实践，书中给出了不少的实际程序代码，还有很多实际的编译技术问题等等。此书另外一个特点就是其“现代”而字。在传统的编译原理教材中，你是不可能看到如同Java中的“垃圾回收”等算法的。因为Java这样的解释执行语言是在近几年才流行起来的东西。如果你想深入学习编译原理的理论知识，那么你肯定得看前面那本龙书，如果你想自己动手做一个先进的编译器，那么你得看这本《现代编译程序设计》。
 
第三本书就是很多国内的编译原理学者都推荐的那本《编译原理及实践》。或许是这本书引入国内比较早吧，我记得我是在高中就买了这本书，不过也是在前段时间才把整本书看完。此书作为入门教程也的确是个不错的选择。书中给出的编译原理讲解也相当细致，虽然不如前面的龙书那么深入，但是很多地方都是点到为止，作为大学本科教学已经是十分深入了。该书的特点就是注重实践，不过感觉还不如前面那本《现代编译程序设计》的实践味道更重。此书的重点还是在原理上的实践，而非前面那本那样的技术实践。《编译原理及实践》在讲解编译原理的各个部分的同时，也在逐步实践一个现代的编译器Tiny C.等你把整本书看完，差不多自己也可以写一个Tiny C了。作者还对Lex和Yacc这两个常用的编译相关的工具进行了很详细的说明，这一点也是很难在国内的教材中看到的。
 
 
 
推荐了这三本教材，都有英文版和中文版的。很多英文好的同学只喜欢看原版的书，不我的感觉是这三本书的翻译都很不错，没有必要特别去买英文版的。理解理论的实质比理解表面的文字更为重要。
 
 
 
编译原理的实质
 
前面已经说过，学习编译原理其实也就是学习算法而已，没什么特别的。只不过这些算法的产生已经形成了一套理论。下面我来看看编译原理里面到底有什么高深的理论吧。
 
 
 
几乎每本编译原理的教材都是分成词法分析，语法分析（LL算法，递归下降算法，LR算法），语义分析，运行时环境，中间代码，代码生成，代码优化这些部分。其实现在很多编译原理的教材都是按照85,86出版的那本龙书来安排教学内容的，所以那本龙书的内容格式几乎成了现在编译原理教材的定式，包括国内的教材也是如此。一般来说，大学里面的本科教学是不可能把上面的所有部分都认真讲完的，而是比较偏重于前面几个部分。像代码优化那部分东西，就像个无底洞一样，如果要认真讲，就是单独开一个学期的课也不可能讲得清楚。所以，一般对于本科生，对词法分析和语法分析掌握要求就相对要高一点了。
 
 
 
词法分析相对来说比较简单。可能是词法分析程序本身实现起来很简单吧，很多没有学过编译原理的人也同样可以写出各种各样的词法分析程序。不过编译原理在讲解词法分析的时候，重点把正则表达式和自动机原理加了进来，然后以一种十分标准的方式来讲解词法分析程序的产生。这样的做法道理很明显，就是要让词法分析从程序上升到理论的地步。
 
 
 
语法分析部分就比较麻烦一点了。现在一般有两种语法分析算法，LL自顶向下算法和LR自底向上算法。LL算法还好说，到了LR算法的时候，困难就来了。很多自学编译原理的都是遇到LR算法的理解成问题后就放弃了自学。其实这些东西都是只要大家理解就可以了，又不是像词法分析那样非得自己写出来才算真正的会。像LR算法的语法分析器，一般都是用工具Yacc来生成，实践中完全没有比较自己来实现。对于LL算法中特殊的递归下降算法，因为其实践十分简单，那么就应该要求每个学生都能自己写。当然，现在也有不少好的LL算法的语法分析器，不过要是换在非C平台，比如Java,Delphi,你不能运用YACC工具了，那么你就只有自己来写语法分析器。
 
 
 
等学到词法分析和语法分析时候，你可能会出现这样的疑问：“词法分析和语法分析到底有什么？”就从编译器的角度来讲，编译器需要把程序员写的源程序转换成一种方便处理的数据结构（抽象语法树或语法树）,那么这个转换的过程就是通过词法分析和语法分析的。其实词法分析并非一开始就被列入编译器的必备部分，只是我们为了简化语法分析的过程，就把词法分析这种繁琐的工作单独提取出来，就成了现在的词法分析部分。除了编译器部分，在其它地方，词法分析和语法分析也是有用的。比如我们在DOS,Unix,Linux下输入命令的时候，程序如何分析你输入的命令形式，这也是简单的应用。总之，这两部分的工作就是把不“规则”的文本信息转换成一种比较好分析好处理的数据结构。那么为什么编译原理的教程都最终把要分析的源分析转换成“树”这种数据结构呢？数据结构中有Stack, Line,List…这么多数据结构，各自都有各自的特点。但是Tree这种结构有很强的递归性，也就是说我们可以把Tree的任何结点Node提取出来后，它依旧是一颗完整的Tree。这一点符合我们现在编译原理分析的形式语言，比如我们在函数里面使用函树，循环中使用循环，条件中使用条件等等，那么就可以很直观地表示在Tree这种数据结构上。同样，我们在执行形式语言的程序的时候也是如此的递归性。在编译原理后面的代码生成的部分，就会介绍一种堆栈式的中间代码，我们可以根据分析出来的抽象语法树，很容易，很机械地运用递归遍历抽象语法树就可以生成这种指令代码。而这种代码其实也被广泛运用在其它的解释型语言中。像现在流行的Java,.NET，其底层的字节码bytecode,可以说就是这中基于堆栈的指令代码的。
 
 
 
关于语义分析，语法制导翻译，类型检查等等部分，其实都是一种完善前面得到的抽象语法树的过程。比如说，我们写C语言程序的时候，都知道，如果把一个浮点数直接赋值给一个整数，就会出现类型不匹配，那么C语言的编译器是怎么知道的呢？就是通过这一步的类型检查。像C++语言这中支持多态函数的语言，这部分要处理的问题就更多更复杂了。大部编译原理的教材在这部分都是讲解一些比较好的处理策略而已。因为新的问题总是在发生，旧的办法不见得足够解决。
 
 
 
本来说，作为一个编译器，起作用的部分就是用户输入的源程序到最终的代码生成。但是在讲解最终代码生成的时候，又不得不讲解机器运行环境等内容。因为如果你不知道机器是怎么执行最终代码的，那么你当然无法知道如何生成合适的最终代码。这部分内容我自我感觉其意义甚至超过了编译原理本身。因为它会把一个计算机的程序的运行过程都通通排在你面前，你将来可能不会从事编译器的开发工作，但是只要是和计算机软件开发相关的领域,都会涉及到程序的执行过程。运行时环境的讲解会让你更清楚一个计算机程序是怎么存储，怎么装载，怎么执行的。关于部分的内容，我强烈建议大家看看龙书上的讲解，作者从最基本的存储组织，存储分配策略，非局部名字的访问，参数传递，符号表到动态存储分配(malloc,new)都作了十分详细的说明。这些东西都是我们编写平常程序的时候经常要做的事情，但是我们却少去探求其内部是如何完成。
 
 
 
关于中间代码生成，代码生成,代码优化部分的内容就实在不好说了。国内很多教材到了这部分都会很简单地走马观花讲过去，学生听了也只是作为了解，不知道如何运用。不过这部分内容的东西如果要认真讲，单独开一学期的课程都讲不完。在《编译原理及实践》的书上，对于这部分的讲解就恰到好处。作者主要讲解的还是一种以堆栈为基础的指令代码，十分通俗易懂，让人看了后，很容易模仿，自己下来后就可以写自己的代码生成。当然，对于其它代码生成技术，代码优化技术的讲解就十分简单了。如果要仔细研究代码生成技术，其实另外还有本叫做《Advance Compiler Desgin and Implement》,那本书现在由机械工业出版社引进的，十分厚重，而且是英文原版。不过这本书我没有把它列为推荐书给大家，毕竟能把龙书的内容搞清楚，在中国已经就算很不错的高手了，到那个时候再看这本《Advance Compiler Desgin and Implement》也不迟。代码优化部分在大学本科教学中还是一个不太重要的部分，就是算是实践过程中，相信大家也不太运用得到。毕竟，自己做的编译器能正确生成执行代码已经很不错了，还谈什么优化呢？
 
 
 
关于实践
 
编译原理的课程毕竟还只是讲解原理的课程，不是专门的编译技术课程。这两门课程是有很大的区别的。编译技术更关注实际的编写编译器过程中运用到的技术，而原理的课关注讲解其基本理论。但是计算机科学本身就是一门实践性很强的课程，如果能够学以致用，那才叫真正的学会。李阳在讲解疯狂英语的时候就说到，只要当你会实际中运用一个单词一个词组的时候你才能叫学会了这个单词或者词组，而不是只是知道了它的拼写和意思。其实任何学习都是一样的，如果缺少了实践的结合，你不能算学会。
 
 
 
编译原理的课程主要就是讲解编译器产生的理论和原理，那么很简单，自己写个编译器就是最好的实践过程了。不过你得小心，编译系统可能是所有软件系统中最复杂的系统之一,不然为什么大学里面还会把编译器的编写开成一门叫做编译原理的课程来讲？我很佩服那些学了操作系统原理就开始自己写操作系统，学了编译原理就开始自己写编译器的人们，确实，在中国，敢这么做的学生太少了。且不管你这样做能不能做成功，至少有了这个尝试，会让你的程序设计，系统规划安排的功底增进不少。我下面给出一些关于实践过程中可能会遇到的困难，希望能够在你陷入困境的前帮你一把。
 
 
 
1.       Lex和Yacc. 这两工具是作为词法分析很语法分析的工具。如果你自己写一个编译器，我十分不建议你连词法分析这种事情都亲手来写。Lex和Yacc应该是作为每本编译原理的教材的必备内容，可是在国内的教材中缺很少看到。这两个工具是Unix系统下的小东西，如果你要在Windows中运用，那么你最好去下在cygwin这个软件。它是个在Windows下模拟Unix的东东，里面就包含了flex.exe和bison.exe(yacc)这两个工具.这两个工具使用起来还挺麻烦的(其实unix 下的很多十分有用的工具都是这样), 不过在《编译原理与实践》这本书上对于这两个工具的讲解十分详细,还列举了不少实际的例子。


 
2.       做解释型语言比做生成机器代码的编译器简单。虽然说，做解释型的编译器，像Java那样的，你还得自己去写解释器，不过这样你就不必去查找机器代码的资料了。如果你做生成的最终机器代码编译器可能会遇到问题还有就是寄存器为基础的代码生成方法。前面说过，如果你生成的是以堆栈为基础的代码，那么其代码生成过程十分简单，需要考虑的东西也不多，如果你考虑最终的机器代码生成的话，你必须考虑机器的寄存器如何分配等麻烦的问题。


 
3.       考虑用别人已经生成的语法文件，尽量不要自己动手写词法文件和语法文件.以前一个朋友曾经说过,写出一个好的程序语言的语法定义,就几乎完成了一个编译器的一半.确实是这样,语法文件的编写是个很难的事情.现在网上到处都可以找到比如C语言,C++,Java, Tiny C,Minus C等语言的词法文件和语法文件,你完全可以自己下下来来用.
 
 
 
在《编译原理及实践》的书中，作者给出了一个Tiny C的全部代码.我自我感觉作者的这个编译器做得很不错,相对于其它php,perl等语言的源代码来说,简单得多,容易看懂,而且很清晰地展现了一个完成的编译系统的实现过程.其源代码可以在作者的网站上下载.
 
 
 
后话
 
编译原理的学习可能算是一个困难的历程,特别是对于那些不对编译系统感兴趣的同学来说.既然它已经作为了大学本科的必修课程,那么就说明的它引申出来的一套理论在整个计算机科学领域还是占有相对重要的地位.
 
如果我们考究一下历史,就会发现很多被称为程序设计大师的人都是编译领域的高手.写出第一个微型机上运行的Basic语言的比尔盖茨,设计出Delphi的Borland的”世界上最厉害的程序员”, Sun的JAVA之父, 贝尔实验室的C++之父…
 
 
 
分享到： 

上一篇：从lex&yacc说到编译器（通讯录问题 1）
下一篇：安装配置ASP.NET
 . 


查看评论
 
19楼 xunux 2012-12-10 22:16发表[回复] mark18楼 jeccey 2012-11-21 08:52发表[回复] 感觉LZ写的很好，对对学习很有帮助17楼 cnnero 2011-09-06 16:05发表[回复] mark.16楼 g 2008-09-02 09:42发表[回复] y15楼 bbb 2008-09-02 09:41发表[回复] d14楼 chinaren0001 2008-07-04 11:10发表[回复] 非常感谢，正开始学习。13楼 fucking bsd 2008-06-10 11:30发表[回复] to bsd:
你TM是条野狗啊12楼 tangl_99 2007-03-30 01:40发表[回复] 找那么多开源来看，还不如把大学课本好好读懂。11楼 cchuier 2007-03-29 19:27发表[回复] 哎 现在的人...真浮...

还弄个设计出delphi的什么什么的 连anders的名字都记不住

这是啥文章呀 看完了鲸书龙书又能咋地 都不如找个开源的好好看看10楼 eiyaa 2006-11-12 10:57发表[回复] to bsd: <br>讨论问题不需要用这么激烈的言辞，而且你显然把问题理解错了。 <br> <br>to 楼主： <br>你这篇文章写的非常好，我现在正在自学编译原理，是以清华大学的《编译原理》和你提到的《编译原理及实践》这两本书来学习的。感觉《编译原理及实践》翻译的不是太好，看起来比较费劲，好处是理论性不是很强，容易接受。我是这两本书交叉学习，互相补充，目前看完了LALR(1)语法分析之前的内容。我觉得楼主关于学习编译原理的几点建议对我很有启发，再次感谢。9楼 onlyflyer 2006-04-11 02:29发表[回复] 更正一个小错误： <br>Fortran的第一个编译器是花了18人年完成的，不是18年。fortran是1957年完成的，如果是用了18年，那么岂不是从1939就开始设计fortran编译器了，那会电子计算机还没有产生呢。8楼 tangl_99 2006-04-11 08:43发表[回复] to onlyflyer: <br> 谢谢提示！ <br>7楼 tangl_99 2006-02-02 12:57发表[回复] to bsd: <br>1. 你自己都引用了“微型机”，为什么自己却没看清楚“第一个微机机”这个范围限定词？ <br>2.Delphi是基于Pascal的，Anders当年加入borland就是拿着他的pascal编译器去的，而不是Delphi这个IDE，那个时候还没有Delphi.6楼 bsd的问题 2006-02-02 10:16发表[回复] 写出第一个微型机上运行的Basic语言的比尔盖茨,设计出Delphi的Borland的”世界上最厉害的程序员”, <br>这个纯是胡说八道,老比根本不是第一个写出basic语言得人,写出basic语言的人都是美国军方的科学家,另外,delphi不是编译器,delphi只是带有编译器的ide,这一点儿都不知道就在那里乱写文章,我看这个纯是一个骗子5楼 旭子 2005-01-31 11:41发表[回复] 好文章，支持。4楼 sorry 2004-11-20 18:43发表[回复] //梁肇新讲：中国就不要做编译器了（见《编程高手箴言》）。 <br> <br>这句话就像说: 中国就不要种大米了(美国有进口)...3楼 lxutao 2004-11-10 20:40发表[回复] http://www.shouji88.com/os/msg_show.cgi?bbs_id=000002&amp;id=0000105 <br> <br>我也很关注中国的os和cmp，但，呵呵 <br>这位前辈，有空过去看看吧 <br>========================= <br>http://www.shouji88.com/os/index.htm <br>=========================2楼 lxutao 2004-10-21 15:16发表[回复] 请问，您说的前两本书的中文和英文版您那里有电子版的吗？？ <br>我很想见识见识！！！！！！！！ <br>可以有空的时候发到我的邮箱吗？？ <br> <br>============ <br>lxutao@gmail.com <br>============1楼 lxutao 2004-10-20 21:34发表[回复] 《编译原理及实践》,看过这本书，确实是好书！ <br>想说的太多，呵呵，怎么说呢！ <br>http://blog.csdn.net/lxutao <br>希望以后有时间能写一些编译方面的东西在上面。 <br> <br>//梁肇新讲：中国就不要做编译器了（见《编程高手箴言》）。 <br>
 


您还没有登录,请[登录]或[注册]
 
* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场
 








个人资料

tangl_99
 



访问：561210次
积分：8374分
排名：第309名
.原创：204篇
转载：37篇
译文：0篇
评论：814条
. 
文章搜索

. 
文章分类.NET(2)
Android(1)
Apple开发(2)
ASP.NET学习(3)
C#(2)
GBA开发技术(5)
J2me开发经历(16)
Java技术(8)
JVM研究(4)
Operating System(18)
P2P(2)
Python(4)
Symbian探索日记(12)
Web开发(4)
图形学和实时渲染(4)
学习和工作(74)
数据库与知识工程(31)
汇编程序(4)
算法与程序设计(33)
编译原理及技术(12)
计算机网络(10)
随笔(79)
 
文章存档
2012年01月(2).
2011年09月(1).
2011年03月(1).
2010年11月(1).
2010年05月(1).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

展开.
 
阅读排行值得回忆的本科四年学习(13-14)(18878)
编译原理学习导论(12967)
深入了解C语言(局部变量的定义)(9920)
是一种激励还是一种打击！！---三张offer(转贴)(9244)
GBA探索日记(-)(9067)
计算机真的是随便其他专业的学生都可以抢饭碗的吗？(8944)
GBA程序开发入门3(8356)
j2me游戏引擎程序结构(8298)
值得回忆的本科四年学习(1-6)(8180)
MIT的算法导论课程资料(7965)
 
评论排行计算机真的是随便其他专业的学生都可以抢饭碗的吗？(93)
值得回忆的本科四年学习(13-14)(43)
值得回忆的本科四年学习(1-6)(32)
Motorola V180,V501,V600,C650等在JBuilder开发环境的配置(30)
编译KVM(29)
j2me游戏引擎程序结构(27)
北大牛人唐翔(贴一篇文章激励一下自己)(26)
川大计算机学院的牛人走的都是同一条道路(21)
是一种激励还是一种打击！！---三张offer(转贴)(20)
编译原理学习导论(19)
 
推荐文章 
最新评论 编译原理学习导论
xunux: mark 

编译原理学习导论
jeccey: 感觉LZ写的很好，对对学习很有帮助 

批量增加文件头注释的python小程序
ningyihan: 怎么用啊？ 

整理一些Markov Random Field以及Graph Model的基础学习资料
CanaanShen: mark~ 

MIT的算法导论课程资料
h_d_yue: 计算机应用中的计算机网络不错，是李志蜀老师带的，项目挺多的，很能锻炼人！ 

MIT的算法导论课程资料
WA__A_DM: 呵呵，讲的不错，继续努力加油！！！ 

计算机真的是随便其他专业的学生都可以抢饭碗的吗？
醉马不肖: 悲哀 

利用正则表达式替换功能，将C++注释转变成纯C的注释
richyhuang: 老兄,你试过没，你是用那个编辑器啊,我用了UEstudio12.0反正是不行。 

整理一些Markov Random Field以及Graph Model的基础学习资料
simon900314: MARK~~ 

整理一些Markov Random Field以及Graph Model的基础学习资料
HuangSeven77: mark～ 



. 
公司简介|招贤纳士|广告服务|银行汇款帐号|联系方式|版权声明|法律顾问|问题报告京 ICP 证 070598 号北京创新乐知信息技术有限公司 版权所有世纪乐知(北京)网络技术有限公司 提供技术支持江苏乐知网络技术有限公司 提供商务支持 联系邮箱：webmaster(at)csdn.netCopyright © 1999-2012, CSDN.NET, All Rights Reserved  








程序员杂志ipad1.2版发布送半年杂志
 
