您还未登录！|登录|注册|帮助首页业界移动云计算研发论坛博客下载
更多
zkf11387的专栏
目录视图摘要视图订阅
亲，“社区之星”已经一周岁了！        百度Clouda的初步探索      Tag功能介绍—我们为什么打Tag      订阅CSDN社区周刊，及时了解社区精华内容
 oracle什么时候需要commit
2012-06-05 10:37 1882人阅读 评论(0) 收藏 举报
oracle数据库inserttablestructuredelete
今天在oracle的SQL plus 中执行了删除和查询操作，然后在PL/SQL中也执行查询操作，语句一样，结果却不一样，让我大感郁闷，后来才突然想到可能是两边数据不一致造成的，但是为什么不一致呢，就是没用commit，

在网上查了一下，大概是这样说的：

DML语言，比如update，delete，insert等修改表中数据的需要commit;
DDL语言，比如create，drop等改变表结构的，就不需要写commit（因为内部隐藏了commit）;

DDL 数据定义语言：
create table 创建表   
alter table 修改表   
drop table 删除表   
truncate table 删除表中所有行   
create index 创建索引   
drop index 删除索引
当执行DDL语句时，在每一条语句前后，oracle都将提交当前的事务。如果用户使用insert命令将记录插入到数据库后，执行了一条DDL语句(如create
table)，此时来自insert命令的数据将被提交到数据库。当DDL语句执行完成时，DDL语句会被自动提交，不能回滚。

DML 数据操作语言：
insert 将记录插入到数据库  
update 修改数据库的记录  
delete 删除数据库的记录
当执行DML命令如果没有提交，将不会被其他会话看到。除非在DML命令之后执行了DDL命令或DCL命令，或用户退出会话，或终止实例，此时系统会自动
发出commit命令，使未提交的DML命令提交。


DDL  ：
Data Definition Language (DDL) statements are used to define the database structure or schema. Some examples:

CREATE - to create objects in the database

ALTER - alters the structure of the database

DROP - delete objects from the database

TRUNCATE - remove all records from a table, including all spaces allocated for the records are removed

COMMENT - add comments to the data dictionary

RENAME - rename an object

DML：

Data Manipulation Language (DML) statements are used for managing data within schema objects. Some examples:

SELECT - retrieve data from the a database

INSERT - insert data into a table

UPDATE - updates existing data within a table

DELETE - deletes all records from a table, the space for the records remain

MERGE - UPSERT operation (insert or update)

CALL - call a PL/SQL or Java subprogram

EXPLAIN PLAN - explain access path to data

LOCK TABLE - control concurrency

DCL

Data Control Language (DCL) statements. Some examples:

GRANT - gives user's access privileges to database

REVOKE - withdraw access privileges given with the GRANT command

TCL

Transaction Control (TCL) statements are used to manage the changes made by DML statements. It allows statements to be grouped together into logical transactions.

COMMIT - save work done

SAVEPOINT - identify a point in a transaction to which you can later roll back

ROLLBACK - restore database to original since the last COMMIT

SET TRANSACTION - Change transaction options like isolation level and what rollback segment to use

锁概念基础


数据库是一个多用户使用的共享资源。当多个用户并发地存取数据时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。

加锁是实现数据库并发控制的一个非常重要的技术。当事务在对某个数据对象进行操作前，先向系统发出请求，对其加锁。加锁后事务就对该数据对象有了一定的控制，在该事务释放锁之前，其他的事务不能对此数据对象进行更新操作。

在数据库中有两种基本的锁类型：排它锁（Exclusive Locks，即X锁）和共享锁（Share Locks，即S锁）。当数据对象被加上排它锁时，其他的事务不能对它读取和修改。加了共享锁的数据对象可以被其他事务读取，但不能修改。数据库利用这两种基本的锁类型来对数据库的事务进行并发控制。



Oracle数据库的锁类型

根据保护的对象不同，Oracle数据库锁可以分为以下几大类：DML锁（data locks，数据锁），用于保护数据的完整性；DDL锁（dictionary locks，字典锁），用于保护数据库对象的结构，如表、索引等的结构定义；内部锁和闩（internal locks and latches），保护数据库的内部结构。

DML锁的目的在于保证并发情况下的数据完整性，。在Oracle数据库中，DML锁主要包括TM锁和TX锁，其中TM锁称为表级锁，TX锁称为事务锁或行级锁。

当Oracle 执行DML语句时，系统自动在所要操作的表上申请TM类型的锁。当TM锁获得后，系统再自动申请TX类型的锁，并将实际锁定的数据行的锁标志位进行置位。这样在事务加锁前检查TX锁相容性时就不用再逐行检查锁标志，而只需检查TM锁模式的相容性即可，大大提高了系统的效率。TM锁包括了SS、SX、S、X 等多种模式，在数据库中用0－6来表示。不同的SQL操作产生不同类型的TM锁。

在数据行上只有X锁（排他锁）。在 Oracle数据库中，当一个事务首次发起一个DML语句时就获得一个TX锁，该锁保持到事务被提交或回滚。当两个或多个会话在表的同一条记录上执行 DML语句时，第一个会话在该条记录上加锁，其他的会话处于等待状态。当第一个会话提交后，TX锁被释放，其他会话才可以加锁。

当Oracle数据库发生TX锁等待时，如果不及时处理常常会引起Oracle数据库挂起，或导致死锁的发生，产生ORA-60的错误。这些现象都会对实际应用产生极大的危害，如长时间未响应，大量事务失败等。
更多 0
下一篇：散列表（哈希表）工作原理<转>

查看评论

  暂无评论

您还没有登录,请[登录]或[注册]
* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场

 TOP
核心技术类目
全部主题 数据挖掘 SOA UML 开放平台 HTML5 开源 移动开发 iOS Android 移动游戏 Windows Phone JavaScript CSS 游戏引擎 云计算 大数据 Hadoop OpenStack 云平台 PHP MongoDB JSON Xcode Node.js 前端开发 神经网络 安全 Java .NET MySQL textview BigTable web框架 SQL Redis CouchDB Linux 可穿戴计算 NoSQL Ruby API GPL XAML ASP.NET 前端开发 虚拟化 框架 机器学习 数据中心 IE10 敏捷 集群
个人资料
 访问我的空间 
zkf11387
 
访问：8055次
积分：169分
排名：千里之外
原创：6篇转载：20篇译文：0篇评论：0条
文章搜索

文章分类
Oracle(0)
数据结构与算法(2)
正则表达式(0)
网络通信(5)
多线程(1)
C语言(2)
C++(5)
makefile(2)
gdb(2)
Lua(1)
shell(1)
文章存档
2013年06月(1)
2012年10月(1)
2012年09月(4)
2012年08月(1)
2012年07月(4)
展开
阅读排行
oracle什么时候需要commit(1882)
linux下socket通信程序例子(1118)
为什么需要字节对齐？(1092)
：>/dev/null 2>&1 的作用(452)
Linux下多路复用IO接口 epoll select poll 的区别(405)
Unix多线程编程技术(387)
组合，关联，聚合的区别(382)
Linux并发服务器代码实现(236)
简单工厂模式,工厂方法模式,抽象工厂模式 比较(221)
程序员必须掌握的基本正则表达式<转>(161)
评论排行
oracle什么时候需要commit(0)
GDB调试程序（一）(0)
GDB调试程序（二）(0)
C++面试题收集(0)
shell笔记(0)
各种排序算法实例(0)
Lua脚本入门(0)
MakeFile例子(0)
：>/dev/null 2>&1 的作用(0)
技术网站地址(0)
推荐文章

公司简介|招贤纳士|广告服务|银行汇款帐号|联系方式|版权声明|法律顾问|问题报告
QQ客服 微博客服 论坛反馈 联系邮箱：webmaster@csdn.net 服务热线：400-600-2320
京 ICP 证 070598 号
北京创新乐知信息技术有限公司 版权所有
世纪乐知(北京)网络技术有限公司 提供技术支持
江苏乐知网络技术有限公司 提供商务支持
Copyright © 1999-2012, CSDN.NET, All Rights Reserved GongshangLogo
  
close


