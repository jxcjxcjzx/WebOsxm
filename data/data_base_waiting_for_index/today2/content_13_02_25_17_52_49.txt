装配中的脑袋
用大脑装配程序，再用程序装配大脑

随笔- 58  文章- 0  评论- 1125 
博客园  首页  新随笔  新文章  联系  管理  订阅 
自己动手开发编译器（三）有穷自动机
上回我们说到用正则表达式来表示词法分析中的单词规则。正则表达式的规则很容易理解，但是正则表达式并不能直接用来解析字符串，我们还要引入一种适合转化为计算机程序的模型。今天我们引入的这种模型就叫做有穷自动机（finite automation，FA）,有时也叫有穷状态机（finite state machine）。有穷自动机首先包含一个有限状态的集合，还包含了从一个状态到另外一个状态的转换。有穷自动机看上去就像是一个有向图，其中状态是图的节点，而状态转换则是图的边。此外这些状态中还必须有一个初始状态和至少一个接受状态。下面的图展示了一个有穷自动机，有根从外边来的箭头指向的状态表示初始状态，有个黑圈的状态是接受状态：

 



 

现在我们来看看有穷自动机怎么处理输入的字符串：

一开始，自动机处于初始状态
输入字符串的第一个字符，这时自动机会查询当前状态上与输入字符相匹配的边，并沿这条边转换到下一个状态。
继续输入下一个字符，重复第二步，查询当前状态上的边并进行状态转换
当字符串全部输入后，如果自动机正好处于接受状态上，就说该自动机接受了这一字符串。
刚才我们画的自动机，假如输入的字符串是"hello"（带引号）。一开始状态机处于状态1，输入引号以后就沿引号的边转换到了状态2；接下来输入hello都会沿着a-z这条边回到状态2，最后输入引号，转换到了状态3。由于状态3是接受状态，那么这个自动机就会接受这个字符串。而如果字符串是"abc（不带后面的引号），那么当字符串输入完毕之后自动机会处在状态2，而状态2不是接受状态，所以这个自动机就不接受"abc这个字符串。一个自动机接受的所有字符串组成的集合称作这个自动机的语言。这里语言的概念和上一回我们介绍正则表达式的语言概念是一样，都表示一个有限字符集上的字符串集合。

 

上面我们画的自动机是一个确定性有穷自动机（DFA），其特点是从每一个状态只能发出一条具有某个符号的边。也就是说不能出现同一个符号出现在同一状态发出的两条边上。但是，还有一种非确定性有穷自动机（NFA），它允许从一个状态发出多条具有相同符号的边，甚至允许发出标有ε（表示空）符号的边，也就是说，NFA可以不输入任何字符就自动沿ε边转换到下一个状态。下图展示了一个非确定性有穷自动机：

 



 

非确定性有穷自动机在遇到两条边上有相同的符号，会选择哪一边呢？遇到ε边到底会转移还是不会转移呢？答案是，NFA会自动猜测应该选择哪一条边，而且每次都能猜对。比如说，上面的NFA，假如输入字符串是aa，它就会选择右边这条路径，并且接受这个字符串；假如输入字符是aaa，它就会走左边这条路径，并接受字符串。它绝不会在输入字符是aaa的时候选择右边路径然后做出不接受这一判断。由于我们的计算机并没有这种“猜测”能力，大家可能会对NFA具有这种能力感到奇怪。有些人在刚刚接触这些概念的时候可能会觉得NFA因为具有自动猜测的能力，应该要比DFA更加强大。但事实上是，DFA、NFA和正则表达式是等价的，任何NFA都存在一个与之接受同样语言的DFA，和一个定义相同语言的正则表达式；同理任何正则表达式，也存在一个接受其所定义语言的NFA和一个DFA。这三种模型虽然定义迥然不同，但却表示同样的正则语言。幸运的是，只需要很简单的规则，就能把任何正则表达式转化成NFA，而任何一个NFA又都可以转化为DFA，这样我们就能把正则表达式转化为易于编程的DFA，来真正进行词法分析的工作。（注，也有正则表达式引擎直接模拟NFA的运行来解析字符串，有兴趣的读者可以自行寻找有关的资料。）

 

现在我们来看怎么把正则表达式转化为NFA。我们上次学到正则表达式有两种基本要素——字符表达式和ε表达式，以及三种基本运算——并、连接和闭包。首先我们来看最基础的ε表达式，它的NFA是这样的：



接下来是字符表达式a，它的NFA是这样：



所有正则表达式都可以转化为一个有一条输入边，以及一个接受状态的的正则表达式，我们先假设一个一般的正则表达式的NFA是这样：



然后我们定义两个正则表达试的并运算，X|Y的NFA为：（实际应用中，常常可以简化掉一部分ε转换边）



两个这正则表达式的连接运算，XY的NFA为：



一个正则表达式的克林闭包运算，Y*的NFA为：



 

递归运用以上规则，就可以把任何正则表达式转化为NFA。我们来试试看。上次研究了标识符的正则表达式[a-z][a-z0-9]*，运用以上规则，转换成的NFA是：



词法分析时，我们要把所有的单词的正则表达式分别转换成NFA，然后用“并”的关系将所有NFA连接到一起，就成了词法分析所需的最终NFA。

 

下面我们来看看上述逻辑在VBF.Compilers中是如何实现的。上次我们定义了一个RegularExpression基类和它的五个子类，分别对应于正则表达式的基本要素和基本运算。考虑到将正则表达式转换为NFA是一个相对独立的操作，所以我们采用Visitor模式，定义一个抽象类作为Visitor:

public abstract class RegularExpressionConverter<T>
{
    protected RegularExpressionConverter() { }

    public T Convert(RegularExpression expression)
    {
        if (expression == null)
        {
            return default(T);
        }

        return expression.Accept(this);
    }

    public abstract T ConvertAlternation(AlternationExpression exp);

    public abstract T ConvertSymbol(SymbolExpression exp);

    public abstract T ConvertEmpty(EmptyExpression exp);

    public abstract T ConvertConcatenation(ConcatenationExpression exp);

    public abstract T ConvertAlternationCharSet(AlternationCharSetExpression exp);

    public abstract T ConvertStringLiteral(StringLiteralExpression exp);

    public abstract T ConvertKleeneStar(KleeneStarExpression exp);
}
然后我们给RegularExpression类加上一个Accept抽象方法，让其子类分别实现。比如，KleeneStarExpression类的Accept就可以写成这样：

internal override T Accept<T>(RegularExpressionConverter<T> converter)
{
    return converter.ConvertKleeneStar(this);
}
最后我们实现一个NFAConverter，实现抽象类RegularExpressionConverter<NFAModel>。其中NFAModel是我们自己定义的NFA对象模型，其中定义了状态节点、边等概念。下面就是NFAConverter中翻译克林闭包的规则：

public override NFAModel ConvertKleeneStar(KleeneStarExpression exp)
{
    var innerNFA = Convert(exp.InnerExpression);

    var newTail = new NFAState();
    var entry = new NFAEdge(newTail);

    innerNFA.TailState.AddEmptyEdgeTo(newTail);
    newTail.AddEdge(innerNFA.EntryEdge);

    var kleenStarNFA = new NFAModel();

    kleenStarNFA.AddStates(innerNFA.States);
    kleenStarNFA.AddState(newTail);
    kleenStarNFA.EntryEdge = entry;
    kleenStarNFA.TailState = newTail;

    return kleenStarNFA;
}
代码应当是相当直观的，它就是重复上面画图的逻辑，先将克林闭包内部的表达式转换成NFA，再创建一些辅助的外围状态和相应的状态转换。

 

有了从正则表达式转换到NFA的算法之后，我们还需要NFA到DFA的转换。这个转换算法称作“子集构造”。我们前面说过NFA遇到同一状态发出带有同一符号的不同的边时，能自动猜测转移到哪一边。而子集构造的思想就是不猜测NFA会转移到哪个状态，而是假设NFA能同时处于所有可能的状态。比如，我们重新考虑前面最开始展示的NFA。一开始，这个NFA的初始状态就包含两个ε转换，我们假设NFA能同时处于所有这种ε转换的目标状态上，也就是说它的初始状态其实是三个状态的集合：



我们称这三个状态为初始状态的ε-闭包（ε-closure）。接下来，如果输入了字符a，那么NFA就可以从当前状态的ε-闭包内任何状态开始，通过字符a的边进行状态转换。这时，我们就得到NFA的下一个状态：



接下来再次输入字符a，我们也可以从当前状态集合出发，找到下一个状态集合：



如果字符串到此为止，这时NFA的状态集合中包含了一个接受状态，因此NFA决定接受字符串“aa”。也就是说，这次没有用到猜测能力，就成功地解析了aa这个字符串。这样我们就了解到，一定存在一个DFA，它的每个状态都是NFA状态的的一个子集。下面我简单转述一下虎书中有关子集构造算法。令edge(s, c)表示从状态s沿着标有字符c的边可以达到的所有NFA状态的集合。对状态集合S，closure(S)是从S中的状态出发，无需接受任何字符，只沿ε边就可以达到的状态组成的集合，可以用迭代法来求出：



接下来我们定义输入一个字符之后的动作规则，从NFA状态集合d中的状态出发，输入符号c，所能达到的NFA的新的状态集合记作DFAedge(d, c)，它定义为



最后，假设构成语言的字符集是Σ，构造出整个DFA的算法是：



以上代码在理解了子集构造的基本原理之后很容易就能够转换成代码。VBF.Compilers中的NFA->DFA转换代码比较长，我就不贴在这里了，有兴趣的可以到github上自行下载。

 

将正则表达式通过NFA最后转化为DFA之后，如何进行真正的字符串扫描工作就是水到渠成的工作了。我们下一篇将介绍具体的做法，以及针对Unicode字符集的处理方式。下一篇我还会介绍VBF.Compilers.Scanners类库的基本用法。如果大家不想自己实现整套算法，那么下回就可以参考我的文章，用VBF库制造出任意的词法分析器来。所以，敬请期待下一篇！

此外别忘了关注我的VBF项目：https://github.com/Ninputer/VBF 和我的微博：http://weibo.com/ninputer 多谢大家支持！

绿色通道： 好文要顶 关注我 收藏该文与我联系 
装配脑袋
关注 - 8
粉丝 - 626
荣誉：推荐博客
+加关注
21 0
(请您对文章做出评价)
« 博主上一篇：自己动手开发编译器（二）正则语言和正则表达式
» 博主下一篇：自己动手开发编译器（四）利用DFA转换表建立扫描器
« 首页上一篇：【原创·教程·连载】《Android之大话设计模式》--设计模式之结构型模式 第十二章：桥接模式 最重要的是有一颗让MM快乐的心
» 首页下一篇：Silverlight画笔
 posted on 2011-06-10 22:10 装配脑袋 阅读(8295) 评论(48) 编辑 收藏


评论
#1楼    
 testzhangsan   | 2011-06-10 22:19
等你这篇很久了！
支持(0)反对(0)
#2楼    
 李天时   | 2011-06-10 22:21
其实我觉得与编译器有关的算法很重要，只不过大家认为编译器不能直接产生经济价值，所以大家不关心，我在工作中用到过很多次与编译器有关的算法。
支持(0)反对(0)
#3楼    
 横刀天笑   | 2011-06-10 22:24
抢到沙发了？
支持(0)反对(0)
#4楼    
 横刀天笑   | 2011-06-10 22:25
没有抢到沙发。。。早知道我就先抢沙发再看。
脑袋，你写的比编译原理那书好懂多了。
支持(0)反对(0)
#5楼    
 卡索   | 2011-06-10 22:27
hehe...好文
支持(0)反对(0)
#6楼    
 Tony Zhou   | 2011-06-10 22:50
牛
支持(0)反对(0)
#7楼    
 G yc {Son of VB.NET}   | 2011-06-11 00:18
沙发被抢了

先支持一下～
支持(0)反对(0)
#8楼    
 G yc {Son of VB.NET}   | 2011-06-11 00:54
唉， 代码看了几遍， 
还没能理解， 
一直在转圈。。。。


公式看到后，
恩， 
我已经烧掉了！
支持(0)反对(0)
#9楼[楼主]    
 装配脑袋   | 2011-06-11 01:02
@G yc {Son of VB.NET}
下次我会放个VB的例子进去的。。
支持(0)反对(0)
#10楼    
 G yc {Son of VB.NET}   | 2011-06-11 01:05
引用
装配脑袋：
@G yc {Son of VB.NET}
下次我会放个VB的例子进去的。。

脑袋，你真是太伟大了！

支持(0)反对(0)
#11楼    
 地狱门神   | 2011-06-11 02:18
感觉用状态机来做词法分析对付像多行可嵌套注释块、字符串常量之类的东西比较容易。可以直接在特定情况回溯，以及记录额外的嵌套层数之类的信息。
不过这种貌似不是有限自动机了。
支持(0)反对(0)
#12楼    
 老马睡不醒   | 2011-06-11 08:08
谢谢楼主分享，期待下一篇。
支持(0)反对(0)
#13楼    
 Treenew Lyn   | 2011-06-11 08:43
擦……持续关注。
支持(0)反对(0)
#14楼    
 李天时   | 2011-06-11 09:53
想不到我居然是2楼，昨晚真幸运
支持(0)反对(0)
#15楼    
 huyong   | 2011-06-11 10:37
不错。
支持(0)反对(0)
#16楼    
 gtts   | 2011-06-11 11:11
对强沙发不敢兴趣，只对这文章感兴趣
支持(0)反对(0)
#17楼    
 诺贝尔   | 2011-06-11 11:34

不明白为什么要将正则表达式转成非确定有穷自动机,然后再转成确定性有穷自动机.

既然他们是等价的,为什么不一开始就用最简单的表示方式?

还有,"闭包"为什么叫"闭包"这种奇奇怪怪的名字.

最后的公式看到人都晕了.

对非确定性有穷自动机的表述,好像神话:"NFA会自动猜测应该选择哪一条边，而且每次都能猜对。",你还不如说NFA是不存在的理论产物,人类无法实现,只能转化为DFA.

但是后面的转换方法就说得不是很明了.最好给个具体的实例,演示一下转换过程.



支持(0)反对(0)
#18楼[楼主]    
 装配脑袋   | 2011-06-11 12:15
@诺贝尔
虽然是等价的，但是没有一个简便直观的算法把正则表达式转换成DFA，但是正则->NFA和NFA->DFA都存在简便的算法。
NFA你都觉得神奇，那么非确定性下推自动机，非确定性图灵机就更神奇了，它们的“猜测”能力甚至是用计算机没法模拟的。
闭包这个词，跟lambda表达是捕获变量的那种“闭包”没有任何关系，只是一个名词而已。
支持(0)反对(0)
#19楼[楼主]    
 装配脑袋   | 2011-06-11 12:30
我参考了三本书，龙书虎书和专门讲自动机的书，里面的子集构造的算法都起码要求懂一点集合的数学符号。相比之下虎书的公式最容易转化成代码，所以我就挑了虎书的公式。

我的观点就是，硬着头皮看，总能看懂的呵呵。
支持(0)反对(0)
#20楼    
 诺贝尔   | 2011-06-11 12:41
@装配脑袋
这一篇开始就走曲高和寡路线了?
支持(0)反对(0)
#21楼    
 wolfwzr   | 2011-06-11 13:04
学习中
支持(0)反对(0)
#22楼    
 风中追爱   | 2011-06-11 14:17
稍微有点晕了。
支持(0)反对(0)
#23楼    
 空明流转   | 2011-06-11 18:00
@诺贝尔
NFA是说，你确定是有解的，但是你不知道怎么解，因为很多路线都是可走可不走的。
DFA是说，不光他有解，而且你还知道怎么解。因为他在转换的过程当中，把所有模棱两可的情况都做了推测然后干掉那些没用的。
支持(0)反对(0)
#24楼[楼主]    
 装配脑袋   | 2011-06-11 19:26
鉴于有些同学的要求，下一篇开头我给一个NFA到DFA的例子。。
支持(0)反对(0)
#25楼    
 陈国立   | 2011-06-11 21:02
博主写得相当给力，我看了两遍总算看明白了一点
支持(0)反对(0)
#26楼    
 陈国立   | 2011-06-11 21:37
希望博主继续努力，也不要受大家影响，按照你原来的想法继续进行！持续关注！
支持(0)反对(0)
#27楼    
 infinte   | 2011-06-12 01:37
http://typeof.net/2011/06/compiler-by-myself-3c/
写了些注记
支持(0)反对(0)
#28楼    
 薄荷之舟   | 2011-06-12 05:50
为什么叫有穷状态机而不叫有限状态机
支持(0)反对(0)
#29楼    
 Ivony...   | 2011-06-12 12:32
引用
诺贝尔：
不明白为什么要将正则表达式转成非确定有穷自动机,然后再转成确定性有穷自动机.

既然他们是等价的,为什么不一开始就用最简单的表示方式?

还有,"闭包"为什么叫"闭包"这种奇奇怪怪的名字.

最后的公式看到人都晕了.

对非确定性有穷自动机的表述,好像神话:"NFA会自动猜测应该选择哪一条边，而且每次都能猜对。",你还不如说NFA是不存在的理论产物,人类无法实现,只能转化为DFA.

但是后面的转换方法就说得不是很明了.最好给个具体的实例,演示一下转换过程.



记得很早很早之前我就告诉过你，C#不是什么英文编程的，让你去了解一些文法的知识，没想到你坚持所谓的中文编程梦想这么久了，还是没有去了解一丁点。


脑袋说的NFA会自动去猜测该选择哪个路径这个说法似乎也有些不妥。

事实上我觉得NFA就是对文法更直观描述，而DFA则是一种实现。

譬如说有一种正则文法：
首先是一个字母A，后面跟上一个"A"，或者"AB"，或者"BA"，或者任意个B。

你很难马上构造出DFA却非常简单的能构造出NFA。

但事实上不论是NFA还是DFA，都是假想的设备。计算机能实现DFA，也能通过脑袋所说的方式，利用DFA来实现NFA。如果你只能输入和获取输出，你无法知道你面前的是一个计算机还是一个DFA还是一个NFA。
支持(0)反对(0)
#30楼[楼主]    
 装配脑袋   | 2011-06-12 14:26
@Ivony...
有穷自动机只是一种模型，猜测能力就是这种模型定义的一部分。当然NFA的猜测能力可以很容易用别的方式表达，比如同时处于多个状态等等，也可以转化为DFA。但是其他计算模型，如非确定性下推自动机NPDA的推测能力无法用有限的内存模拟，而且也不能转化为确定性下推自动机；非确定性图灵机NTM的猜测能力甚至是人们梦寐以求但很可能是现阶段的计算机无法实现的。（现在还没有证明NTM一定不能转化为DTM）
支持(0)反对(0)
#31楼    
 阿☆呆   | 2011-06-12 17:06
说实话，原理基本明白，就是搞的不太清楚。同时，也不知道该怎么用代码来写出来。希望继续努力，LZ，以及自己！加油啊！
支持(0)反对(0)
#32楼    
 阿☆呆   | 2011-06-12 17:11
请问：关注这个系列文章的有没有搞Java的？如果有，我们合作，一起做一个Java的实现版本。供大家学习！Ｏ（∩＿∩）Ｏ哈哈～
支持(0)反对(0)
#33楼    
 一杯苦咖啡   | 2011-06-18 09:41
持续关注！
支持(0)反对(0)
#34楼    
 一杯苦咖啡   | 2011-06-18 09:41
mark
支持(0)反对(0)
#35楼    
 肖敏   | 2011-06-24 15:44
引用
然后我们定义两个正则表达试的并运算，X|Y的NFA为：（实际应用中，常常可以简化掉一部分ε转换边）

怎么觉得这个图跟下一篇的并运算有点不同呢？脑袋兄能解释一下不
这里的并运算把原来两个接受状态变成了非接受状态，而且同时指向同一个接受状态。

下图合并了IF、ID、NUM、error这四个单词的NFA：

支持(0)反对(0)
#36楼    
 肖敏   | 2011-06-24 15:53
@Ivony...
同意不使用“猜测”的说法。脑袋兄是直接沿用虎书的说法。不过对初学者会产生误解。我觉得作者的意思是说，我们可以用编程的方式判断出来，而给人的感觉是：好像电脑具有猜测的功能一样。
支持(0)反对(0)
#37楼    
 我是一头快乐的小毛驴-(Zealot Yin)   | 2011-06-24 16:09
脑袋的这篇文章看的我热血沸腾......确实讲得不错..
支持(0)反对(0)
#38楼    
 我是一头快乐的小毛驴-(Zealot Yin)   | 2011-06-24 16:10
你们在研发新的编译器？
支持(0)反对(0)
#39楼    
 蛙蛙王子   | 2011-07-04 10:41
下半拉确实看不懂，我觉得NFA就是并行，性能好，DFA就是串行的，性能差。
NFA同时处于多种状态，当输入下一个字符时，遍历每一个当时的状态，尝试走每一个状态的每一个边，如果任何一个状态的任何一个边走到下一个状态是可接受状态，就算匹配了。
俺写的一个山寨的正则引擎
大家来找错-自己写个正则引擎(四)-解析方法工厂及单元测试
支持(0)反对(0)
#40楼    
 蛙蛙王子   | 2011-07-04 10:42
看了看俺写的正则引擎的代码，就是个垃圾。。。。
支持(0)反对(0)
#41楼[楼主]    
 装配脑袋   | 2011-07-04 16:07
@肖敏
并运算在同一个单词的定义里是要写成那样的，但最后把所有的单词并起来的时候，就不能合成一个接受状态了，因为要区分接受了什么单词呀
支持(0)反对(0)
#42楼    
 草帽过客   | 2011-07-08 17:20
太华丽了，大学的教材写成这样多好
支持(0)反对(0)
#43楼    
 莆田物流网-0594wl   | 2011-08-30 02:04
关于那个算法，有一些看不懂:

P的初始值为什么是1？
if e=states[i] for some i<=p.这里的e是不是一个状态集合？

多谢.
支持(0)反对(0)
#44楼    
 莆田物流网-0594wl   | 2011-08-30 02:07
if e=states[i] for some i<=p.
如果e是状态集合，那么states[i]也是状态集合。
那么e=states[i]是不是指e中的元素和states[i]元素全部相同？
支持(0)反对(0)
#45楼[楼主]    
 装配脑袋   | 2011-09-09 21:13
@莆田物流网-0594wl
是的呀，集合相等的概念。
支持(0)反对(0)
#46楼    
 君之蘭   | 2011-11-27 16:22
DFA到NFA的跳跃确实让我看了好几遍。。。
主要是NFA的图也没说具体的字符串或接受状态或正则，很难理解。
不过到[a-z][a-z0-9]*的NFA图就很容易理解。

如果把上面的图画成一个状态节点，是不是就不会有“自动猜测的说法了”，我看NFA就是可以从接受状态继续转移到其他状态的状态机。。

公式神马的完全看不懂
支持(0)反对(0)
#47楼    
 黑米   | 2012-01-11 16:49
这一篇写得实在太好了！
关于DFA和NFA的关系的描述，非常地深刻
支持(0)反对(0)
#48楼    
 有来 有去   | 2012-12-27 23:27
看了下你的NFA转DFA代码，其实没必要直接翻译算法，因为每次都要求T'里所有状态能到达的状态集的并集。
这个问题可以转换为图的遍历，下面是我写的伪代码：

?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
//输入: 原状态集org
//输出: closure(org)
Set<State> closure(Set<State> org)
{
    //存放结果
    Set<State> res = new HashSet<State>();
    //还未处理的状态
    Queue<State> unprocess = new LinkedList<State>();
     
    //先把原来的状态加入结果，同时需要等待处理
    for (State s : org) {
        unprocess.push(s);
        res.add(s);
    }
     
    while (!unprocess.empty()) {
          //取一个未处理状态
        State cur = unprocess.pop();
 
        for (Edge e : cur.getEdges()) {
              //看边e是否为空
            if (e.isEmpty()) {
                  //加入能到达的状态
                if (res.add(e.getEndState())) {
                       //新状态也要等待处理
                    unprocess.push(e.getEndState());
                }
            }
        }
    }
 
        return res;
}
支持(0)反对(0)
刷新评论刷新页面返回顶部
注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。
博客园首页博问新闻闪存程序员招聘知识库

最新IT新闻:
· 裁员伤透了中兴员工的心！
· LG收购WebOS资产
· “百度第二司机”车祸离世 十五万网友微博悼念
· 埃洛普：诺基亚不会推出WP8全键盘手机
· iOS被批创新力不足：将成为苹果的Windows XP
» 更多新闻...
最新知识库文章:
· 为什么很多人工作都不开心？
· 不用IDE写C#的Hello World
· 注重实效的架构师——大胆行前人未行之路
· 走向“持续部署”
· curl 网站开发指南
» 更多知识库文章...

公告

昵称：装配脑袋
园龄：8年2个月
荣誉：推荐博客
粉丝：626
关注：8
+加关注
<	2011年6月	>
日	一	二	三	四	五	六
29	30	31	1	2	3	4
5	6	7	8	9	10	11
12	13	14	15	16	17	18
19	20	21	22	23	24	25
26	27	28	29	30	1	2
3	4	5	6	7	8	9
搜索

 
常用链接

我的随笔
我的评论
我的参与
最新评论
我的标签
我的标签

Expression Tree(1)
VB10 C#4 .NET4 泛型 协变 反变(1)
随笔分类

Visual Basic 9.0 前沿播报(10)
随笔档案

2012年1月 (1)
2011年8月 (2)
2011年7月 (3)
2011年6月 (10)
2009年12月 (2)
2009年11月 (3)
2009年9月 (1)
2009年8月 (3)
2009年4月 (1)
2008年11月 (2)
2007年11月 (2)
2006年6月 (2)
2006年4月 (2)
2006年3月 (2)
2006年2月 (2)
2006年1月 (3)
2005年11月 (3)
2005年10月 (3)
2005年9月 (9)
2005年5月 (1)
2005年4月 (1)
2004年12月 (1)
积分与排名

积分 - 258093
排名 - 314
最新评论

1. Re:Expression Tree上手指南 （一）
@J-Pei引用Expression<Func<tWorkOrderDetail, int>> aaa = (tWorkOrderDetail a) => a.tWorkOrder.iDDBH; 怎样动态生成 class tWorkOrder { public int iDDBH { get; set; } } ...
--吴东雷
2. Re:Expression Tree上手指南 （一）
我练习的代码： ParameterExpression expA_double = Expression.Parameter(typeof(double), "a"); ParameterExpression expB_double = Expression.Parameter(typeof(double), "b"); P...
--吴东雷
3. Re:Expression Tree 上手指南 （二）
为什么图都坏掉了呢？
--吴东雷
4. Re:Expression Tree 上手指南 （三）
精彩期待继续。
--楚萧萧
5. Re:自己动手开发编译器（三）有穷自动机
看了下你的NFA转DFA代码，其实没必要直接翻译算法，因为每次都要求T'里所有状态能到达的状态集的并集。这个问题可以转换为图的遍历，下面是我写的伪代码：
//输入: 原状态集org
//输出: closure(org)
Set<State> closure(Set<State> org)
{ //存放结果 Set<State> res = new HashSet<State>(); ...
--有来 有去
阅读排行榜

1. 自己动手开发编译器（零）序言(12673)
2. VS2008亮点：用Lambda表达式进行函数式编程(10532)
3. Expression Tree上手指南 （一）(10504)
4. .NET 4.0中的泛型协变和反变(10500)
5. 自己动手开发编译器（二）正则语言和正则表达式(9081)
评论排行榜

1. 自己动手开发编译器（零）序言(87)
2. Expression Tree上手指南 （一）(73)
3. VS2008亮点：用Lambda表达式进行函数式编程(50)
4. 自己动手开发编译器（二）正则语言和正则表达式(49)
5. 自己动手开发编译器（三）有穷自动机(48)
推荐排行榜

1. 自己动手开发编译器（零）序言(62)
2. 自己动手开发编译器（一）编译器的模块化工程(28)
3. Expression Tree上手指南 （一）(28)
4. 自己动手开发编译器（十二）生成托管代码(23)
5. 自己动手开发编译器（三）有穷自动机(21)
