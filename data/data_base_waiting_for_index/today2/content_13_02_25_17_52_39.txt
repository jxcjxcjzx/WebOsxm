装配中的脑袋
用大脑装配程序，再用程序装配大脑

随笔- 58  文章- 0  评论- 1125 
博客园  首页  新随笔  新文章  联系  管理  订阅 
自己动手开发编译器（一）编译器的模块化工程
本系列的第一篇，我想概述一下编译器的构造，同时帮助大家了解编译器中各个组成部分的用途。想必大家看别的编译原理书籍，大都在第一章或者序言之类的地方，将编译器分成许多模块，然后每一个模块负责编译的特定阶段，最后串起来组成完整的编译器。比如下面这张图就是虎书（Modern Compiler by Andrew W. Appel）第一章中出现的编译器阶段示意图：



那么，为什么要将编译器拆成一个个阶段，一个个模块呢？答案是，为了更加容易设计和理解。一个完成编译器怎么也算是一项大工程，如果不将其分解，将是非常难以编写和维护的。而编译器的模块划分得越清晰，工作就越简单。比如在词法分析阶段将输入的字符流转化成单词（token）流，就大大减少了语法分析阶段需要判断的输入种类，在简化设计的同时还有助于提高性能。此外模块化还将编译器各个阶段的工作尽量独立开。比如编译器可以进行与具体CPU无关的优化，也可以针对某种CPU进行特定的优化，都可以分别独立进行而不用重新设计整个系统。

 

有个事实可能会令人感到惊讶，编译器的各个阶段和模块如何设计，甚至跟这种编程语言的语法有关。比如早期的编程语言Fortran，在设计当初人们还没有掌握现在这么多编译原理的理论，它的语法就不能像当今的语言一样清晰地分成词法分析和语法分析等阶段。因为Fortran的语法并不包含可以用自动机独立处理的词法结构。于是，Fortran语言的编译器在语法分析方面就比较繁杂。有一些历史背景的语言也可能会具有这种复杂化的语法，比如Visual Basic也属于不能用独立的、基于自动机的词法分析器来扫描的语言。因此VB的语法分析器就要比诸如C#等思路较新语言的难写很多。另外一个例子是早期的Pascal语言和某些C语言允许用一些特定的语法来指定某变量为寄存器变量（也许在近期的Delphi中仍然存在，求证）。这是因为当时还没有非常有效的寄存器分配算法，需要程序员凭自己的经验来决定。在今天如果一种语言还允许显式指定某个变量是寄存器变量，就会干扰寄存器分配模块的设计。综上所述我想给各位未来的编译器设计师们一个建议，好好设计你们的语法，就能大大简化编译器的设计！

 

除了简化设计之外，将编译器的各个阶段模块化还有更大的价值。原先我们认为编译器只要把源文件编译成最终的目标代码就好了。但是随着各种各样的开发工具出现——编辑器、自动完成、调试器、重构工具、测试覆盖率检测、性能剖析器…… 人们发现编译器编译过程中，各个阶段产生的结果都可能是非常有价值的。将编译器内部结构和中间结果暴露给用户是必然的趋势。比如Visual Studio下一代产品中将提供的Compiler as a Service特性，其做法就是将编译器的内部模块暴露给用户成为一种服务。我举几个例子可以让大家看到编译器模块的输出有哪些可能的用途：

 

编译器的阶段

产生的结果

用途

词法分析

单词流

语法高亮

语法分析

抽象语法树

语法高亮；代码格式化；代码折叠

语义分析

带类型信息和符号表的抽象语法树

重命名；重构；代码自动生成；代码自动改写

数据流分析

控制流图、冲突图

编辑后继续运行（Edit and Continue）

这里我只是举几个简单的例子，以上结果的用途当然不会仅限于此。我相信将编译器的内部模块暴露给用户还能产生无数有趣和有价值的应用。

 

上述编译器的各个阶段还可以根据其用途分成两个大阶段：词法分析、语法分析和语义分析重点在处理编程语言的符号系统上，统称为编译器的前端（front-end），而中间代码生成、规范化、指令选择、控制流分析、数据流分析、寄存器分配、指令流出、汇编、连结等着重处理代码计算逻辑的阶段统称为编译的后端（back-end）。应该说现代编译器研究的工作重点是编译器的后端，因为前端的技术已经相对非常成熟。但是前端的技术对我们日常开发来讲可能更有机会用到，而且通常更具趣味。所以我也会花较多时间在前端技术上。当大家完成一种编译器的前端后，有几种实现后端的选择：

使用CLR或Java虚拟机作为后端。因为这些大型虚拟机的抽象程度极高，这种方法是最容易的。非常适合动态语言和脚本。
采用可靠的开源或商业后端框架。比如著名的LLVM（http://llvm.org/）。这样可以直接利用LLVM的性能优化成果，以及跨平台等特性。
自己实现后端。要做的事情比较多，但更有助于理解翻译和优化代码的技术。
解释执行。不解释。。。
我将展示的例子miniSharp虽然是C#语法的子集，但是并没有限定必须运行在CLR之上。我会将它设定成一个可重定向的语言，即可以针对多种后端。这样就可以用一个例子演示尽可能多的技术。我也会视我自己的能力范围和工作进度动态调整本系列的内容。也希望大家继续关注VBF.Compilers项目（https://github.com/Ninputer/VBF）和我的微博（http://weibo.com/ninputer）！敬请期待下一篇。

绿色通道： 好文要顶 关注我 收藏该文与我联系 
装配脑袋
关注 - 8
粉丝 - 626
荣誉：推荐博客
+加关注
28 0
(请您对文章做出评价)
« 博主上一篇：自己动手开发编译器（零）序言
» 博主下一篇：自己动手开发编译器（二）正则语言和正则表达式
« 首页上一篇：web前端——让人头疼的多列复选框排列解决办法
» 首页下一篇：Android之ActivityII
 posted on 2011-06-07 21:29 装配脑袋 阅读(9005) 评论(31) 编辑 收藏


评论
#1楼[楼主]    
 装配脑袋   | 2011-06-07 21:30
表格实在太丑了有木有。。谁教我怎么格式化表格一下吧。。
支持(0)反对(0)
#2楼    
 君之蘭   | 2011-06-07 21:48
木有，偶表示表格很有立体感
支持(0)反对(0)
#3楼    
 infinte   | 2011-06-07 22:00
请问我能否转载您的《自己动手开发编译器》系列到我的网站 typeof.net 上？谢谢。
支持(0)反对(0)
#4楼    
 空明流转   | 2011-06-07 22:04
嗯嗯嗯。不过编译器复杂的地方都在语义和代码生成这一块。

如果有机会我可能会写一些博文对楼主所说的部分内容进行一些补充说明~啊哈哈。
支持(0)反对(0)
#5楼    
 诺贝尔   | 2011-06-07 22:28
观望,希望不要那么多术语,通俗点,傻瓜点.

如果c#能够生成本地代码,那么好像也蛮有价值.
支持(0)反对(0)
#6楼    
 Google 手机开发   | 2011-06-07 22:53
强烈支持，关注。
支持(0)反对(0)
#7楼    
 Google 手机开发   | 2011-06-07 22:57
能不能把你的代码https://github.com/Ninputer/VBF， 也放到google 上去啊，获取方便写，google 账号一般都有！ 方便大家获取研究和参考啊。
支持(0)反对(0)
#8楼    
 pangxiaoliang[北京]流浪者   | 2011-06-07 23:02
其实codeplex就挺好，方便～
支持(0)反对(0)
#9楼[楼主]    
 装配脑袋   | 2011-06-07 23:22
@pangxiaoliang[北京]流浪者
@Google 手机开发
github多好用呀。。
支持(0)反对(0)
#10楼    
 道法自然   | 2011-06-07 23:23
Cool!
支持(0)反对(0)
#11楼    
 testzhangsan   | 2011-06-07 23:30
自己写编译器，语法糖不能少，不然其他程序员会骂人的！
支持(0)反对(0)
#12楼    
 G yc {Son of VB.NET}   | 2011-06-08 01:20
支持啊～

@装配脑袋
引用
装配脑袋：表格实在太丑了有木有。。谁教我怎么格式化表格一下吧。。


恩，我也不太会呢！
用Excel试试呢？
支持(0)反对(0)
#13楼    
 Treenew Lyn   | 2011-06-08 08:16
持续关注。
支持(0)反对(0)
#14楼    
 阿水   | 2011-06-08 08:34
关注ING
支持(0)反对(0)
#15楼    
 近水楼台   | 2011-06-08 09:19
支持，持续关注中.....
支持(0)反对(0)
#16楼    
 zhoujie   | 2011-06-08 09:55
强烈支持阿!
如果c#语法的源文件,能够直接编译成本地代码执行,就给力了!
如果能编译到Android或iphone上,就像Mono做的那样,就更给力了!
继续关注!!
支持(0)反对(0)
#17楼    
 gtts   | 2011-06-08 09:58
引用
装配脑袋：
@pangxiaoliang[北京]流浪者
@Google 手机开发
github多好用呀。。

昨天试了很多遍，都没有下载成功，你要是传到园子的“文件”中或者其他方便下载的地方也算是对我们网速不给力的人最大的恩惠
支持(0)反对(0)
#18楼    
 飘遥(Zhenxing Zhou)   | 2011-06-08 10:32
看到标题，猜应该是脑袋的作品，进来一看，果然是
支持(0)反对(0)
#19楼    
 Ivony...   | 2011-06-08 12:51
引用
gtts：
引用
装配脑袋：
@pangxiaoliang[北京]流浪者
@Google 手机开发
github多好用呀。。

昨天试了很多遍，都没有下载成功，你要是传到园子的“文件”中或者其他方便下载的地方也算是对我们网速不给力的人最大的恩惠

https://github.com/Ninputer/VBF/zipball/master

这么难？
支持(0)反对(0)
#20楼    
 Ivony...   | 2011-06-08 12:52
引用
Google 手机开发：能不能把你的代码https://github.com/Ninputer/VBF， 也放到google 上去啊，获取方便写，google 账号一般都有！ 方便大家获取研究和参考啊。



下载源代码不需要登录或是拥有任何帐号。
支持(0)反对(0)
#21楼    
 Ivony...   | 2011-06-08 14:01
引用
装配脑袋：
@pangxiaoliang[北京]流浪者
@Google 手机开发
github多好用呀。。

Git在Windows下有没有好的客户端推荐？
支持(0)反对(0)
#22楼    
 阿☆呆   | 2011-06-08 15:09
看来楼主两篇关于“编译器”的文章，尤其是这篇。写的真棒，分析的也很透彻！希望楼主加油！也多多想楼主学习！O(∩_∩)O哈哈~
支持(0)反对(0)
#23楼    
 egmkang   | 2011-06-08 15:31
能把C#搞成Native语言么??
支持(0)反对(0)
#24楼    
 helloworld2   | 2011-06-08 15:38
楼主不错
支持(0)反对(0)
#25楼    
 infinte   | 2011-06-08 16:53
@Ivony...
msysgit，下 portable。完毕。
支持(0)反对(0)
#26楼    
 gtts   | 2011-06-09 15:42
@Ivony...
我试了好多遍，用SVN也失败了，麻烦你给我发一份吧，mcgtts@gmail.com谢了。
支持(0)反对(0)
#27楼    
 深海沉   | 2011-06-10 10:39
留名是为了学习
支持(0)反对(0)
#28楼    
 陈国立   | 2011-06-11 21:35
博主提到语言无关性，如果能实现把C#编译到任何机器设备上，那就强汗了！期待，非常期待博主往这方面研究！如果能做到这样，C#肯定能转化为强大生产力....
支持(0)反对(0)
#29楼    
 蛙蛙王子   | 2011-07-04 09:40
那个图横着的字把我弄晕了，查了半天才查出来都是什么意思
支持(0)反对(0)
#30楼    
 子 夜.   | 2011-07-29 14:26
牛X +1
支持(0)反对(0)
#31楼    
 airwolf2026   | 2011-08-04 21:06
mark,学习...以前学习编译原理的时候就头痛
支持(0)反对(0)
刷新评论刷新页面返回顶部
注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。
博客园首页博问新闻闪存程序员招聘知识库

最新IT新闻:
· 裁员伤透了中兴员工的心！
· LG收购WebOS资产
· “百度第二司机”车祸离世 十五万网友微博悼念
· 埃洛普：诺基亚不会推出WP8全键盘手机
· iOS被批创新力不足：将成为苹果的Windows XP
» 更多新闻...
最新知识库文章:
· 为什么很多人工作都不开心？
· 不用IDE写C#的Hello World
· 注重实效的架构师——大胆行前人未行之路
· 走向“持续部署”
· curl 网站开发指南
» 更多知识库文章...

公告

昵称：装配脑袋
园龄：8年2个月
荣誉：推荐博客
粉丝：626
关注：8
+加关注
<	2011年6月	>
日	一	二	三	四	五	六
29	30	31	1	2	3	4
5	6	7	8	9	10	11
12	13	14	15	16	17	18
19	20	21	22	23	24	25
26	27	28	29	30	1	2
3	4	5	6	7	8	9
搜索

 
常用链接

我的随笔
我的评论
我的参与
最新评论
我的标签
我的标签

Expression Tree(1)
VB10 C#4 .NET4 泛型 协变 反变(1)
随笔分类

Visual Basic 9.0 前沿播报(10)
随笔档案

2012年1月 (1)
2011年8月 (2)
2011年7月 (3)
2011年6月 (10)
2009年12月 (2)
2009年11月 (3)
2009年9月 (1)
2009年8月 (3)
2009年4月 (1)
2008年11月 (2)
2007年11月 (2)
2006年6月 (2)
2006年4月 (2)
2006年3月 (2)
2006年2月 (2)
2006年1月 (3)
2005年11月 (3)
2005年10月 (3)
2005年9月 (9)
2005年5月 (1)
2005年4月 (1)
2004年12月 (1)
积分与排名

积分 - 258093
排名 - 314
最新评论

1. Re:Expression Tree上手指南 （一）
@J-Pei引用Expression<Func<tWorkOrderDetail, int>> aaa = (tWorkOrderDetail a) => a.tWorkOrder.iDDBH; 怎样动态生成 class tWorkOrder { public int iDDBH { get; set; } } ...
--吴东雷
2. Re:Expression Tree上手指南 （一）
我练习的代码： ParameterExpression expA_double = Expression.Parameter(typeof(double), "a"); ParameterExpression expB_double = Expression.Parameter(typeof(double), "b"); P...
--吴东雷
3. Re:Expression Tree 上手指南 （二）
为什么图都坏掉了呢？
--吴东雷
4. Re:Expression Tree 上手指南 （三）
精彩期待继续。
--楚萧萧
5. Re:自己动手开发编译器（三）有穷自动机
看了下你的NFA转DFA代码，其实没必要直接翻译算法，因为每次都要求T'里所有状态能到达的状态集的并集。这个问题可以转换为图的遍历，下面是我写的伪代码：
//输入: 原状态集org
//输出: closure(org)
Set<State> closure(Set<State> org)
{ //存放结果 Set<State> res = new HashSet<State>(); ...
--有来 有去
阅读排行榜

1. 自己动手开发编译器（零）序言(12673)
2. VS2008亮点：用Lambda表达式进行函数式编程(10532)
3. Expression Tree上手指南 （一）(10504)
4. .NET 4.0中的泛型协变和反变(10500)
5. 自己动手开发编译器（二）正则语言和正则表达式(9081)
评论排行榜

1. 自己动手开发编译器（零）序言(87)
2. Expression Tree上手指南 （一）(73)
3. VS2008亮点：用Lambda表达式进行函数式编程(50)
4. 自己动手开发编译器（二）正则语言和正则表达式(49)
5. 自己动手开发编译器（三）有穷自动机(48)
推荐排行榜

1. 自己动手开发编译器（零）序言(62)
2. 自己动手开发编译器（一）编译器的模块化工程(28)
3. Expression Tree上手指南 （一）(28)
4. 自己动手开发编译器（十二）生成托管代码(23)
5. 自己动手开发编译器（三）有穷自动机(21)
