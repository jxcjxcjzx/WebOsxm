   
qileilove
不想做屌丝的码农，不是好项目经理！屌丝生涯从此开始！ 
BlogJava   首页   新随笔 联系   聚合   管理 
随笔-1878  评论-51  文章-1  trackbacks-0 
操作系统常见面试题总结 
　1、什么是进程（Process）和线程（Thread）？有何区别？

　　进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。线程是进程的一个实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。一个线程可以创建和撤销另一个线程，同一个进程中的多个线程之间可以并发执行。

　　进程与应用程序的区别在于应用程序作为一个静态文件存储在计算机系统的硬盘等存储空间中，而进程则是处于动态条件下由操作系统维护的系统资源管理实体。

　　2、Windows下的内存是如何管理的？

　　Windows提供了3种方法来进行内存管理：虚拟内存，最适合用来管理大型对象或者结构数组；内存映射文件，最适合用来管理大型数据流（通常来自文件）以及在单个计算机上运行多个进程之间共享数据；内存堆栈，最适合用来管理大量的小对象。

　　Windows操纵内存可以分两个层面：物理内存和虚拟内存。

　　其中物理内存由系统管理，不允许应用程序直接访问，应用程序可见的只有一个2G地址空间，而内存分配是通过堆进行的。对于每个进程都有自己的默认堆，当一个堆创建后，就通过虚拟内存操作保留了相应大小的地址块（不占有实际的内存，系统消耗很小）。当在堆上分配一块内存时，系统在堆的地址表里找到一个空闲块（如果找不到，且堆创建属性是可扩充的，则扩充堆大小），为这个空闲块所包含的所有内存页提交物理对象（在物理内存上或硬盘的交换文件上），这时就可以访问这部分地址。提交时，系统将对所有进程的内存统一调配，如果物理内存不够，系统试图把一部分进程暂时不访问的页放入交换文件，以腾出部分物理内存。释放内存时，只在堆中将所在的页解除提交（相应的物理对象被解除），继续保留地址空间。

　　如果要知道某个地址是否被占用/可不可以访问，只要查询此地址的虚拟内存状态即可。如果是提交，则可以访问。如果仅仅保留，或没保留，则产生一个软件异常。此外，有些内存页可以设置各种属性。如果是只读，向内存写也会产生软件异常。

　　3、Windows消息调度机制是？

　　A）指令队列；B）指令堆栈；C）消息队列；D）消息堆栈

　　答案：C

　　处理消息队列的顺序。首先Windows绝对不是按队列先进先出的次序来处理的，而是有一定优先级的。优先级通过消息队列的状态标志来实现的。首先，最高优先级的是别的线程发过来的消息（通过sendmessage）；其次，处理登记消息队列消息；再次处理QS_QUIT标志，处理虚拟输入队列，处理wm_paint；最后是wm_timer。

　　4、描述实时系统的基本特性

　　在特定时间内完成特定的任务，实时性与可靠性。

　　所谓“实时操作系统”，实际上是指操作系统工作时，其各种资源可以根据需要随时进行动态分配。由于各种资源可以进行动态分配，因此，其处理事务的能力较强、速度较快。

　　5、中断和轮询的特点

　　对I/O设备的程序轮询的方式，是早期的计算机系统对I/O设备的一种管理方式。它定时对各种设备轮流询问一遍有无处理要求。轮流询问之后，有要求的，则加以处理。在处理I/O设备的要求之后，处理机返回继续工作。尽管轮询需要时间，但轮询要比I/O设备的速度要快得多，所以一般不会发生不能及时处理的问题。当然，再快的处理机，能处理的输入输出设备的数量也是有一定限度的。而且，程序轮询毕竟占据了CPU相当一部分处理时间，因此，程序轮询是一种效率较低的方式，在现代计算机系统中已很少应用。

　　程序中断通常简称中断，是指CPU在正常运行程序的过程中，由于预先安排或发生了各种随机的内部或外部事件，使CPU中断正在运行的程序，而转到为响应的服务程序去处理。

　　轮询——效率低，等待时间很长，CPU利用率不高。

　　中断——容易遗漏一些问题，CPU利用率高。



　6、什么是临界区？如何解决冲突？

　　每个进程中访问临界资源的那段程序称为临界区，每次只准许一个进程进入临界区，进入后不允许其他进程进入。

　　（1）如果有若干进程要求进入空闲的临界区，一次仅允许一个进程进入；

　　（2）任何时候，处于临界区内的进程不可多于一个。如已有进程进入自己的临界区，则其它所有试图进入临界区的进程必须等待；

　　（3）进入临界区的进程要在有限时间内退出，以便其它进程能及时进入自己的临界区；

　　（4）如果进程不能进入自己的临界区，则应让出CPU，避免进程出现“忙等”现象。

　　7、说说分段和分页

　　页是信息的物理单位，分页是为实现离散分配方式，以消减内存的外零头，提高内存的利用率；或者说，分页仅仅是由于系统管理的需要，而不是用户的需要。

　　段是信息的逻辑单位，它含有一组其意义相对完整的信息。分段的目的是为了能更好的满足用户的需要。

　　页的大小固定且由系统确定，把逻辑地址划分为页号和页内地址两部分，是由机器硬件实现的，因而一个系统只能有一种大小的页面。段的长度却不固定，决定于用户所编写的程序，通常由编辑程序在对源程序进行编辑时，根据信息的性质来划分。

　　分页的作业地址空间是一维的，即单一的线性空间，程序员只须利用一个记忆符，即可表示一地址。分段的作业地址空间是二维的，程序员在标识一个地址时，既需给出段名，又需给出段内地址。

　　8、说出你所知道的保持进程同步的方法？

　　进程间同步的主要方法有原子操作、信号量机制、自旋锁、管程、会合、分布式系统等。

　　9、Linux中常用到的命令

　　显示文件目录命令ls        如ls

　　改变当前目录命令cd        如cd /home

　　建立子目录mkdir           如mkdir xiong

　　删除子目录命令rmdir       如rmdir /mnt/cdrom

　　删除文件命令rm            如rm /ucdos.bat

　　文件复制命令cp            如cp /ucdos /fox

　　获取帮助信息命令man      如man ls

　　显示文件的内容less        如less mwm.lx

　　重定向与管道type          如type readme>>direct，将文件readme的内容追加到文direct中


10、Linux文件属性有哪些？（共十位）

　　-rw-r--r--那个是权限符号，总共是- --- --- ---这几个位。

　　第一个短横处是文件类型识别符：-表示普通文件；c表示字符设备（character）；b表示块设备（block）；d表示目录（directory）；l表示链接文件（link）；后面第一个三个连续的短横是用户权限位（User），第二个三个连续短横是组权限位（Group），第三个三个连续短横是其他权限位（Other）。每个权限位有三个权限，r（读权限），w（写权限），x（执行权限）。如果每个权限位都有权限存在，那么满权限的情况就是：-rwxrwxrwx；权限为空的情况就是- --- --- ---。

　　权限的设定可以用chmod命令，其格式位：chmod ugoa+/-/=rwx filename/directory。例如：

　　一个文件aaa具有完全空的权限- --- --- ---。

　　chmod u+rw aaa（给用户权限位设置读写权限，其权限表示为：- rw- --- ---）

　　chmod g+r aaa（给组设置权限为可读，其权限表示为：- --- r-- ---）

　　chmod ugo+rw aaa（给用户，组，其它用户或组设置权限为读写，权限表示为：- rw- rw- rw-）

　　如果aaa具有满权限- rwx rwx rwx。

　　chmod u-x aaa（去掉用户可执行权限，权限表示为：- rw- rwx rwx）

　　如果要给aaa赋予制定权限- rwx r-x r-x，命令为：

　　chmod u=rwx，go=rx aaa

　　11、makefile文件的作用是什么？

　　一个工程中的源文件不计其数，其按类型、功能、模块分别放在若干个目录中。makefile定义了一系列的规则来指定哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作。因为makefile就像一个Shell脚本一样，其中也可以执行操作系统的命令。makefile带来的好处就是——“自动化编译”。一旦写好，只需要一个make命令，整个工程完全自动编译，极大地提高了软件开发的效率。make是一个命令工具，是一个解释makefile中指令的命令工具。一般来说，大多数的IDE都有这个命令，比如：Delphi的make，Visual C++的nmake，Linux下GNU的make。可见，makefile都成为了一种在工程方面的编译方法。

　　12、简术OSI的物理层Layer1，链路层Layer2，网络层Layer3的任务。

　　网络层：通过路由选择算法，为报文或分组通过通信子网选择最适当的路径。

　　链路层：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。

　　物理层：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。

　　13、什么是中断？中断时CPU做什么工作？

　　中断是指在计算机执行期间，系统内发生任何非寻常的或非预期的急需处理事件，使得CPU暂时中断当前正在执行的程序而转去执行相应的事件处理程序。待处理完毕后又返回原来被中断处继续执行或调度新的进程执行的过程。

　　14、你知道操作系统的内容分为几块吗？什么叫做虚拟内存？他和主存的关系如何？内存管理属于操作系统的内容吗？

　　操作系统的主要组成部分：进程和线程的管理，存储管理，设备管理，文件管理。虚拟内存是一些系统页文件，存放在磁盘上，每个系统页文件大小为4K，物理内存也被分页，每个页大小也为4K，这样虚拟页文件和物理内存页就可以对应，实际上虚拟内存就是用于物理内存的临时存放的磁盘空间。页文件就是内存页，物理内存中每页叫物理页，磁盘上的页文件叫虚拟页，物理页+虚拟页就是系统所有使用的页文件的总和。

　15、线程是否具有相同的堆栈？dll是否有独立的堆栈？

　　每个线程有自己的堆栈。

　　dll是否有独立的堆栈？这个问题不好回答，或者说这个问题本身是否有问题。因为dll中的代码是被某些线程所执行，只有线程拥有堆栈。如果dll中的代码是exe中的线程所调用，那么这个时候是不是说这个dll没有独立的堆栈？如果dll中的代码是由dll自己创建的线程所执行，那么是不是说dll有独立的堆栈？

　　以上讲的是堆栈，如果对于堆来说，每个dll有自己的堆，所以如果是从dll中动态分配的内存，最好是从dll中删除；如果你从dll中分配内存，然后在exe中，或者另外一个dll中删除，很有可能导致程序崩溃。

　　16、什么是缓冲区溢出？有什么危害？其原因是什么？

　　缓冲区溢出是指当计算机向缓冲区内填充数据时超过了缓冲区本身的容量，溢出的数据覆盖在合法数据上。

　　危害：在当前网络与分布式系统安全中，被广泛利用的50%以上都是缓冲区溢出，其中最著名的例子是1988年利用fingerd漏洞的蠕虫。而缓冲区溢出中，最为危险的是堆栈溢出，因为入侵者可以利用堆栈溢出，在函数返回时改变返回程序的地址，让其跳转到任意地址，带来的危害一种是程序崩溃导致拒绝服务，另外一种就是跳转并且执行一段恶意代码，比如得到shell，然后为所欲为。通过往程序的缓冲区写超出其长度的内容，造成缓冲区的溢出，从而破坏程序的堆栈，使程序转而执行其它指令，以达到攻击的目的。

　　造成缓冲区溢出的主原因是程序中没有仔细检查用户输入的参数。

　　17、什么是死锁？其条件是什么？怎样避免死锁？

　　死锁的概念：在两个或多个并发进程中，如果每个进程持有某种资源而又都等待别的进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗地讲，就是两个或多个进程被无限期地阻塞、相互等待的一种状态。

　　死锁产生的原因主要是：？ 系统资源不足；？ 进程推进顺序非法。

　　产生死锁的必要条件：

　　（1）互斥（mutualexclusion），一个资源每次只能被一个进程使用；

　　（2）不可抢占（nopreemption），进程已获得的资源，在未使用完之前，不能强行剥夺；

　　（3）占有并等待（hold andwait），一个进程因请求资源而阻塞时，对已获得的资源保持不放；

　　（4）环形等待（circularwait），若干进程之间形成一种首尾相接的循环等待资源关系。

　　这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。

　　死锁的解除与预防：理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和解除死锁。所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确定资源的合理分配算法，避免进程永久占据系统资源。此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。

　　死锁的处理策略：鸵鸟策略、预防策略、避免策略、检测与恢复策略。









posted on 2012-08-22 11:33 顺其自然EVO 阅读(5157) 评论(0)  编辑  收藏 
 
新用户注册  刷新评论列表  

程序员问答平台，解决您的技术难题
 
  
   
 博客园  博问  IT新闻  Java程序员招聘  
标题  请输入标题 
姓名  请输入你的姓名 
主页   
请输入验证码  
验证码 *    
 
内容(请不要发表任何与政治相关的内容) 请输入评论内容
 
 
Remember Me? 
    登录        
[使用Ctrl+Enter键可以直接提交] 
  

 
 
 
网站导航:
博客园   IT新闻   知识库   C++博客   程序员招聘   管理  
 
  
 
 

< 2012年8月 > 
 
日 一 二 三 四 五 六 
29 30 31 1 2 3 4 
5 6 7 8 9 10 11 
12 13 14 15 16 17 18 
19 20 21 22 23 24 25 
26 27 28 29 30 31 1 
2 3 4 5 6 7 8 


常用链接
我的随笔 
我的评论 
我的参与 
最新评论 
留言簿(19)
给我留言 
查看公开留言 
查看私人留言 
随笔分类
android(35) 
CMMI & QA(13) 
DB2(18) 
defalut managerment system 缺陷管理系统(19) 
HTML5(4) 
jmeter and badboy(17) 
linux(35) 
loadrunner(90) 
mongodb(1) 
qtp(33) 
requirement and analysis(8) 
ruby languages (2) 
selenium and watir webdrivers 自动化测试学习(114) 
web 前端性能测试(38) 
安全性测试(7) 
性能测试(125) 
敏捷测试(16) 
数据库(168) 
新闻(7) 
测试学习专栏(598) 
管理方向(93) 
设计模式学习(11) 
随笔档案
2013年9月 (88) 
2013年8月 (97) 
2013年7月 (100) 
2013年6月 (97) 
2013年5月 (147) 
2013年4月 (67) 
2013年3月 (60) 
2013年2月 (17) 
2013年1月 (58) 
2012年12月 (43) 
2012年11月 (32) 
2012年10月 (30) 
2012年9月 (88) 
2012年8月 (85) 
2012年7月 (69) 
2012年6月 (103) 
2012年5月 (125) 
2012年4月 (56) 
2012年3月 (19) 
2012年2月 (20) 
2012年1月 (24) 
2011年12月 (99) 
2011年11月 (179) 
2011年10月 (148) 
2011年9月 (26) 
文章档案
2012年8月 (1) 
搜索

  
最新评论 
1. re: 接口测试的两种方法[未登录] 
不错的文章 
--小飞侠 
2. re: LINUX-SAMBA服务配置 
终于把跨网段问题解决了，爱死你了 
--rio 
3. re: 浅谈软件兼容性测试 
12121212 
--1212 
4. re: 浅谈软件兼容性测试 
212121212 
--1212 
5. re: 接口测试的两种方法 
写的很好，学习了！谢谢！ 
--zhangdl 
阅读排行榜
1. eclipse中配置SVN(11101) 
2. win7下jdk tomcat安装环境变量配置(7587) 
3. 利用JMeter进行Web测试（简介适合初学者）(6970) 
4. java连接sqlserver (6718) 
5. 操作系统常见面试题总结(5157) 
评论排行榜
1. java实现后台自动发邮件功能(6) 
2. 如何进行自动化测试和手工测试(3) 
3. 浅谈软件兼容性测试(3) 
4. 如何看待软件缺陷(2) 
5. Java中RSA非对称密钥加解密使用示例(2) 
60天内阅读排行
1. 高级软件测试人员必备素质(124) 
2. 性能测试工具比较：LoadRunner vs JMeter - 测试结果数据比较(108) 
3. 软件测试之读书笔记(97) 
4. 软件测试面试 (一) 如何测试一个杯子(97) 
5. 登录界面测试用例设计(91) 
Powered by: 博客园 模板提供：沪江博客 Copyright ©2013 顺其自然EVO 
